// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.7                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
export interface ParserGeneratorOptions {
trueStringValues?: string[];
falseStringValues?: string[];
}
const defaultParserGeneratorOptions = {
trueStringValues: ["", "true", "yes", "on", "1"],
falseStringValues: ["false", "no", "off", "0"],
}
/**
* @description The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#}
*/
export function parseSchemaDocument(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "openapi":
return [
name,
parseOpenapi(value, configuration),
]
case "info":
return [
name,
parsePropertiesInfo(value, configuration),
]
case "externalDocs":
return [
name,
parsePropertiesExternalDocs(value, configuration),
]
case "servers":
return [
name,
parsePropertiesServers(value, configuration),
]
case "security":
return [
name,
parsePropertiesSecurity(value, configuration),
]
case "tags":
return [
name,
parsePropertiesTags(value, configuration),
]
case "paths":
return [
name,
parsePropertiesPaths(value, configuration),
]
case "components":
return [
name,
parsePropertiesComponents(value, configuration),
]
default:
return [
name,
(parseAdditionalProperties(value, configuration) ??
parsePatternPropertiesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Reference}
*/
export function parseReference(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseReferenceRef(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info}
*/
export function parseDefinitionsInfo(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "title":
return [
name,
parseInfoTitle(value, configuration),
]
case "description":
return [
name,
parseInfoDescription(value, configuration),
]
case "termsOfService":
return [
name,
parseTermsOfService(value, configuration),
]
case "contact":
return [
name,
parseInfoContact(value, configuration),
]
case "license":
return [
name,
parseInfoLicense(value, configuration),
]
case "version":
return [
name,
parseVersion(value, configuration),
]
default:
return [
name,
(parseInfoAdditionalProperties(value, configuration) ??
parseInfoX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact}
*/
export function parseDefinitionsContact(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseContactName(value, configuration),
]
case "url":
return [
name,
parseContactUrl(value, configuration),
]
case "email":
return [
name,
parseEmail(value, configuration),
]
default:
return [
name,
(parseContactAdditionalProperties(value, configuration) ??
parseContactX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License}
*/
export function parseDefinitionsLicense(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseLicenseName(value, configuration),
]
case "url":
return [
name,
parseLicenseUrl(value, configuration),
]
default:
return [
name,
(parseLicenseAdditionalProperties(value, configuration) ??
parseLicenseX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server}
*/
export function parseDefinitionsServer(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "url":
return [
name,
parseServerUrl(value, configuration),
]
case "description":
return [
name,
parseServerDescription(value, configuration),
]
case "variables":
return [
name,
parseVariables(value, configuration),
]
default:
return [
name,
(parseServerAdditionalProperties(value, configuration) ??
parseServerX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable}
*/
export function parseServerVariable(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "enum":
return [
name,
parseServerVariableEnum(value, configuration),
]
case "default":
return [
name,
parseServerVariableDefault(value, configuration),
]
case "description":
return [
name,
parseServerVariableDescription(value, configuration),
]
default:
return [
name,
(parseServerVariableAdditionalProperties(value, configuration) ??
parseServerVariableX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components}
*/
export function parseDefinitionsComponents(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "schemas":
return [
name,
parseSchemas(value, configuration),
]
case "responses":
return [
name,
parseComponentsResponses(value, configuration),
]
case "parameters":
return [
name,
parseComponentsParameters(value, configuration),
]
case "examples":
return [
name,
parseComponentsExamples(value, configuration),
]
case "requestBodies":
return [
name,
parseRequestBodies(value, configuration),
]
case "headers":
return [
name,
parseComponentsHeaders(value, configuration),
]
case "securitySchemes":
return [
name,
parseSecuritySchemes(value, configuration),
]
case "links":
return [
name,
parseComponentsLinks(value, configuration),
]
case "callbacks":
return [
name,
parseComponentsCallbacks(value, configuration),
]
default:
return [
name,
(parseComponentsAdditionalProperties(value, configuration) ??
parseComponentsX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema}
*/
export function parseDefinitionsSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "title":
return [
name,
parseSchemaTitle(value, configuration),
]
case "multipleOf":
return [
name,
parseMultipleOf(value, configuration),
]
case "maximum":
return [
name,
parseMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseMinLength(value, configuration),
]
case "pattern":
return [
name,
parsePattern(value, configuration),
]
case "maxItems":
return [
name,
parseMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseUniqueItems(value, configuration),
]
case "maxProperties":
return [
name,
parseMaxProperties(value, configuration),
]
case "minProperties":
return [
name,
parseMinProperties(value, configuration),
]
case "required":
return [
name,
parseSchemaRequired(value, configuration),
]
case "enum":
return [
name,
parseSchemaEnum(value, configuration),
]
case "type":
return [
name,
parseSchemaType(value, configuration),
]
case "not":
return [
name,
parseSchemaNot(value, configuration),
]
case "allOf":
return [
name,
parseAllOf(value, configuration),
]
case "oneOf":
return [
name,
parseOneOf(value, configuration),
]
case "anyOf":
return [
name,
parseAnyOf(value, configuration),
]
case "items":
return [
name,
parsePropertiesSchemaItems(value, configuration),
]
case "properties":
return [
name,
parseProperties(value, configuration),
]
case "additionalProperties":
return [
name,
parsePropertiesSchemaAdditionalProperties(value, configuration),
]
case "description":
return [
name,
parseSchemaDescription(value, configuration),
]
case "format":
return [
name,
parseFormat(value, configuration),
]
case "default":
return [
name,
parseSchemaDefault(value, configuration),
]
case "nullable":
return [
name,
parseNullable(value, configuration),
]
case "discriminator":
return [
name,
parseSchemaDiscriminator(value, configuration),
]
case "readOnly":
return [
name,
parseReadOnly(value, configuration),
]
case "writeOnly":
return [
name,
parseWriteOnly(value, configuration),
]
case "example":
return [
name,
parseSchemaExample(value, configuration),
]
case "externalDocs":
return [
name,
parseSchemaExternalDocs(value, configuration),
]
case "deprecated":
return [
name,
parseSchemaDeprecated(value, configuration),
]
case "xml":
return [
name,
parseSchemaXml(value, configuration),
]
default:
return [
name,
(parseDefinitionsSchemaAdditionalProperties(value, configuration) ??
parseSchemaPatternPropertiesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator}
*/
export function parseDefinitionsDiscriminator(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "propertyName":
return [
name,
parsePropertyName(value, configuration),
]
case "mapping":
return [
name,
parseMapping(value, configuration),
]
default:
return value;
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML}
*/
export function parseDefinitionsXml(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseXmlName(value, configuration),
]
case "namespace":
return [
name,
parseNamespace(value, configuration),
]
case "prefix":
return [
name,
parsePrefix(value, configuration),
]
case "attribute":
return [
name,
parseAttribute(value, configuration),
]
case "wrapped":
return [
name,
parseWrapped(value, configuration),
]
default:
return [
name,
(parseXmlAdditionalProperties(value, configuration) ??
parseXmlX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response}
*/
export function parseResponse(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseResponseDescription(value, configuration),
]
case "headers":
return [
name,
parseResponseHeaders(value, configuration),
]
case "content":
return [
name,
parseResponseContent(value, configuration),
]
case "links":
return [
name,
parseResponseLinks(value, configuration),
]
default:
return [
name,
(parseResponseAdditionalProperties(value, configuration) ??
parseResponseX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType}
*/
export function parseMediaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "schema":
return [
name,
parseMediaTypeSchema(value, configuration),
]
case "example":
return [
name,
parseMediaTypeExample(value, configuration),
]
case "examples":
return [
name,
parseMediaTypeExamples(value, configuration),
]
case "encoding":
return [
name,
parseMediaTypeEncoding(value, configuration),
]
default:
return [
name,
(parseDefinitionsMediaTypeAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example}
*/
export function parseDefinitionsExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "summary":
return [
name,
parseExampleSummary(value, configuration),
]
case "description":
return [
name,
parseExampleDescription(value, configuration),
]
case "value":
return [
name,
parseValue(value, configuration),
]
case "externalValue":
return [
name,
parseExternalValue(value, configuration),
]
default:
return [
name,
(parseExampleAdditionalProperties(value, configuration) ??
parseExampleX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header}
*/
export function parseHeader(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths}
*/
export function parseDefinitionsPaths(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parsePathsAdditionalProperties(value, configuration) ??
parsePatternProperties(value, configuration) ??
parsePathsX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem}
*/
export function parsePathItem(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "$ref":
return [
name,
parsePathItemRef(value, configuration),
]
case "summary":
return [
name,
parsePathItemSummary(value, configuration),
]
case "description":
return [
name,
parsePathItemDescription(value, configuration),
]
case "servers":
return [
name,
parsePathItemServers(value, configuration),
]
case "parameters":
return [
name,
parsePathItemParameters(value, configuration),
]
default:
return [
name,
(parsePathItemAdditionalProperties(value, configuration) ??
parseGetPutPostDeleteOptionsHeadPatchTrace(value, configuration) ??
parsePathItemX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation}
*/
export function parseOperation(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "tags":
return [
name,
parseOperationTags(value, configuration),
]
case "summary":
return [
name,
parseOperationSummary(value, configuration),
]
case "description":
return [
name,
parseOperationDescription(value, configuration),
]
case "externalDocs":
return [
name,
parseOperationExternalDocs(value, configuration),
]
case "operationId":
return [
name,
parseOperationOperationId(value, configuration),
]
case "parameters":
return [
name,
parseOperationParameters(value, configuration),
]
case "requestBody":
return [
name,
parseOperationRequestBody(value, configuration),
]
case "responses":
return [
name,
parseOperationResponses(value, configuration),
]
case "callbacks":
return [
name,
parseOperationCallbacks(value, configuration),
]
case "deprecated":
return [
name,
parseOperationDeprecated(value, configuration),
]
case "security":
return [
name,
parseOperationSecurity(value, configuration),
]
case "servers":
return [
name,
parseOperationServers(value, configuration),
]
default:
return [
name,
(parseOperationAdditionalProperties(value, configuration) ??
parseOperationX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses}
*/
export function parseDefinitionsResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "default":
return [
name,
parseResponsesDefault(value, configuration),
]
default:
return [
name,
(parseResponsesAdditionalProperties(value, configuration) ??
parseResponses15D2Xx(value, configuration) ??
parseResponsesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement}
*/
export function parseSecurityRequirement(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseSecurityRequirementAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag}
*/
export function parseTag(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseTagName(value, configuration),
]
case "description":
return [
name,
parseTagDescription(value, configuration),
]
case "externalDocs":
return [
name,
parseTagExternalDocs(value, configuration),
]
default:
return [
name,
(parseTagAdditionalProperties(value, configuration) ??
parseTagX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation}
*/
export function parseExternalDocumentation(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseExternalDocumentationDescription(value, configuration),
]
case "url":
return [
name,
parseExternalDocumentationUrl(value, configuration),
]
default:
return [
name,
(parseExternalDocumentationAdditionalProperties(value, configuration) ??
parseExternalDocumentationX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description Example and examples are mutually exclusive
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExampleXORExamples}
*/
export function parseExampleXorExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Schema and content are mutually exclusive, at least one is required
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent}
*/
export function parseSchemaXorContent(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(value)
??
(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter}
*/
export function parseParameter(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
(
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @description Parameter location
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation}
*/
export function parseParameterLocation(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseParameterLocation0(value, configuration)
??
parseParameterLocation1(value, configuration)
??
parseParameterLocation2(value, configuration)
??
parseParameterLocation3(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody}
*/
export function parseDefinitionsRequestBody(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseRequestBodyDescription(value, configuration),
]
case "content":
return [
name,
parseRequestBodyContent(value, configuration),
]
case "required":
return [
name,
parseRequestBodyRequired(value, configuration),
]
default:
return [
name,
(parseRequestBodyAdditionalProperties(value, configuration) ??
parseRequestBodyX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme}
*/
export function parseSecurityScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSecurityScheme0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
??
parseSecurityScheme2(value, configuration)
??
parseSecurityScheme3(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme}
*/
export function parseApiKeySecurityScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseApiKeySecuritySchemeType(value, configuration),
]
case "name":
return [
name,
parseApiKeySecuritySchemeName(value, configuration),
]
case "in":
return [
name,
parseApiKeySecuritySchemeIn(value, configuration),
]
case "description":
return [
name,
parseApiKeySecuritySchemeDescription(value, configuration),
]
default:
return [
name,
(parseApiKeySecuritySchemeAdditionalProperties(value, configuration) ??
parseApiKeySecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme}
*/
export function parseHttpSecurityScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme}
*/
export function parseOauth2SecurityScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOauth2SecuritySchemeType(value, configuration),
]
case "flows":
return [
name,
parseFlows(value, configuration),
]
case "description":
return [
name,
parseOauth2SecuritySchemeDescription(value, configuration),
]
default:
return [
name,
(parseOauth2SecuritySchemeAdditionalProperties(value, configuration) ??
parseOauth2SecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme}
*/
export function parseOpenIdConnectSecurityScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOpenIdConnectSecuritySchemeType(value, configuration),
]
case "openIdConnectUrl":
return [
name,
parseOpenIdConnectUrl(value, configuration),
]
case "description":
return [
name,
parseOpenIdConnectSecuritySchemeDescription(value, configuration),
]
default:
return [
name,
(parseOpenIdConnectSecuritySchemeAdditionalProperties(value, configuration) ??
parseOpenIdConnectSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows}
*/
export function parseOauthFlows(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "implicit":
return [
name,
parseImplicit(value, configuration),
]
case "password":
return [
name,
parsePassword(value, configuration),
]
case "clientCredentials":
return [
name,
parseClientCredentials(value, configuration),
]
case "authorizationCode":
return [
name,
parseAuthorizationCode(value, configuration),
]
default:
return [
name,
(parseOauthFlowsAdditionalProperties(value, configuration) ??
parseOauthFlowsX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow}
*/
export function parseImplicitOauthFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "authorizationUrl":
return [
name,
parseImplicitOauthFlowAuthorizationUrl(value, configuration),
]
case "refreshUrl":
return [
name,
parseImplicitOauthFlowRefreshUrl(value, configuration),
]
case "scopes":
return [
name,
parseImplicitOauthFlowScopes(value, configuration),
]
default:
return [
name,
(parseDefinitionsImplicitOauthFlowAdditionalProperties(value, configuration) ??
parseImplicitOauthFlowX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow}
*/
export function parsePasswordOauthFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "tokenUrl":
return [
name,
parsePasswordOauthFlowTokenUrl(value, configuration),
]
case "refreshUrl":
return [
name,
parsePasswordOauthFlowRefreshUrl(value, configuration),
]
case "scopes":
return [
name,
parsePasswordOauthFlowScopes(value, configuration),
]
default:
return [
name,
(parseDefinitionsPasswordOauthFlowAdditionalProperties(value, configuration) ??
parsePasswordOauthFlowX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow}
*/
export function parseClientCredentialsFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "tokenUrl":
return [
name,
parseClientCredentialsFlowTokenUrl(value, configuration),
]
case "refreshUrl":
return [
name,
parseClientCredentialsFlowRefreshUrl(value, configuration),
]
case "scopes":
return [
name,
parseClientCredentialsFlowScopes(value, configuration),
]
default:
return [
name,
(parseDefinitionsClientCredentialsFlowAdditionalProperties(value, configuration) ??
parseClientCredentialsFlowX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow}
*/
export function parseAuthorizationCodeOauthFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "authorizationUrl":
return [
name,
parseAuthorizationCodeOauthFlowAuthorizationUrl(value, configuration),
]
case "tokenUrl":
return [
name,
parseAuthorizationCodeOauthFlowTokenUrl(value, configuration),
]
case "refreshUrl":
return [
name,
parseAuthorizationCodeOauthFlowRefreshUrl(value, configuration),
]
case "scopes":
return [
name,
parseAuthorizationCodeOauthFlowScopes(value, configuration),
]
default:
return [
name,
(parseDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value, configuration) ??
parseAuthorizationCodeOauthFlowX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link}
*/
export function parseLink(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "operationId":
return [
name,
parseLinkOperationId(value, configuration),
]
case "operationRef":
return [
name,
parseOperationRef(value, configuration),
]
case "parameters":
return [
name,
parseLinkParameters(value, configuration),
]
case "requestBody":
return [
name,
parseLinkRequestBody(value, configuration),
]
case "description":
return [
name,
parseLinkDescription(value, configuration),
]
case "server":
return [
name,
parseLinkServer(value, configuration),
]
default:
return [
name,
(parseDefinitionsLinkAdditionalProperties(value, configuration) ??
parseLinkX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback}
*/
export function parseCallback(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseCallbackAdditionalProperties(value, configuration) ??
parseCallbackX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding}
*/
export function parseDefinitionsEncoding(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "contentType":
return [
name,
parseContentType(value, configuration),
]
case "headers":
return [
name,
parseEncodingHeaders(value, configuration),
]
case "style":
return [
name,
parseEncodingStyle(value, configuration),
]
case "explode":
return [
name,
parseEncodingExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseEncodingAllowReserved(value, configuration),
]
default:
return [
name,
(parseDefinitionsEncodingAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/openapi}
*/
export function parseOpenapi(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/info}
*/
export function parsePropertiesInfo(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsInfo(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/externalDocs}
*/
export function parsePropertiesExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExternalDocumentation(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/servers}
*/
export function parsePropertiesServers(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePropertiesServersItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security}
*/
export function parsePropertiesSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePropertiesSecurityItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/tags}
*/
export function parsePropertiesTags(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePropertiesTagsItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/paths}
*/
export function parsePropertiesPaths(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPaths(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/components}
*/
export function parsePropertiesComponents(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsComponents(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/additionalProperties}
*/
export function parseAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/patternProperties/^x-}
*/
export function parsePatternPropertiesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Reference/patternProperties/^\$ref$}
*/
export function parseReferenceRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/title}
*/
export function parseInfoTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/description}
*/
export function parseInfoDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/termsOfService}
*/
export function parseTermsOfService(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/contact}
*/
export function parseInfoContact(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsContact(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/license}
*/
export function parseInfoLicense(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsLicense(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/version}
*/
export function parseVersion(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/additionalProperties}
*/
export function parseInfoAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/patternProperties/^x-}
*/
export function parseInfoX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/name}
*/
export function parseContactName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/url}
*/
export function parseContactUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/email}
*/
export function parseEmail(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/additionalProperties}
*/
export function parseContactAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/patternProperties/^x-}
*/
export function parseContactX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/properties/name}
*/
export function parseLicenseName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/properties/url}
*/
export function parseLicenseUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/additionalProperties}
*/
export function parseLicenseAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/patternProperties/^x-}
*/
export function parseLicenseX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/url}
*/
export function parseServerUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/description}
*/
export function parseServerDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/variables}
*/
export function parseVariables(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseVariablesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/additionalProperties}
*/
export function parseServerAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/patternProperties/^x-}
*/
export function parseServerX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum}
*/
export function parseServerVariableEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseServerVariableEnumItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/default}
*/
export function parseServerVariableDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/description}
*/
export function parseServerVariableDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/additionalProperties}
*/
export function parseServerVariableAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/patternProperties/^x-}
*/
export function parseServerVariableX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas}
*/
export function parseSchemas(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseSchemasAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses}
*/
export function parseComponentsResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseResponsesAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters}
*/
export function parseComponentsParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseParametersAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples}
*/
export function parseComponentsExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseExamplesAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies}
*/
export function parseRequestBodies(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseRequestBodiesAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers}
*/
export function parseComponentsHeaders(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeadersAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes}
*/
export function parseSecuritySchemes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseSecuritySchemesAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links}
*/
export function parseComponentsLinks(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseLinksAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks}
*/
export function parseComponentsCallbacks(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseCallbacksAZAZ09(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/additionalProperties}
*/
export function parseComponentsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/patternProperties/^x-}
*/
export function parseComponentsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/title}
*/
export function parseSchemaTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/multipleOf}
*/
export function parseMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maximum}
*/
export function parseMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMaximum}
*/
export function parseExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minimum}
*/
export function parseMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMinimum}
*/
export function parseExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxLength}
*/
export function parseMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minLength}
*/
export function parseMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/pattern}
*/
export function parsePattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxItems}
*/
export function parseMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minItems}
*/
export function parseMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/uniqueItems}
*/
export function parseUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxProperties}
*/
export function parseMaxProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minProperties}
*/
export function parseMinProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required}
*/
export function parseSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseRequiredItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/enum}
*/
export function parseSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseSchemaEnumItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/type}
*/
export function parseSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not}
*/
export function parseSchemaNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseNot0(value, configuration)
??
parseNot1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf}
*/
export function parseAllOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseAllOfItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf}
*/
export function parseOneOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseOneOfSchemaItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf}
*/
export function parseAnyOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseAnyOfItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items}
*/
export function parsePropertiesSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseItems0(value, configuration)
??
parseItems1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties}
*/
export function parseProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parsePropertiesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties}
*/
export function parsePropertiesSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSchema0(value, configuration)
??
parseSchema1(value, configuration)
??
parseSchema2(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/description}
*/
export function parseSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/format}
*/
export function parseFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/default}
*/
export function parseSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/nullable}
*/
export function parseNullable(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/discriminator}
*/
export function parseSchemaDiscriminator(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDiscriminator(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/readOnly}
*/
export function parseReadOnly(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/writeOnly}
*/
export function parseWriteOnly(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/example}
*/
export function parseSchemaExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/externalDocs}
*/
export function parseSchemaExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExternalDocumentation(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/deprecated}
*/
export function parseSchemaDeprecated(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/xml}
*/
export function parseSchemaXml(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsXml(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/additionalProperties}
*/
export function parseDefinitionsSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/patternProperties/^x-}
*/
export function parseSchemaPatternPropertiesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/propertyName}
*/
export function parsePropertyName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping}
*/
export function parseMapping(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseMappingAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/name}
*/
export function parseXmlName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/namespace}
*/
export function parseNamespace(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/prefix}
*/
export function parsePrefix(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/attribute}
*/
export function parseAttribute(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/wrapped}
*/
export function parseWrapped(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/additionalProperties}
*/
export function parseXmlAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/patternProperties/^x-}
*/
export function parseXmlX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/description}
*/
export function parseResponseDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers}
*/
export function parseResponseHeaders(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeadersAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/content}
*/
export function parseResponseContent(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseResponseContentAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links}
*/
export function parseResponseLinks(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseLinksAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/additionalProperties}
*/
export function parseResponseAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/patternProperties/^x-}
*/
export function parseResponseX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema}
*/
export function parseMediaTypeSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSchemaMediaType0(value, configuration)
??
parseSchemaMediaType1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/example}
*/
export function parseMediaTypeExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples}
*/
export function parseMediaTypeExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseExamplesMediaTypeAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/encoding}
*/
export function parseMediaTypeEncoding(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseMediaTypeEncodingAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/additionalProperties}
*/
export function parseDefinitionsMediaTypeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/patternProperties/^x-}
*/
export function parseMediaTypeX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/allOf/0}
*/
export function parseAllOfMediaType0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExampleXorExamples(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/summary}
*/
export function parseExampleSummary(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/description}
*/
export function parseExampleDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/value}
*/
export function parseValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/externalValue}
*/
export function parseExternalValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/additionalProperties}
*/
export function parseExampleAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/patternProperties/^x-}
*/
export function parseExampleX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/description}
*/
export function parseHeaderDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/required}
*/
export function parseHeaderRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/deprecated}
*/
export function parseHeaderDeprecated(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowEmptyValue}
*/
export function parseHeaderAllowEmptyValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/style}
*/
export function parseHeaderStyle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/explode}
*/
export function parseHeaderExplode(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowReserved}
*/
export function parseHeaderAllowReserved(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema}
*/
export function parseHeaderSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseHeader0(value, configuration)
??
parseHeader1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/content}
*/
export function parseHeaderContent(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeaderContentAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/example}
*/
export function parseHeaderExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples}
*/
export function parseHeaderExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeaderExamplesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/additionalProperties}
*/
export function parseHeaderAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/patternProperties/^x-}
*/
export function parseHeaderX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/allOf/0}
*/
export function parseHeaderAllOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExampleXorExamples(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/allOf/1}
*/
export function parseHeaderAllOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSchemaXorContent(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/additionalProperties}
*/
export function parsePathsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/patternProperties/^\/}
*/
export function parsePatternProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePathItem(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/patternProperties/^x-}
*/
export function parsePathsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/$ref}
*/
export function parsePathItemRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/summary}
*/
export function parsePathItemSummary(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/description}
*/
export function parsePathItemDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/servers}
*/
export function parsePathItemServers(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePathItemServersItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters}
*/
export function parsePathItemParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePathItemItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/additionalProperties}
*/
export function parsePathItemAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/patternProperties/^(get|put|post|delete|options|head|patch|trace)$}
*/
export function parseGetPutPostDeleteOptionsHeadPatchTrace(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/patternProperties/^x-}
*/
export function parsePathItemX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags}
*/
export function parseOperationTags(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseOperationTagsItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/summary}
*/
export function parseOperationSummary(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/description}
*/
export function parseOperationDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/externalDocs}
*/
export function parseOperationExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExternalDocumentation(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/operationId}
*/
export function parseOperationOperationId(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters}
*/
export function parseOperationParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseParametersItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody}
*/
export function parseOperationRequestBody(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseRequestBody0(value, configuration)
??
parseRequestBody1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/responses}
*/
export function parseOperationResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsResponses(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks}
*/
export function parseOperationCallbacks(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseCallbacksAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/deprecated}
*/
export function parseOperationDeprecated(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security}
*/
export function parseOperationSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseOperationSecurityItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/servers}
*/
export function parseOperationServers(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseOperationServersItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/additionalProperties}
*/
export function parseOperationAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/patternProperties/^x-}
*/
export function parseOperationX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default}
*/
export function parseResponsesDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseDefault0(value, configuration)
??
parseDefault1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/additionalProperties}
*/
export function parseResponsesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$}
*/
export function parseResponses15D2Xx(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseResponses15D2Xx0(value, configuration)
??
parseResponses15D2Xx1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^x-}
*/
export function parseResponsesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties}
*/
export function parseSecurityRequirementAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseSecurityRequirementItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/name}
*/
export function parseTagName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/description}
*/
export function parseTagDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/externalDocs}
*/
export function parseTagExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExternalDocumentation(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/additionalProperties}
*/
export function parseTagAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/patternProperties/^x-}
*/
export function parseTagX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/properties/description}
*/
export function parseExternalDocumentationDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/properties/url}
*/
export function parseExternalDocumentationUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/additionalProperties}
*/
export function parseExternalDocumentationAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/patternProperties/^x-}
*/
export function parseExternalDocumentationX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExampleXORExamples/not}
*/
export function parseExampleXorExamplesNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/0}
*/
export function parseOneOfSchemaXorContent0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Some properties are not allowed if content is present
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1}
*/
export function parseOneOfSchemaXorContent1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/not}
*/
export function parseDefinitionsSchemaXorContentNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/name}
*/
export function parseParameterName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/in}
*/
export function parseParameterIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/description}
*/
export function parseParameterDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/required}
*/
export function parseParameterRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/deprecated}
*/
export function parseParameterDeprecated(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowEmptyValue}
*/
export function parseParameterAllowEmptyValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/style}
*/
export function parseParameterStyle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/explode}
*/
export function parseParameterExplode(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowReserved}
*/
export function parseParameterAllowReserved(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema}
*/
export function parseParameterSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseParameter0(value, configuration)
??
parseParameter1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/content}
*/
export function parseParameterContent(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseParameterContentAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/example}
*/
export function parseParameterExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples}
*/
export function parseParameterExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseParameterExamplesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/additionalProperties}
*/
export function parseParameterAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/patternProperties/^x-}
*/
export function parseParameterX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/0}
*/
export function parseParameterAllOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseExampleXorExamples(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/1}
*/
export function parseParameterAllOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSchemaXorContent(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/2}
*/
export function parseAllOf2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameterLocation(value, configuration));
}
/**
* @description Parameter in path
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0}
*/
export function parseParameterLocation0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Parameter in query
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1}
*/
export function parseParameterLocation1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Parameter in header
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2}
*/
export function parseParameterLocation2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Parameter in cookie
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3}
*/
export function parseParameterLocation3(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/description}
*/
export function parseRequestBodyDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/content}
*/
export function parseRequestBodyContent(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseRequestBodyContentAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/required}
*/
export function parseRequestBodyRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/additionalProperties}
*/
export function parseRequestBodyAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/patternProperties/^x-}
*/
export function parseRequestBodyX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/0}
*/
export function parseSecurityScheme0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseApiKeySecurityScheme(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/1}
*/
export function parseSecurityScheme1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHttpSecurityScheme(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/2}
*/
export function parseSecurityScheme2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2SecurityScheme(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/3}
*/
export function parseSecurityScheme3(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOpenIdConnectSecurityScheme(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/type}
*/
export function parseApiKeySecuritySchemeType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/name}
*/
export function parseApiKeySecuritySchemeName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/in}
*/
export function parseApiKeySecuritySchemeIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/description}
*/
export function parseApiKeySecuritySchemeDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/additionalProperties}
*/
export function parseApiKeySecuritySchemeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/patternProperties/^x-}
*/
export function parseApiKeySecuritySchemeX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/scheme}
*/
export function parsePropertiesHttpSecuritySchemeScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/bearerFormat}
*/
export function parseBearerFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/description}
*/
export function parseHttpSecuritySchemeDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/type}
*/
export function parseHttpSecuritySchemeType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/additionalProperties}
*/
export function parseHttpSecuritySchemeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/patternProperties/^x-}
*/
export function parseHttpSecuritySchemeX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Bearer
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/0}
*/
export function parseHttpSecurityScheme0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Non Bearer
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1}
*/
export function parseHttpSecurityScheme1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/type}
*/
export function parseOauth2SecuritySchemeType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/flows}
*/
export function parseFlows(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauthFlows(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/description}
*/
export function parseOauth2SecuritySchemeDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/additionalProperties}
*/
export function parseOauth2SecuritySchemeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/patternProperties/^x-}
*/
export function parseOauth2SecuritySchemeX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/type}
*/
export function parseOpenIdConnectSecuritySchemeType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/openIdConnectUrl}
*/
export function parseOpenIdConnectUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/description}
*/
export function parseOpenIdConnectSecuritySchemeDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/additionalProperties}
*/
export function parseOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/patternProperties/^x-}
*/
export function parseOpenIdConnectSecuritySchemeX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/implicit}
*/
export function parseImplicit(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseImplicitOauthFlow(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/password}
*/
export function parsePassword(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePasswordOauthFlow(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/clientCredentials}
*/
export function parseClientCredentials(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseClientCredentialsFlow(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/authorizationCode}
*/
export function parseAuthorizationCode(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseAuthorizationCodeOauthFlow(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/additionalProperties}
*/
export function parseOauthFlowsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/patternProperties/^x-}
*/
export function parseOauthFlowsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/authorizationUrl}
*/
export function parseImplicitOauthFlowAuthorizationUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/refreshUrl}
*/
export function parseImplicitOauthFlowRefreshUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes}
*/
export function parseImplicitOauthFlowScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseScopesImplicitOauthFlowAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/additionalProperties}
*/
export function parseDefinitionsImplicitOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/patternProperties/^x-}
*/
export function parseImplicitOauthFlowX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/tokenUrl}
*/
export function parsePasswordOauthFlowTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/refreshUrl}
*/
export function parsePasswordOauthFlowRefreshUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes}
*/
export function parsePasswordOauthFlowScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseScopesPasswordOauthFlowAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/additionalProperties}
*/
export function parseDefinitionsPasswordOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/patternProperties/^x-}
*/
export function parsePasswordOauthFlowX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/tokenUrl}
*/
export function parseClientCredentialsFlowTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/refreshUrl}
*/
export function parseClientCredentialsFlowRefreshUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes}
*/
export function parseClientCredentialsFlowScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseScopesClientCredentialsFlowAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/additionalProperties}
*/
export function parseDefinitionsClientCredentialsFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/patternProperties/^x-}
*/
export function parseClientCredentialsFlowX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/authorizationUrl}
*/
export function parseAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/tokenUrl}
*/
export function parseAuthorizationCodeOauthFlowTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/refreshUrl}
*/
export function parseAuthorizationCodeOauthFlowRefreshUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes}
*/
export function parseAuthorizationCodeOauthFlowScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseScopesAuthorizationCodeOauthFlowAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/additionalProperties}
*/
export function parseDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/patternProperties/^x-}
*/
export function parseAuthorizationCodeOauthFlowX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/operationId}
*/
export function parseLinkOperationId(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/operationRef}
*/
export function parseOperationRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/parameters}
*/
export function parseLinkParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseParametersLinkAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/requestBody}
*/
export function parseLinkRequestBody(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/description}
*/
export function parseLinkDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/server}
*/
export function parseLinkServer(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsServer(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/additionalProperties}
*/
export function parseDefinitionsLinkAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/patternProperties/^x-}
*/
export function parseLinkX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description Operation Id and Operation Ref are mutually exclusive
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/not}
*/
export function parseLinkNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "operationId":
return [
name,
parseLinkOperationId(value, configuration),
]
case "operationRef":
return [
name,
parseOperationRef(value, configuration),
]
case "parameters":
return [
name,
parseLinkParameters(value, configuration),
]
case "requestBody":
return [
name,
parseLinkRequestBody(value, configuration),
]
case "description":
return [
name,
parseLinkDescription(value, configuration),
]
case "server":
return [
name,
parseLinkServer(value, configuration),
]
default:
return [
name,
(parseDefinitionsLinkAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback/additionalProperties}
*/
export function parseCallbackAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePathItem(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback/patternProperties/^x-}
*/
export function parseCallbackX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/contentType}
*/
export function parseContentType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers}
*/
export function parseEncodingHeaders(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeadersEncodingAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/style}
*/
export function parseEncodingStyle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/explode}
*/
export function parseEncodingExplode(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/allowReserved}
*/
export function parseEncodingAllowReserved(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/additionalProperties}
*/
export function parseDefinitionsEncodingAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/servers/items}
*/
export function parsePropertiesServersItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsServer(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security/items}
*/
export function parsePropertiesSecurityItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSecurityRequirement(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/tags/items}
*/
export function parsePropertiesTagsItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseTag(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/variables/additionalProperties}
*/
export function parseVariablesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseServerVariable(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum/items}
*/
export function parseServerVariableEnumItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseSchemasAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSchemas0(value, configuration)
??
parseSchemas1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseResponsesAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseResponses0(value, configuration)
??
parseResponses1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseParametersAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAZAZ09Parameters0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
(
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseExamplesAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAZAZ09Examples0(value, configuration)
??
parseAZAZ09Examples1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseRequestBodiesAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseRequestBodies0(value, configuration)
??
parseRequestBodies1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseHeadersAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAZAZ09Headers0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseSecuritySchemesAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSecuritySchemes0(value, configuration)
??
parseSecurityScheme0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "scheme":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "bearerFormat":
return [
name,
parseBearerFormat(value, configuration),
]
case "description":
return [
name,
parseHttpSecuritySchemeDescription(value, configuration),
]
case "type":
return [
name,
parseHttpSecuritySchemeType(value, configuration),
]
default:
return [
name,
(parseHttpSecuritySchemeAdditionalProperties(value, configuration) ??
parseHttpSecuritySchemeX(value, configuration)),
]
}
})
) :
undefined
)
??
parseSecurityScheme2(value, configuration)
??
parseSecurityScheme3(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseLinksAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAZAZ09Links0(value, configuration)
??
parseAZAZ09Links1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function parseCallbacksAZAZ09(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAZAZ09Callbacks0(value, configuration)
??
parseAZAZ09Callbacks1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required/items}
*/
export function parseRequiredItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/enum/items}
*/
export function parseSchemaEnumItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not/oneOf/0}
*/
export function parseNot0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not/oneOf/1}
*/
export function parseNot1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items}
*/
export function parseAllOfItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseItemsAllOf0(value, configuration)
??
parseItemsAllOf1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items}
*/
export function parseOneOfSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseOneOf0(value, configuration)
??
parseOneOf1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items}
*/
export function parseAnyOfItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAnyOf0(value, configuration)
??
parseAnyOf1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items/oneOf/0}
*/
export function parseItems0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items/oneOf/1}
*/
export function parseItems1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties}
*/
export function parsePropertiesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseProperties0(value, configuration)
??
parseProperties1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/0}
*/
export function parseSchema0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/1}
*/
export function parseSchema1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/2}
*/
export function parseSchema2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping/additionalProperties}
*/
export function parseMappingAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties}
*/
export function parseHeadersAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
parseResponseHeaders1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/content/additionalProperties}
*/
export function parseResponseContentAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseMediaType(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties}
*/
export function parseLinksAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseResponseLinks0(value, configuration)
??
parseResponseLinks1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema/oneOf/0}
*/
export function parseSchemaMediaType0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema/oneOf/1}
*/
export function parseSchemaMediaType1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties}
*/
export function parseExamplesMediaTypeAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseExamplesMediaType0(value, configuration)
??
parseExamplesMediaType1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/encoding/additionalProperties}
*/
export function parseMediaTypeEncodingAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEncoding(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema/oneOf/0}
*/
export function parseHeader0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema/oneOf/1}
*/
export function parseHeader1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/content/additionalProperties}
*/
export function parseHeaderContentAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseMediaType(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties}
*/
export function parseHeaderExamplesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseHeaderExamples0(value, configuration)
??
parseHeaderExamples1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/servers/items}
*/
export function parsePathItemServersItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsServer(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items}
*/
export function parsePathItemItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
(
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
parsePathItem1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags/items}
*/
export function parseOperationTagsItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items}
*/
export function parseParametersItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
parseParameterIn(value, configuration),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseParameterStyle(value, configuration),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
(
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseParameterName(value, configuration),
]
case "in":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "description":
return [
name,
parseParameterDescription(value, configuration),
]
case "required":
return [
name,
parseParameterRequired(value, configuration),
]
case "deprecated":
return [
name,
parseParameterDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseParameterAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
(
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
),
]
case "explode":
return [
name,
parseParameterExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseParameterAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseParameterSchema(value, configuration),
]
case "content":
return [
name,
parseParameterContent(value, configuration),
]
case "example":
return [
name,
parseParameterExample(value, configuration),
]
case "examples":
return [
name,
parseParameterExamples(value, configuration),
]
default:
return [
name,
(parseParameterAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
parseOperationParameters1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody/oneOf/0}
*/
export function parseRequestBody0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsRequestBody(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody/oneOf/1}
*/
export function parseRequestBody1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties}
*/
export function parseCallbacksAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseOperationCallbacks0(value, configuration)
??
parseOperationCallbacks1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security/items}
*/
export function parseOperationSecurityItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSecurityRequirement(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/servers/items}
*/
export function parseOperationServersItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsServer(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default/oneOf/0}
*/
export function parseDefault0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponse(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default/oneOf/1}
*/
export function parseDefault1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$/oneOf/0}
*/
export function parseResponses15D2Xx0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponse(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$/oneOf/1}
*/
export function parseResponses15D2Xx1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties/items}
*/
export function parseSecurityRequirementItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/0}
*/
export function parseAllOfSchemaXorContent0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/1}
*/
export function parseAllOfSchemaXorContent1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/2}
*/
export function parseSchemaXorContent2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/3}
*/
export function parseSchemaXorContent3(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/4}
*/
export function parseSchemaXorContent4(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema/oneOf/0}
*/
export function parseParameter0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema/oneOf/1}
*/
export function parseParameter1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/content/additionalProperties}
*/
export function parseParameterContentAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseMediaType(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties}
*/
export function parseParameterExamplesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseParameterExamples0(value, configuration)
??
parseParameterExamples1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/in}
*/
export function parseOneOf0ParameterLocationIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/style}
*/
export function parseOneOf0ParameterLocationStyle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/required}
*/
export function parseParameterLocationRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1/properties/in}
*/
export function parseOneOf1ParameterLocationIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1/properties/style}
*/
export function parseOneOf1ParameterLocationStyle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2/properties/in}
*/
export function parseParameterLocation2In(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2/properties/style}
*/
export function parseParameterLocation2Style(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3/properties/in}
*/
export function parseParameterLocation3In(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3/properties/style}
*/
export function parseParameterLocation3Style(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/content/additionalProperties}
*/
export function parseRequestBodyContentAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseMediaType(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/0/properties/scheme}
*/
export function parseOneOf0HttpSecuritySchemeScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/properties/scheme}
*/
export function parseOneOf1HttpSecuritySchemeScheme(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/not}
*/
export function parseHttpSecuritySchemeNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes/additionalProperties}
*/
export function parseScopesImplicitOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes/additionalProperties}
*/
export function parseScopesPasswordOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes/additionalProperties}
*/
export function parseScopesClientCredentialsFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes/additionalProperties}
*/
export function parseScopesAuthorizationCodeOauthFlowAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/parameters/additionalProperties}
*/
export function parseParametersLinkAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties}
*/
export function parseHeadersEncodingAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
case "required":
return [
name,
parseHeaderRequired(value, configuration),
]
case "deprecated":
return [
name,
parseHeaderDeprecated(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseHeaderAllowEmptyValue(value, configuration),
]
case "style":
return [
name,
parseHeaderStyle(value, configuration),
]
case "explode":
return [
name,
parseHeaderExplode(value, configuration),
]
case "allowReserved":
return [
name,
parseHeaderAllowReserved(value, configuration),
]
case "schema":
return [
name,
parseHeaderSchema(value, configuration),
]
case "content":
return [
name,
parseHeaderContent(value, configuration),
]
case "example":
return [
name,
parseHeaderExample(value, configuration),
]
case "examples":
return [
name,
parseHeaderExamples(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
parseEncoding1(value, configuration)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseSchemas0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseSchemas1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseResponses0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseResponses1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponse(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseAZAZ09Parameters0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseAZAZ09Parameters1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameter(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseAZAZ09Examples0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseAZAZ09Examples1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExample(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseRequestBodies0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseRequestBodies1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsRequestBody(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseAZAZ09Headers0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseAZAZ09Headers1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHeader(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseSecuritySchemes0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseSecuritySchemes1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSecurityScheme(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseAZAZ09Links0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseAZAZ09Links1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseLink(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function parseAZAZ09Callbacks0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function parseAZAZ09Callbacks1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseCallback(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items/oneOf/0}
*/
export function parseItemsAllOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items/oneOf/1}
*/
export function parseItemsAllOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items/oneOf/0}
*/
export function parseOneOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items/oneOf/1}
*/
export function parseOneOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items/oneOf/0}
*/
export function parseAnyOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items/oneOf/1}
*/
export function parseAnyOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties/oneOf/0}
*/
export function parseProperties0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties/oneOf/1}
*/
export function parseProperties1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties/oneOf/0}
*/
export function parseResponseHeaders0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHeader(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties/oneOf/1}
*/
export function parseResponseHeaders1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties/oneOf/0}
*/
export function parseResponseLinks0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseLink(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties/oneOf/1}
*/
export function parseResponseLinks1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties/oneOf/0}
*/
export function parseExamplesMediaType0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExample(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties/oneOf/1}
*/
export function parseExamplesMediaType1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties/oneOf/0}
*/
export function parseHeaderExamples0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExample(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties/oneOf/1}
*/
export function parseHeaderExamples1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items/oneOf/0}
*/
export function parsePathItem0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameter(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items/oneOf/1}
*/
export function parsePathItem1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items/oneOf/0}
*/
export function parseOperationParameters0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameter(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items/oneOf/1}
*/
export function parseOperationParameters1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties/oneOf/0}
*/
export function parseOperationCallbacks0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseCallback(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties/oneOf/1}
*/
export function parseOperationCallbacks1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/0/not}
*/
export function parseAllOfSchemaXorContentNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/1/not}
*/
export function parseSchemaXorContent1Not(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/2/not}
*/
export function parseSchemaXorContent2Not(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/3/not}
*/
export function parseSchemaXorContent3Not(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/4/not}
*/
export function parseSchemaXorContent4Not(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties/oneOf/0}
*/
export function parseParameterExamples0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExample(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties/oneOf/1}
*/
export function parseParameterExamples1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/properties/scheme/not}
*/
export function parseSchemeNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties/oneOf/0}
*/
export function parseEncoding0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHeader(value, configuration));
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties/oneOf/1}
*/
export function parseEncoding1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseReference(value, configuration));
}
