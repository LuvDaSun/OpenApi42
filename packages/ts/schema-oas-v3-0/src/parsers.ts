// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.8.9                          -- www.JsonSchema42.org
export function parseSchema20210928(value: unknown): unknown {
return _parseMapSchema20210928(value);
}
function _parseMapSchema20210928(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "openapi": {
const propertyValue = parseOpenapi(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "info": {
const propertyValue = parsePropertiesInfo(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchema20210928ExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parseSchema20210928Servers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseSchema20210928Security(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tags": {
const propertyValue = parseSchema20210928Tags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "paths": {
const propertyValue = parsePropertiesPaths(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "components": {
const propertyValue = parsePropertiesComponents(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseSchema20210928AdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseReference(value: unknown): unknown {
return _parseMapReference(value);
}
function _parseMapReference(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseDefinitionsInfo(value: unknown): unknown {
return _parseMapDefinitionsInfo(value);
}
function _parseMapDefinitionsInfo(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseInfoTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseInfoDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "termsOfService": {
const propertyValue = parseTermsOfService(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "contact": {
const propertyValue = parsePropertiesContact(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "license": {
const propertyValue = parsePropertiesLicense(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "version": {
const propertyValue = parseVersion(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseInfoAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsContact(value: unknown): unknown {
return _parseMapDefinitionsContact(value);
}
function _parseMapDefinitionsContact(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseContactName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseContactUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "email": {
const propertyValue = parseEmail(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseContactAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsLicense(value: unknown): unknown {
return _parseMapDefinitionsLicense(value);
}
function _parseMapDefinitionsLicense(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseLicenseName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseLicenseUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseLicenseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsServer(value: unknown): unknown {
return _parseMapDefinitionsServer(value);
}
function _parseMapDefinitionsServer(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "url": {
const propertyValue = parseServerUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseServerDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "variables": {
const propertyValue = parseVariables(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseServerAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseServerVariable(value: unknown): unknown {
return _parseMapServerVariable(value);
}
function _parseMapServerVariable(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "enum": {
const propertyValue = parseServerVariableEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseServerVariableDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseServerVariableDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseServerVariableAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsComponents(value: unknown): unknown {
return _parseMapDefinitionsComponents(value);
}
function _parseMapDefinitionsComponents(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "schemas": {
const propertyValue = parseSchemas(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseComponentsPropertiesResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseComponentsParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseComponentsExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBodies": {
const propertyValue = parseRequestBodies(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseComponentsHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "securitySchemes": {
const propertyValue = parseSecuritySchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "links": {
const propertyValue = parseComponentsLinks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "callbacks": {
const propertyValue = parseComponentsCallbacks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseComponentsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSchema(value: unknown): unknown {
return _parseMapDefinitionsSchema(value);
}
function _parseMapDefinitionsSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseSchemaTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxProperties": {
const propertyValue = parseMaxProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minProperties": {
const propertyValue = parseMinProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "not": {
const propertyValue = parsePropertiesNot(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allOf": {
const propertyValue = parseAllOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "oneOf": {
const propertyValue = parseOneOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "anyOf": {
const propertyValue = parseAnyOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "properties": {
const propertyValue = parseProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "additionalProperties": {
const propertyValue = parseSchemaPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "nullable": {
const propertyValue = parseNullable(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "discriminator": {
const propertyValue = parsePropertiesDiscriminator(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "writeOnly": {
const propertyValue = parseWriteOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseSchemaPropertiesExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchemaExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseSchemaDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "xml": {
const propertyValue = parsePropertiesXml(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsDiscriminator(value: unknown): unknown {
return _parseMapDefinitionsDiscriminator(value);
}
function _parseMapDefinitionsDiscriminator(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "propertyName": {
const propertyValue = parsePropertyName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "mapping": {
const propertyValue = parseMapping(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseDefinitionsXml(value: unknown): unknown {
return _parseMapDefinitionsXml(value);
}
function _parseMapDefinitionsXml(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseXmlName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "namespace": {
const propertyValue = parseNamespace(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "prefix": {
const propertyValue = parsePrefix(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "attribute": {
const propertyValue = parseAttribute(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "wrapped": {
const propertyValue = parseWrapped(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseXmlAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponse(value: unknown): unknown {
return _parseMapResponse(value);
}
function _parseMapResponse(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseResponseDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseResponseHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseResponseContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "links": {
const propertyValue = parseResponseLinks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaType(value: unknown): unknown {
return _parseMapMediaType(value) ?? _parseAllOfMediaType(value);
}
function _parseMapMediaType(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "schema": {
const propertyValue = parseMediaTypePropertiesSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseMediaTypePropertiesExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseMediaTypeExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "encoding": {
const propertyValue = parsePropertiesEncoding(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseMediaTypeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfMediaType(value: unknown): unknown {
return parseMediaTypeAllOf0(value);
}
export function parseDefinitionsExample(value: unknown): unknown {
return _parseMapDefinitionsExample(value);
}
function _parseMapDefinitionsExample(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "summary": {
const propertyValue = parseExampleSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseExampleDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "value": {
const propertyValue = parseValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalValue": {
const propertyValue = parseExternalValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExampleAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeader(value: unknown): unknown {
return _parseMapHeader(value) ?? _parseAllOfHeader(value);
}
function _parseMapHeader(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseHeaderDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseHeaderRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseHeaderDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseHeaderAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseHeaderStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseHeaderExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseHeaderAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseHeaderPropertiesSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseHeaderContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseHeaderPropertiesExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseHeaderExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfHeader(value: unknown): unknown {
return parseHeaderAllOf0(value) ?? parseHeaderAllOf1(value);
}
export function parseDefinitionsPaths(value: unknown): unknown {
return _parseMapDefinitionsPaths(value);
}
function _parseMapDefinitionsPaths(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePathsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathItem(value: unknown): unknown {
return _parseMapPathItem(value);
}
function _parseMapPathItem(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parsePropertiesRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parsePathItemSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parsePathItemDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parsePathItemServers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parsePathItemParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathItemAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOperation(value: unknown): unknown {
return _parseMapOperation(value);
}
function _parseMapOperation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tags": {
const propertyValue = parseOperationTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parseOperationSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOperationDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseOperationExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationId": {
const propertyValue = parseOperationOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseOperationParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBody": {
const propertyValue = parseOperationPropertiesRequestBody(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseOperationPropertiesResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "callbacks": {
const propertyValue = parseOperationCallbacks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseOperationDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseOperationSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parseOperationServers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOperationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsResponses(value: unknown): unknown {
return _parseMapDefinitionsResponses(value);
}
function _parseMapDefinitionsResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "default": {
const propertyValue = parseResponsesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponsesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSecurityRequirement(value: unknown): unknown {
return _parseMapSecurityRequirement(value);
}
function _parseMapSecurityRequirement(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityRequirementAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseTag(value: unknown): unknown {
return _parseMapTag(value);
}
function _parseMapTag(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseTagName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseTagDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseTagExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseTagAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseExternalDocumentation(value: unknown): unknown {
return _parseMapExternalDocumentation(value);
}
function _parseMapExternalDocumentation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseExternalDocumentationDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseExternalDocumentationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExternalDocumentationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseExampleXorExamples(value: unknown): unknown {
return _parseNotExampleXorExamples(value);
}
function _parseNotExampleXorExamples(value: unknown): unknown {
return parseExampleXorExamplesNot(value);
}
export function parseSchemaXorContent(value: unknown): unknown {
return _parseOneOfSchemaXorContent(value) ?? _parseNotSchemaXorContent(value);
}
function _parseOneOfSchemaXorContent(value: unknown): unknown {
return parseSchemaXorContentOneOf0(value) ?? parseSchemaXorContentOneOf1(value);
}
function _parseNotSchemaXorContent(value: unknown): unknown {
return parseSchemaXorContentNot(value);
}
export function parseParameter(value: unknown): unknown {
return _parseMapParameter(value) ?? _parseAllOfParameter(value);
}
function _parseMapParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseParameterName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseParameterIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseParameterDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseParameterRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseParameterDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseParameterAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseParameterStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseParameterExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseParameterAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseParameterPropertiesSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseParameterContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseParameterPropertiesExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseParameterExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseParameterAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfParameter(value: unknown): unknown {
return parseParameterAllOf0(value) ?? parseParameterAllOf1(value) ?? parseParameterAllOf2(value);
}
export function parseParameterLocation(value: unknown): unknown {
return _parseOneOfParameterLocation(value);
}
function _parseOneOfParameterLocation(value: unknown): unknown {
return parseParameterLocationOneOf0(value) ?? parseParameterLocationOneOf1(value) ?? parseParameterLocationOneOf2(value) ?? parseParameterLocationOneOf3(value);
}
export function parseDefinitionsRequestBody(value: unknown): unknown {
return _parseMapDefinitionsRequestBody(value);
}
function _parseMapDefinitionsRequestBody(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseRequestBodyDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseRequestBodyContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseRequestBodyRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseRequestBodyAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSecurityScheme(value: unknown): unknown {
return _parseOneOfSecurityScheme(value);
}
function _parseOneOfSecurityScheme(value: unknown): unknown {
return parseSecuritySchemeOneOf0(value) ?? parseSecuritySchemeOneOf1(value) ?? parseSecuritySchemeOneOf2(value) ?? parseSecuritySchemeOneOf3(value);
}
export function parseApiKeySecurityScheme(value: unknown): unknown {
return _parseMapApiKeySecurityScheme(value);
}
function _parseMapApiKeySecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseApiKeySecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseApiKeySecuritySchemeName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseApiKeySecuritySchemeIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseApiKeySecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseApiKeySecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHttpSecurityScheme(value: unknown): unknown {
return _parseMapHttpSecurityScheme(value) ?? _parseOneOfHttpSecurityScheme(value);
}
function _parseMapHttpSecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parseHttpSecuritySchemeScheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "bearerFormat": {
const propertyValue = parseBearerFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHttpSecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseHttpSecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHttpSecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseOneOfHttpSecurityScheme(value: unknown): unknown {
return parseHttpSecuritySchemeOneOf0(value) ?? parseHttpSecuritySchemeOneOf1(value);
}
export function parseOauth2SecurityScheme(value: unknown): unknown {
return _parseMapOauth2SecurityScheme(value);
}
function _parseMapOauth2SecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2SecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flows": {
const propertyValue = parseFlows(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2SecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2SecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOpenIdConnectSecurityScheme(value: unknown): unknown {
return _parseMapOpenIdConnectSecurityScheme(value);
}
function _parseMapOpenIdConnectSecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOpenIdConnectSecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "openIdConnectUrl": {
const propertyValue = parseOpenIdConnectUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOpenIdConnectSecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOpenIdConnectSecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauthFlows(value: unknown): unknown {
return _parseMapOauthFlows(value);
}
function _parseMapOauthFlows(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "implicit": {
const propertyValue = parseImplicit(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "password": {
const propertyValue = parsePassword(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "clientCredentials": {
const propertyValue = parseClientCredentials(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationCode": {
const propertyValue = parseAuthorizationCode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauthFlowsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseImplicitOauthFlow(value: unknown): unknown {
return _parseMapImplicitOauthFlow(value);
}
function _parseMapImplicitOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "authorizationUrl": {
const propertyValue = parseImplicitOauthFlowAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseImplicitOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseImplicitOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseImplicitOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePasswordOauthFlow(value: unknown): unknown {
return _parseMapPasswordOauthFlow(value);
}
function _parseMapPasswordOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tokenUrl": {
const propertyValue = parsePasswordOauthFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parsePasswordOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parsePasswordOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePasswordOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseClientCredentialsFlow(value: unknown): unknown {
return _parseMapClientCredentialsFlow(value);
}
function _parseMapClientCredentialsFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tokenUrl": {
const propertyValue = parseClientCredentialsFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseClientCredentialsFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseClientCredentialsFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseClientCredentialsFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseAuthorizationCodeOauthFlow(value: unknown): unknown {
return _parseMapAuthorizationCodeOauthFlow(value);
}
function _parseMapAuthorizationCodeOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "authorizationUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseAuthorizationCodeOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseAuthorizationCodeOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseLink(value: unknown): unknown {
return _parseMapLink(value) ?? _parseNotLink(value);
}
function _parseMapLink(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "operationId": {
const propertyValue = parseLinkOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationRef": {
const propertyValue = parseOperationRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseLinkParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBody": {
const propertyValue = parseLinkPropertiesRequestBody(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseLinkDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "server": {
const propertyValue = parsePropertiesServer(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseLinkAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseNotLink(value: unknown): unknown {
return parseLinkNot(value);
}
export function parseCallback(value: unknown): unknown {
return _parseMapCallback(value);
}
function _parseMapCallback(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseCallbackAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsEncoding(value: unknown): unknown {
return _parseMapDefinitionsEncoding(value);
}
function _parseMapDefinitionsEncoding(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "contentType": {
const propertyValue = parseContentType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseEncodingHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseEncodingStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseEncodingExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseEncodingAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsEncodingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOpenapi(value: unknown): unknown {
return _parseStringOpenapi(value);
}
function _parseStringOpenapi(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesInfo(value: unknown): unknown {
return _parseReferencePropertiesInfo(value);
}
function _parseReferencePropertiesInfo(value: unknown): unknown {
return parseDefinitionsInfo(value);
}
export function parseSchema20210928ExternalDocs(value: unknown): unknown {
return _parseReferenceSchema20210928ExternalDocs(value);
}
function _parseReferenceSchema20210928ExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseSchema20210928Servers(value: unknown): unknown {
return _parseArraySchema20210928Servers(value);
}
function _parseArraySchema20210928Servers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchema20210928ServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchema20210928Security(value: unknown): unknown {
return _parseArraySchema20210928Security(value);
}
function _parseArraySchema20210928Security(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchema20210928SecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchema20210928Tags(value: unknown): unknown {
return _parseArraySchema20210928Tags(value);
}
function _parseArraySchema20210928Tags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchema20210928TagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesPaths(value: unknown): unknown {
return _parseReferencePropertiesPaths(value);
}
function _parseReferencePropertiesPaths(value: unknown): unknown {
return parseDefinitionsPaths(value);
}
export function parsePropertiesComponents(value: unknown): unknown {
return _parseReferencePropertiesComponents(value);
}
function _parseReferencePropertiesComponents(value: unknown): unknown {
return parseDefinitionsComponents(value);
}
export function parseSchema20210928AdditionalProperties(value: unknown): unknown {
return _parseNeverSchema20210928AdditionalProperties(value);
}
function _parseNeverSchema20210928AdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchema20210928X(value: unknown): unknown {
return ;
}
export function parsePatternPropertiesRef(value: unknown): unknown {
return _parseStringPatternPropertiesRef(value);
}
function _parseStringPatternPropertiesRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoTitle(value: unknown): unknown {
return _parseStringInfoTitle(value);
}
function _parseStringInfoTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoDescription(value: unknown): unknown {
return _parseStringInfoDescription(value);
}
function _parseStringInfoDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTermsOfService(value: unknown): unknown {
return _parseStringTermsOfService(value);
}
function _parseStringTermsOfService(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesContact(value: unknown): unknown {
return _parseReferencePropertiesContact(value);
}
function _parseReferencePropertiesContact(value: unknown): unknown {
return parseDefinitionsContact(value);
}
export function parsePropertiesLicense(value: unknown): unknown {
return _parseReferencePropertiesLicense(value);
}
function _parseReferencePropertiesLicense(value: unknown): unknown {
return parseDefinitionsLicense(value);
}
export function parseVersion(value: unknown): unknown {
return _parseStringVersion(value);
}
function _parseStringVersion(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoAdditionalProperties(value: unknown): unknown {
return _parseNeverInfoAdditionalProperties(value);
}
function _parseNeverInfoAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseInfoX(value: unknown): unknown {
return ;
}
export function parseContactName(value: unknown): unknown {
return _parseStringContactName(value);
}
function _parseStringContactName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactUrl(value: unknown): unknown {
return _parseStringContactUrl(value);
}
function _parseStringContactUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEmail(value: unknown): unknown {
return _parseStringEmail(value);
}
function _parseStringEmail(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactAdditionalProperties(value: unknown): unknown {
return _parseNeverContactAdditionalProperties(value);
}
function _parseNeverContactAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseContactX(value: unknown): unknown {
return ;
}
export function parseLicenseName(value: unknown): unknown {
return _parseStringLicenseName(value);
}
function _parseStringLicenseName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseUrl(value: unknown): unknown {
return _parseStringLicenseUrl(value);
}
function _parseStringLicenseUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseAdditionalProperties(value: unknown): unknown {
return _parseNeverLicenseAdditionalProperties(value);
}
function _parseNeverLicenseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLicenseX(value: unknown): unknown {
return ;
}
export function parseServerUrl(value: unknown): unknown {
return _parseStringServerUrl(value);
}
function _parseStringServerUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerDescription(value: unknown): unknown {
return _parseStringServerDescription(value);
}
function _parseStringServerDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseVariables(value: unknown): unknown {
return _parseMapVariables(value);
}
function _parseMapVariables(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseVariablesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseServerAdditionalProperties(value: unknown): unknown {
return _parseNeverServerAdditionalProperties(value);
}
function _parseNeverServerAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseServerX(value: unknown): unknown {
return ;
}
export function parseServerVariableEnum(value: unknown): unknown {
return _parseArrayServerVariableEnum(value);
}
function _parseArrayServerVariableEnum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseServerVariableEnumItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseServerVariableDefault(value: unknown): unknown {
return _parseStringServerVariableDefault(value);
}
function _parseStringServerVariableDefault(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerVariableDescription(value: unknown): unknown {
return _parseStringServerVariableDescription(value);
}
function _parseStringServerVariableDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerVariableAdditionalProperties(value: unknown): unknown {
return _parseNeverServerVariableAdditionalProperties(value);
}
function _parseNeverServerVariableAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseServerVariableX(value: unknown): unknown {
return ;
}
export function parseSchemas(value: unknown): unknown {
return _parseMapSchemas(value);
}
function _parseMapSchemas(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsPropertiesResponses(value: unknown): unknown {
return _parseMapComponentsPropertiesResponses(value);
}
function _parseMapComponentsPropertiesResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsParameters(value: unknown): unknown {
return _parseMapComponentsParameters(value);
}
function _parseMapComponentsParameters(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsExamples(value: unknown): unknown {
return _parseMapComponentsExamples(value);
}
function _parseMapComponentsExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseRequestBodies(value: unknown): unknown {
return _parseMapRequestBodies(value);
}
function _parseMapRequestBodies(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsHeaders(value: unknown): unknown {
return _parseMapComponentsHeaders(value);
}
function _parseMapComponentsHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSecuritySchemes(value: unknown): unknown {
return _parseMapSecuritySchemes(value);
}
function _parseMapSecuritySchemes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsLinks(value: unknown): unknown {
return _parseMapComponentsLinks(value);
}
function _parseMapComponentsLinks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsCallbacks(value: unknown): unknown {
return _parseMapComponentsCallbacks(value);
}
function _parseMapComponentsCallbacks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsAdditionalProperties(value: unknown): unknown {
return _parseNeverComponentsAdditionalProperties(value);
}
function _parseNeverComponentsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseComponentsX(value: unknown): unknown {
return ;
}
export function parseSchemaTitle(value: unknown): unknown {
return _parseStringSchemaTitle(value);
}
function _parseStringSchemaTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMultipleOf(value: unknown): unknown {
return _parseNumberMultipleOf(value);
}
function _parseNumberMultipleOf(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMaximum(value: unknown): unknown {
return _parseNumberMaximum(value);
}
function _parseNumberMaximum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseExclusiveMaximum(value: unknown): unknown {
return _parseBooleanExclusiveMaximum(value);
}
function _parseBooleanExclusiveMaximum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMinimum(value: unknown): unknown {
return _parseNumberMinimum(value);
}
function _parseNumberMinimum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseExclusiveMinimum(value: unknown): unknown {
return _parseBooleanExclusiveMinimum(value);
}
function _parseBooleanExclusiveMinimum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMaxLength(value: unknown): unknown {
return _parseIntegerMaxLength(value);
}
function _parseIntegerMaxLength(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinLength(value: unknown): unknown {
return _parseIntegerMinLength(value);
}
function _parseIntegerMinLength(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parsePattern(value: unknown): unknown {
return _parseStringPattern(value);
}
function _parseStringPattern(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMaxItems(value: unknown): unknown {
return _parseIntegerMaxItems(value);
}
function _parseIntegerMaxItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinItems(value: unknown): unknown {
return _parseIntegerMinItems(value);
}
function _parseIntegerMinItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseUniqueItems(value: unknown): unknown {
return _parseBooleanUniqueItems(value);
}
function _parseBooleanUniqueItems(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMaxProperties(value: unknown): unknown {
return _parseIntegerMaxProperties(value);
}
function _parseIntegerMaxProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinProperties(value: unknown): unknown {
return _parseIntegerMinProperties(value);
}
function _parseIntegerMinProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseSchemaRequired(value: unknown): unknown {
return _parseArraySchemaRequired(value);
}
function _parseArraySchemaRequired(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseRequiredItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemaEnum(value: unknown): unknown {
return _parseArraySchemaEnum(value);
}
function _parseArraySchemaEnum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchemaEnumItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemaType(value: unknown): unknown {
return _parseStringSchemaType(value);
}
function _parseStringSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesNot(value: unknown): unknown {
return _parseOneOfPropertiesNot(value);
}
function _parseOneOfPropertiesNot(value: unknown): unknown {
return parseNotOneOf0(value) ?? parseNotOneOf1(value);
}
export function parseAllOf(value: unknown): unknown {
return _parseArrayAllOf(value);
}
function _parseArrayAllOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAllOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOneOf(value: unknown): unknown {
return _parseArrayOneOf(value);
}
function _parseArrayOneOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOneOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAnyOf(value: unknown): unknown {
return _parseArrayAnyOf(value);
}
function _parseArrayAnyOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAnyOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesItems(value: unknown): unknown {
return _parseOneOfPropertiesItems(value);
}
function _parseOneOfPropertiesItems(value: unknown): unknown {
return parsePropertiesItemsOneOf0(value) ?? parsePropertiesItemsOneOf1(value);
}
export function parseProperties(value: unknown): unknown {
return _parseMapProperties(value);
}
function _parseMapProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePropertiesPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSchemaPropertiesAdditionalProperties(value: unknown): unknown {
return _parseOneOfSchemaPropertiesAdditionalProperties(value);
}
function _parseOneOfSchemaPropertiesAdditionalProperties(value: unknown): unknown {
return parseSchemaPropertiesAdditionalPropertiesOneOf0(value) ?? parseSchemaPropertiesAdditionalPropertiesOneOf1(value) ?? parseAdditionalPropertiesOneOf2(value);
}
export function parseSchemaDescription(value: unknown): unknown {
return _parseStringSchemaDescription(value);
}
function _parseStringSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormat(value: unknown): unknown {
return _parseStringFormat(value);
}
function _parseStringFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaDefault(value: unknown): unknown {
return ;
}
export function parseNullable(value: unknown): unknown {
return _parseBooleanNullable(value);
}
function _parseBooleanNullable(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePropertiesDiscriminator(value: unknown): unknown {
return _parseReferencePropertiesDiscriminator(value);
}
function _parseReferencePropertiesDiscriminator(value: unknown): unknown {
return parseDefinitionsDiscriminator(value);
}
export function parseReadOnly(value: unknown): unknown {
return _parseBooleanReadOnly(value);
}
function _parseBooleanReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWriteOnly(value: unknown): unknown {
return _parseBooleanWriteOnly(value);
}
function _parseBooleanWriteOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseSchemaPropertiesExample(value: unknown): unknown {
return ;
}
export function parseSchemaExternalDocs(value: unknown): unknown {
return _parseReferenceSchemaExternalDocs(value);
}
function _parseReferenceSchemaExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseSchemaDeprecated(value: unknown): unknown {
return _parseBooleanSchemaDeprecated(value);
}
function _parseBooleanSchemaDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePropertiesXml(value: unknown): unknown {
return _parseReferencePropertiesXml(value);
}
function _parseReferencePropertiesXml(value: unknown): unknown {
return parseDefinitionsXml(value);
}
export function parseSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverSchemaAdditionalProperties(value);
}
function _parseNeverSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaX(value: unknown): unknown {
return ;
}
export function parsePropertyName(value: unknown): unknown {
return _parseStringPropertyName(value);
}
function _parseStringPropertyName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMapping(value: unknown): unknown {
return _parseMapMapping(value);
}
function _parseMapMapping(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseMappingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseXmlName(value: unknown): unknown {
return _parseStringXmlName(value);
}
function _parseStringXmlName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseNamespace(value: unknown): unknown {
return _parseStringNamespace(value);
}
function _parseStringNamespace(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrefix(value: unknown): unknown {
return _parseStringPrefix(value);
}
function _parseStringPrefix(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAttribute(value: unknown): unknown {
return _parseBooleanAttribute(value);
}
function _parseBooleanAttribute(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWrapped(value: unknown): unknown {
return _parseBooleanWrapped(value);
}
function _parseBooleanWrapped(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseXmlAdditionalProperties(value: unknown): unknown {
return _parseNeverXmlAdditionalProperties(value);
}
function _parseNeverXmlAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseXmlX(value: unknown): unknown {
return ;
}
export function parseResponseDescription(value: unknown): unknown {
return _parseStringResponseDescription(value);
}
function _parseStringResponseDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseResponseHeaders(value: unknown): unknown {
return _parseMapResponseHeaders(value);
}
function _parseMapResponseHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponseHeadersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseContent(value: unknown): unknown {
return _parseMapResponseContent(value);
}
function _parseMapResponseContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponseContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseLinks(value: unknown): unknown {
return _parseMapResponseLinks(value);
}
function _parseMapResponseLinks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseLinksAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseAdditionalProperties(value: unknown): unknown {
return _parseNeverResponseAdditionalProperties(value);
}
function _parseNeverResponseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponseX(value: unknown): unknown {
return ;
}
export function parseMediaTypePropertiesSchema(value: unknown): unknown {
return _parseOneOfMediaTypePropertiesSchema(value);
}
function _parseOneOfMediaTypePropertiesSchema(value: unknown): unknown {
return parseMediaTypeSchemaOneOf0(value) ?? parseMediaTypeSchemaOneOf1(value);
}
export function parseMediaTypePropertiesExample(value: unknown): unknown {
return ;
}
export function parseMediaTypeExamples(value: unknown): unknown {
return _parseMapMediaTypeExamples(value);
}
function _parseMapMediaTypeExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseMediaTypeExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePropertiesEncoding(value: unknown): unknown {
return _parseMapPropertiesEncoding(value);
}
function _parseMapPropertiesEncoding(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePropertiesEncodingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaTypeAdditionalProperties(value: unknown): unknown {
return _parseNeverMediaTypeAdditionalProperties(value);
}
function _parseNeverMediaTypeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseMediaTypeX(value: unknown): unknown {
return ;
}
export function parseMediaTypeAllOf0(value: unknown): unknown {
return _parseReferenceMediaTypeAllOf0(value);
}
function _parseReferenceMediaTypeAllOf0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseExampleSummary(value: unknown): unknown {
return _parseStringExampleSummary(value);
}
function _parseStringExampleSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExampleDescription(value: unknown): unknown {
return _parseStringExampleDescription(value);
}
function _parseStringExampleDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseValue(value: unknown): unknown {
return ;
}
export function parseExternalValue(value: unknown): unknown {
return _parseStringExternalValue(value);
}
function _parseStringExternalValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExampleAdditionalProperties(value: unknown): unknown {
return _parseNeverExampleAdditionalProperties(value);
}
function _parseNeverExampleAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExampleX(value: unknown): unknown {
return ;
}
export function parseHeaderDescription(value: unknown): unknown {
return _parseStringHeaderDescription(value);
}
function _parseStringHeaderDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderRequired(value: unknown): unknown {
return _parseBooleanHeaderRequired(value);
}
function _parseBooleanHeaderRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderDeprecated(value: unknown): unknown {
return _parseBooleanHeaderDeprecated(value);
}
function _parseBooleanHeaderDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderAllowEmptyValue(value: unknown): unknown {
return _parseBooleanHeaderAllowEmptyValue(value);
}
function _parseBooleanHeaderAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderStyle(value: unknown): unknown {
return _parseStringHeaderStyle(value);
}
function _parseStringHeaderStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderExplode(value: unknown): unknown {
return _parseBooleanHeaderExplode(value);
}
function _parseBooleanHeaderExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderAllowReserved(value: unknown): unknown {
return _parseBooleanHeaderAllowReserved(value);
}
function _parseBooleanHeaderAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderPropertiesSchema(value: unknown): unknown {
return _parseOneOfHeaderPropertiesSchema(value);
}
function _parseOneOfHeaderPropertiesSchema(value: unknown): unknown {
return parseHeaderSchemaOneOf0(value) ?? parseHeaderSchemaOneOf1(value);
}
export function parseHeaderContent(value: unknown): unknown {
return _parseMapHeaderContent(value);
}
function _parseMapHeaderContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeaderContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderPropertiesExample(value: unknown): unknown {
return ;
}
export function parseHeaderExamples(value: unknown): unknown {
return _parseMapHeaderExamples(value);
}
function _parseMapHeaderExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeaderExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderAdditionalProperties(value);
}
function _parseNeverHeaderAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderX(value: unknown): unknown {
return ;
}
export function parseHeaderAllOf0(value: unknown): unknown {
return _parseReferenceHeaderAllOf0(value);
}
function _parseReferenceHeaderAllOf0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseHeaderAllOf1(value: unknown): unknown {
return _parseReferenceHeaderAllOf1(value);
}
function _parseReferenceHeaderAllOf1(value: unknown): unknown {
return parseSchemaXorContent(value);
}
export function parsePathsAdditionalProperties(value: unknown): unknown {
return _parseNeverPathsAdditionalProperties(value);
}
function _parseNeverPathsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePatternProperties(value: unknown): unknown {
return _parseReferencePatternProperties(value);
}
function _parseReferencePatternProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parsePathsX(value: unknown): unknown {
return ;
}
export function parsePropertiesRef(value: unknown): unknown {
return _parseStringPropertiesRef(value);
}
function _parseStringPropertiesRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemSummary(value: unknown): unknown {
return _parseStringPathItemSummary(value);
}
function _parseStringPathItemSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemDescription(value: unknown): unknown {
return _parseStringPathItemDescription(value);
}
function _parseStringPathItemDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemServers(value: unknown): unknown {
return _parseArrayPathItemServers(value);
}
function _parseArrayPathItemServers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePathItemServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePathItemParameters(value: unknown): unknown {
return _parseArrayPathItemParameters(value);
}
function _parseArrayPathItemParameters(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePathItemParametersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePathItemAdditionalProperties(value: unknown): unknown {
return _parseNeverPathItemAdditionalProperties(value);
}
function _parseNeverPathItemAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseGetPutPostDeleteOptionsHeadPatchTrace(value: unknown): unknown {
return _parseReferenceGetPutPostDeleteOptionsHeadPatchTrace(value);
}
function _parseReferenceGetPutPostDeleteOptionsHeadPatchTrace(value: unknown): unknown {
return parseOperation(value);
}
export function parsePathItemX(value: unknown): unknown {
return ;
}
export function parseOperationTags(value: unknown): unknown {
return _parseArrayOperationTags(value);
}
function _parseArrayOperationTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationSummary(value: unknown): unknown {
return _parseStringOperationSummary(value);
}
function _parseStringOperationSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationDescription(value: unknown): unknown {
return _parseStringOperationDescription(value);
}
function _parseStringOperationDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationExternalDocs(value: unknown): unknown {
return _parseReferenceOperationExternalDocs(value);
}
function _parseReferenceOperationExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseOperationOperationId(value: unknown): unknown {
return _parseStringOperationOperationId(value);
}
function _parseStringOperationOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationParameters(value: unknown): unknown {
return _parseArrayOperationParameters(value);
}
function _parseArrayOperationParameters(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationParametersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationPropertiesRequestBody(value: unknown): unknown {
return _parseOneOfOperationPropertiesRequestBody(value);
}
function _parseOneOfOperationPropertiesRequestBody(value: unknown): unknown {
return parseRequestBodyOneOf0(value) ?? parseRequestBodyOneOf1(value);
}
export function parseOperationPropertiesResponses(value: unknown): unknown {
return _parseReferenceOperationPropertiesResponses(value);
}
function _parseReferenceOperationPropertiesResponses(value: unknown): unknown {
return parseDefinitionsResponses(value);
}
export function parseOperationCallbacks(value: unknown): unknown {
return _parseMapOperationCallbacks(value);
}
function _parseMapOperationCallbacks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseCallbacksAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOperationDeprecated(value: unknown): unknown {
return _parseBooleanOperationDeprecated(value);
}
function _parseBooleanOperationDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOperationSecurity(value: unknown): unknown {
return _parseArrayOperationSecurity(value);
}
function _parseArrayOperationSecurity(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationSecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationServers(value: unknown): unknown {
return _parseArrayOperationServers(value);
}
function _parseArrayOperationServers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationAdditionalProperties(value: unknown): unknown {
return _parseNeverOperationAdditionalProperties(value);
}
function _parseNeverOperationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOperationX(value: unknown): unknown {
return ;
}
export function parseResponsesDefault(value: unknown): unknown {
return _parseOneOfResponsesDefault(value);
}
function _parseOneOfResponsesDefault(value: unknown): unknown {
return parseDefaultOneOf0(value) ?? parseDefaultOneOf1(value);
}
export function parseResponsesAdditionalProperties(value: unknown): unknown {
return _parseNeverResponsesAdditionalProperties(value);
}
function _parseNeverResponsesAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePatternProperties15D2Xx(value: unknown): unknown {
return _parseOneOfPatternProperties15D2Xx(value);
}
function _parseOneOfPatternProperties15D2Xx(value: unknown): unknown {
return parsePatternProperties15D2XxOneOf0(value) ?? parsePatternProperties15D2XxOneOf1(value);
}
export function parseResponsesX(value: unknown): unknown {
return ;
}
export function parseSecurityRequirementAdditionalProperties(value: unknown): unknown {
return _parseArraySecurityRequirementAdditionalProperties(value);
}
function _parseArraySecurityRequirementAdditionalProperties(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAdditionalPropertiesItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseTagName(value: unknown): unknown {
return _parseStringTagName(value);
}
function _parseStringTagName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagDescription(value: unknown): unknown {
return _parseStringTagDescription(value);
}
function _parseStringTagDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagExternalDocs(value: unknown): unknown {
return _parseReferenceTagExternalDocs(value);
}
function _parseReferenceTagExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseTagAdditionalProperties(value: unknown): unknown {
return _parseNeverTagAdditionalProperties(value);
}
function _parseNeverTagAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseTagX(value: unknown): unknown {
return ;
}
export function parseExternalDocumentationDescription(value: unknown): unknown {
return _parseStringExternalDocumentationDescription(value);
}
function _parseStringExternalDocumentationDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocumentationUrl(value: unknown): unknown {
return _parseStringExternalDocumentationUrl(value);
}
function _parseStringExternalDocumentationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocumentationAdditionalProperties(value: unknown): unknown {
return _parseNeverExternalDocumentationAdditionalProperties(value);
}
function _parseNeverExternalDocumentationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExternalDocumentationX(value: unknown): unknown {
return ;
}
export function parseExampleXorExamplesNot(value: unknown): unknown {
return _parseMapExampleXorExamplesNot(value);
}
function _parseMapExampleXorExamplesNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContentOneOf0(value: unknown): unknown {
return _parseMapSchemaXorContentOneOf0(value);
}
function _parseMapSchemaXorContentOneOf0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContentOneOf1(value: unknown): unknown {
return _parseMapSchemaXorContentOneOf1(value) ?? _parseAllOfSchemaXorContentOneOf1(value);
}
function _parseMapSchemaXorContentOneOf1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
function _parseAllOfSchemaXorContentOneOf1(value: unknown): unknown {
return parseOneOf1AllOf0(value) ?? parseOneOf1AllOf1(value) ?? parseOneOf1AllOf2(value) ?? parseAllOf3(value) ?? parseAllOf4(value);
}
export function parseSchemaXorContentNot(value: unknown): unknown {
return _parseMapSchemaXorContentNot(value);
}
function _parseMapSchemaXorContentNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseParameterName(value: unknown): unknown {
return _parseStringParameterName(value);
}
function _parseStringParameterName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterIn(value: unknown): unknown {
return _parseStringParameterIn(value);
}
function _parseStringParameterIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterDescription(value: unknown): unknown {
return _parseStringParameterDescription(value);
}
function _parseStringParameterDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterRequired(value: unknown): unknown {
return _parseBooleanParameterRequired(value);
}
function _parseBooleanParameterRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterDeprecated(value: unknown): unknown {
return _parseBooleanParameterDeprecated(value);
}
function _parseBooleanParameterDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterAllowEmptyValue(value: unknown): unknown {
return _parseBooleanParameterAllowEmptyValue(value);
}
function _parseBooleanParameterAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterStyle(value: unknown): unknown {
return _parseStringParameterStyle(value);
}
function _parseStringParameterStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterExplode(value: unknown): unknown {
return _parseBooleanParameterExplode(value);
}
function _parseBooleanParameterExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterAllowReserved(value: unknown): unknown {
return _parseBooleanParameterAllowReserved(value);
}
function _parseBooleanParameterAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterPropertiesSchema(value: unknown): unknown {
return _parseOneOfParameterPropertiesSchema(value);
}
function _parseOneOfParameterPropertiesSchema(value: unknown): unknown {
return parseParameterSchemaOneOf0(value) ?? parseParameterSchemaOneOf1(value);
}
export function parseParameterContent(value: unknown): unknown {
return _parseMapParameterContent(value);
}
function _parseMapParameterContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterPropertiesExample(value: unknown): unknown {
return ;
}
export function parseParameterExamples(value: unknown): unknown {
return _parseMapParameterExamples(value);
}
function _parseMapParameterExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterAdditionalProperties(value: unknown): unknown {
return _parseNeverParameterAdditionalProperties(value);
}
function _parseNeverParameterAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseParameterX(value: unknown): unknown {
return ;
}
export function parseParameterAllOf0(value: unknown): unknown {
return _parseReferenceParameterAllOf0(value);
}
function _parseReferenceParameterAllOf0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseParameterAllOf1(value: unknown): unknown {
return _parseReferenceParameterAllOf1(value);
}
function _parseReferenceParameterAllOf1(value: unknown): unknown {
return parseSchemaXorContent(value);
}
export function parseParameterAllOf2(value: unknown): unknown {
return _parseReferenceParameterAllOf2(value);
}
function _parseReferenceParameterAllOf2(value: unknown): unknown {
return parseParameterLocation(value);
}
export function parseParameterLocationOneOf0(value: unknown): unknown {
return _parseMapParameterLocationOneOf0(value);
}
function _parseMapParameterLocationOneOf0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf0In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf0Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseOneOf0Required(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocationOneOf1(value: unknown): unknown {
return _parseMapParameterLocationOneOf1(value);
}
function _parseMapParameterLocationOneOf1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf1In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf1Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocationOneOf2(value: unknown): unknown {
return _parseMapParameterLocationOneOf2(value);
}
function _parseMapParameterLocationOneOf2(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf2In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf2Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocationOneOf3(value: unknown): unknown {
return _parseMapParameterLocationOneOf3(value);
}
function _parseMapParameterLocationOneOf3(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf3In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf3Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseRequestBodyDescription(value: unknown): unknown {
return _parseStringRequestBodyDescription(value);
}
function _parseStringRequestBodyDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseRequestBodyContent(value: unknown): unknown {
return _parseMapRequestBodyContent(value);
}
function _parseMapRequestBodyContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseRequestBodyContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseRequestBodyRequired(value: unknown): unknown {
return _parseBooleanRequestBodyRequired(value);
}
function _parseBooleanRequestBodyRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseRequestBodyAdditionalProperties(value: unknown): unknown {
return _parseNeverRequestBodyAdditionalProperties(value);
}
function _parseNeverRequestBodyAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseRequestBodyX(value: unknown): unknown {
return ;
}
export function parseSecuritySchemeOneOf0(value: unknown): unknown {
return _parseReferenceSecuritySchemeOneOf0(value);
}
function _parseReferenceSecuritySchemeOneOf0(value: unknown): unknown {
return parseApiKeySecurityScheme(value);
}
export function parseSecuritySchemeOneOf1(value: unknown): unknown {
return _parseReferenceSecuritySchemeOneOf1(value);
}
function _parseReferenceSecuritySchemeOneOf1(value: unknown): unknown {
return parseHttpSecurityScheme(value);
}
export function parseSecuritySchemeOneOf2(value: unknown): unknown {
return _parseReferenceSecuritySchemeOneOf2(value);
}
function _parseReferenceSecuritySchemeOneOf2(value: unknown): unknown {
return parseOauth2SecurityScheme(value);
}
export function parseSecuritySchemeOneOf3(value: unknown): unknown {
return _parseReferenceSecuritySchemeOneOf3(value);
}
function _parseReferenceSecuritySchemeOneOf3(value: unknown): unknown {
return parseOpenIdConnectSecurityScheme(value);
}
export function parseApiKeySecuritySchemeType(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeType(value);
}
function _parseStringApiKeySecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeName(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeName(value);
}
function _parseStringApiKeySecuritySchemeName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeIn(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeIn(value);
}
function _parseStringApiKeySecuritySchemeIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeDescription(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeDescription(value);
}
function _parseStringApiKeySecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverApiKeySecuritySchemeAdditionalProperties(value);
}
function _parseNeverApiKeySecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseApiKeySecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseHttpSecuritySchemeScheme(value: unknown): unknown {
return _parseStringHttpSecuritySchemeScheme(value);
}
function _parseStringHttpSecuritySchemeScheme(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBearerFormat(value: unknown): unknown {
return _parseStringBearerFormat(value);
}
function _parseStringBearerFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeDescription(value: unknown): unknown {
return _parseStringHttpSecuritySchemeDescription(value);
}
function _parseStringHttpSecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeType(value: unknown): unknown {
return _parseStringHttpSecuritySchemeType(value);
}
function _parseStringHttpSecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverHttpSecuritySchemeAdditionalProperties(value);
}
function _parseNeverHttpSecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHttpSecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseHttpSecuritySchemeOneOf0(value: unknown): unknown {
return _parseMapHttpSecuritySchemeOneOf0(value);
}
function _parseMapHttpSecuritySchemeOneOf0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parseOneOf0Scheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseHttpSecuritySchemeOneOf1(value: unknown): unknown {
return _parseMapHttpSecuritySchemeOneOf1(value) ?? _parseNotHttpSecuritySchemeOneOf1(value);
}
function _parseMapHttpSecuritySchemeOneOf1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parseOneOf1Scheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
function _parseNotHttpSecuritySchemeOneOf1(value: unknown): unknown {
return parseOneOf1Not(value);
}
export function parseOauth2SecuritySchemeType(value: unknown): unknown {
return _parseStringOauth2SecuritySchemeType(value);
}
function _parseStringOauth2SecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFlows(value: unknown): unknown {
return _parseReferenceFlows(value);
}
function _parseReferenceFlows(value: unknown): unknown {
return parseOauthFlows(value);
}
export function parseOauth2SecuritySchemeDescription(value: unknown): unknown {
return _parseStringOauth2SecuritySchemeDescription(value);
}
function _parseStringOauth2SecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2SecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2SecuritySchemeAdditionalProperties(value);
}
function _parseNeverOauth2SecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2SecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseOpenIdConnectSecuritySchemeType(value: unknown): unknown {
return _parseStringOpenIdConnectSecuritySchemeType(value);
}
function _parseStringOpenIdConnectSecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectUrl(value: unknown): unknown {
return _parseStringOpenIdConnectUrl(value);
}
function _parseStringOpenIdConnectUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectSecuritySchemeDescription(value: unknown): unknown {
return _parseStringOpenIdConnectSecuritySchemeDescription(value);
}
function _parseStringOpenIdConnectSecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverOpenIdConnectSecuritySchemeAdditionalProperties(value);
}
function _parseNeverOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOpenIdConnectSecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseImplicit(value: unknown): unknown {
return _parseReferenceImplicit(value);
}
function _parseReferenceImplicit(value: unknown): unknown {
return parseImplicitOauthFlow(value);
}
export function parsePassword(value: unknown): unknown {
return _parseReferencePassword(value);
}
function _parseReferencePassword(value: unknown): unknown {
return parsePasswordOauthFlow(value);
}
export function parseClientCredentials(value: unknown): unknown {
return _parseReferenceClientCredentials(value);
}
function _parseReferenceClientCredentials(value: unknown): unknown {
return parseClientCredentialsFlow(value);
}
export function parseAuthorizationCode(value: unknown): unknown {
return _parseReferenceAuthorizationCode(value);
}
function _parseReferenceAuthorizationCode(value: unknown): unknown {
return parseAuthorizationCodeOauthFlow(value);
}
export function parseOauthFlowsAdditionalProperties(value: unknown): unknown {
return _parseNeverOauthFlowsAdditionalProperties(value);
}
function _parseNeverOauthFlowsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauthFlowsX(value: unknown): unknown {
return ;
}
export function parseImplicitOauthFlowAuthorizationUrl(value: unknown): unknown {
return _parseStringImplicitOauthFlowAuthorizationUrl(value);
}
function _parseStringImplicitOauthFlowAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseImplicitOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringImplicitOauthFlowRefreshUrl(value);
}
function _parseStringImplicitOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseImplicitOauthFlowScopes(value: unknown): unknown {
return _parseMapImplicitOauthFlowScopes(value);
}
function _parseMapImplicitOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseImplicitOauthFlowScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverImplicitOauthFlowAdditionalProperties(value);
}
function _parseNeverImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseImplicitOauthFlowX(value: unknown): unknown {
return ;
}
export function parsePasswordOauthFlowTokenUrl(value: unknown): unknown {
return _parseStringPasswordOauthFlowTokenUrl(value);
}
function _parseStringPasswordOauthFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePasswordOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringPasswordOauthFlowRefreshUrl(value);
}
function _parseStringPasswordOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePasswordOauthFlowScopes(value: unknown): unknown {
return _parseMapPasswordOauthFlowScopes(value);
}
function _parseMapPasswordOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePasswordOauthFlowScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePasswordOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverPasswordOauthFlowAdditionalProperties(value);
}
function _parseNeverPasswordOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePasswordOauthFlowX(value: unknown): unknown {
return ;
}
export function parseClientCredentialsFlowTokenUrl(value: unknown): unknown {
return _parseStringClientCredentialsFlowTokenUrl(value);
}
function _parseStringClientCredentialsFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseClientCredentialsFlowRefreshUrl(value: unknown): unknown {
return _parseStringClientCredentialsFlowRefreshUrl(value);
}
function _parseStringClientCredentialsFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseClientCredentialsFlowScopes(value: unknown): unknown {
return _parseMapClientCredentialsFlowScopes(value);
}
function _parseMapClientCredentialsFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseClientCredentialsFlowScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverClientCredentialsFlowAdditionalProperties(value);
}
function _parseNeverClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseClientCredentialsFlowX(value: unknown): unknown {
return ;
}
export function parseAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowAuthorizationUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowTokenUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowTokenUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowRefreshUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowScopes(value: unknown): unknown {
return _parseMapAuthorizationCodeOauthFlowScopes(value);
}
function _parseMapAuthorizationCodeOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseAuthorizationCodeOauthFlowScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverAuthorizationCodeOauthFlowAdditionalProperties(value);
}
function _parseNeverAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseAuthorizationCodeOauthFlowX(value: unknown): unknown {
return ;
}
export function parseLinkOperationId(value: unknown): unknown {
return _parseStringLinkOperationId(value);
}
function _parseStringLinkOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationRef(value: unknown): unknown {
return _parseStringOperationRef(value);
}
function _parseStringOperationRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLinkParameters(value: unknown): unknown {
return _parseMapLinkParameters(value);
}
function _parseMapLinkParameters(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParametersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseLinkPropertiesRequestBody(value: unknown): unknown {
return ;
}
export function parseLinkDescription(value: unknown): unknown {
return _parseStringLinkDescription(value);
}
function _parseStringLinkDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesServer(value: unknown): unknown {
return _parseReferencePropertiesServer(value);
}
function _parseReferencePropertiesServer(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parseLinkAdditionalProperties(value: unknown): unknown {
return _parseNeverLinkAdditionalProperties(value);
}
function _parseNeverLinkAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLinkX(value: unknown): unknown {
return ;
}
export function parseLinkNot(value: unknown): unknown {
return _parseMapLinkNot(value);
}
function _parseMapLinkNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseCallbackAdditionalProperties(value: unknown): unknown {
return _parseReferenceCallbackAdditionalProperties(value);
}
function _parseReferenceCallbackAdditionalProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parseCallbackX(value: unknown): unknown {
return ;
}
export function parseContentType(value: unknown): unknown {
return _parseStringContentType(value);
}
function _parseStringContentType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncodingHeaders(value: unknown): unknown {
return _parseMapEncodingHeaders(value);
}
function _parseMapEncodingHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseEncodingHeadersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseEncodingStyle(value: unknown): unknown {
return _parseStringEncodingStyle(value);
}
function _parseStringEncodingStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncodingExplode(value: unknown): unknown {
return _parseBooleanEncodingExplode(value);
}
function _parseBooleanEncodingExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseEncodingAllowReserved(value: unknown): unknown {
return _parseBooleanEncodingAllowReserved(value);
}
function _parseBooleanEncodingAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDefinitionsEncodingAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsEncodingAdditionalProperties(value);
}
function _parseNeverDefinitionsEncodingAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchema20210928ServersItems(value: unknown): unknown {
return _parseReferenceSchema20210928ServersItems(value);
}
function _parseReferenceSchema20210928ServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parseSchema20210928SecurityItems(value: unknown): unknown {
return _parseReferenceSchema20210928SecurityItems(value);
}
function _parseReferenceSchema20210928SecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parseSchema20210928TagsItems(value: unknown): unknown {
return _parseReferenceSchema20210928TagsItems(value);
}
function _parseReferenceSchema20210928TagsItems(value: unknown): unknown {
return parseTag(value);
}
export function parseVariablesAdditionalProperties(value: unknown): unknown {
return _parseReferenceVariablesAdditionalProperties(value);
}
function _parseReferenceVariablesAdditionalProperties(value: unknown): unknown {
return parseServerVariable(value);
}
export function parseServerVariableEnumItems(value: unknown): unknown {
return _parseStringServerVariableEnumItems(value);
}
function _parseStringServerVariableEnumItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemasAZAZ09(value: unknown): unknown {
return _parseOneOfSchemasAZAZ09(value);
}
function _parseOneOfSchemasAZAZ09(value: unknown): unknown {
return parseSchemasAZAZ09OneOf0(value) ?? parseSchemasAZAZ09OneOf1(value);
}
export function parseResponsesAZAZ09(value: unknown): unknown {
return _parseOneOfResponsesAZAZ09(value);
}
function _parseOneOfResponsesAZAZ09(value: unknown): unknown {
return parseResponsesAZAZ09OneOf0(value) ?? parseResponsesAZAZ09OneOf1(value);
}
export function parseParametersAZAZ09(value: unknown): unknown {
return _parseOneOfParametersAZAZ09(value);
}
function _parseOneOfParametersAZAZ09(value: unknown): unknown {
return parseParametersAZAZ09OneOf0(value) ?? parseParametersAZAZ09OneOf1(value);
}
export function parseExamplesAZAZ09(value: unknown): unknown {
return _parseOneOfExamplesAZAZ09(value);
}
function _parseOneOfExamplesAZAZ09(value: unknown): unknown {
return parseExamplesAZAZ09OneOf0(value) ?? parseExamplesAZAZ09OneOf1(value);
}
export function parseRequestBodiesAZAZ09(value: unknown): unknown {
return _parseOneOfRequestBodiesAZAZ09(value);
}
function _parseOneOfRequestBodiesAZAZ09(value: unknown): unknown {
return parseRequestBodiesAZAZ09OneOf0(value) ?? parseRequestBodiesAZAZ09OneOf1(value);
}
export function parseHeadersAZAZ09(value: unknown): unknown {
return _parseOneOfHeadersAZAZ09(value);
}
function _parseOneOfHeadersAZAZ09(value: unknown): unknown {
return parseHeadersAZAZ09OneOf0(value) ?? parseHeadersAZAZ09OneOf1(value);
}
export function parseSecuritySchemesAZAZ09(value: unknown): unknown {
return _parseOneOfSecuritySchemesAZAZ09(value);
}
function _parseOneOfSecuritySchemesAZAZ09(value: unknown): unknown {
return parseSecuritySchemesAZAZ09OneOf0(value) ?? parseSecuritySchemesAZAZ09OneOf1(value);
}
export function parseLinksAZAZ09(value: unknown): unknown {
return _parseOneOfLinksAZAZ09(value);
}
function _parseOneOfLinksAZAZ09(value: unknown): unknown {
return parseLinksAZAZ09OneOf0(value) ?? parseLinksAZAZ09OneOf1(value);
}
export function parseCallbacksAZAZ09(value: unknown): unknown {
return _parseOneOfCallbacksAZAZ09(value);
}
function _parseOneOfCallbacksAZAZ09(value: unknown): unknown {
return parseCallbacksAZAZ09OneOf0(value) ?? parseCallbacksAZAZ09OneOf1(value);
}
export function parseRequiredItems(value: unknown): unknown {
return _parseStringRequiredItems(value);
}
function _parseStringRequiredItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaEnumItems(value: unknown): unknown {
return ;
}
export function parseNotOneOf0(value: unknown): unknown {
return _parseReferenceNotOneOf0(value);
}
function _parseReferenceNotOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseNotOneOf1(value: unknown): unknown {
return _parseReferenceNotOneOf1(value);
}
function _parseReferenceNotOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAllOfItems(value: unknown): unknown {
return _parseOneOfAllOfItems(value);
}
function _parseOneOfAllOfItems(value: unknown): unknown {
return parseAllOfItemsOneOf0(value) ?? parseAllOfItemsOneOf1(value);
}
export function parseOneOfItems(value: unknown): unknown {
return _parseOneOfOneOfItems(value);
}
function _parseOneOfOneOfItems(value: unknown): unknown {
return parseOneOfItemsOneOf0(value) ?? parseOneOfItemsOneOf1(value);
}
export function parseAnyOfItems(value: unknown): unknown {
return _parseOneOfAnyOfItems(value);
}
function _parseOneOfAnyOfItems(value: unknown): unknown {
return parseAnyOfItemsOneOf0(value) ?? parseAnyOfItemsOneOf1(value);
}
export function parsePropertiesItemsOneOf0(value: unknown): unknown {
return _parseReferencePropertiesItemsOneOf0(value);
}
function _parseReferencePropertiesItemsOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parsePropertiesItemsOneOf1(value: unknown): unknown {
return _parseReferencePropertiesItemsOneOf1(value);
}
function _parseReferencePropertiesItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parsePropertiesPropertiesAdditionalProperties(value: unknown): unknown {
return _parseOneOfPropertiesPropertiesAdditionalProperties(value);
}
function _parseOneOfPropertiesPropertiesAdditionalProperties(value: unknown): unknown {
return parsePropertiesPropertiesAdditionalPropertiesOneOf0(value) ?? parsePropertiesPropertiesAdditionalPropertiesOneOf1(value);
}
export function parseSchemaPropertiesAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceSchemaPropertiesAdditionalPropertiesOneOf0(value);
}
function _parseReferenceSchemaPropertiesAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchemaPropertiesAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceSchemaPropertiesAdditionalPropertiesOneOf1(value);
}
function _parseReferenceSchemaPropertiesAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAdditionalPropertiesOneOf2(value: unknown): unknown {
return _parseBooleanAdditionalPropertiesOneOf2(value);
}
function _parseBooleanAdditionalPropertiesOneOf2(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMappingAdditionalProperties(value: unknown): unknown {
return _parseStringMappingAdditionalProperties(value);
}
function _parseStringMappingAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseResponseHeadersAdditionalProperties(value: unknown): unknown {
return _parseOneOfResponseHeadersAdditionalProperties(value);
}
function _parseOneOfResponseHeadersAdditionalProperties(value: unknown): unknown {
return parseResponseHeadersAdditionalPropertiesOneOf0(value) ?? parseResponseHeadersAdditionalPropertiesOneOf1(value);
}
export function parseResponseContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceResponseContentAdditionalProperties(value);
}
function _parseReferenceResponseContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseLinksAdditionalProperties(value: unknown): unknown {
return _parseOneOfLinksAdditionalProperties(value);
}
function _parseOneOfLinksAdditionalProperties(value: unknown): unknown {
return parseLinksAdditionalPropertiesOneOf0(value) ?? parseLinksAdditionalPropertiesOneOf1(value);
}
export function parseMediaTypeSchemaOneOf0(value: unknown): unknown {
return _parseReferenceMediaTypeSchemaOneOf0(value);
}
function _parseReferenceMediaTypeSchemaOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseMediaTypeSchemaOneOf1(value: unknown): unknown {
return _parseReferenceMediaTypeSchemaOneOf1(value);
}
function _parseReferenceMediaTypeSchemaOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseMediaTypeExamplesAdditionalProperties(value: unknown): unknown {
return _parseOneOfMediaTypeExamplesAdditionalProperties(value);
}
function _parseOneOfMediaTypeExamplesAdditionalProperties(value: unknown): unknown {
return parseMediaTypeExamplesAdditionalPropertiesOneOf0(value) ?? parseMediaTypeExamplesAdditionalPropertiesOneOf1(value);
}
export function parsePropertiesEncodingAdditionalProperties(value: unknown): unknown {
return _parseReferencePropertiesEncodingAdditionalProperties(value);
}
function _parseReferencePropertiesEncodingAdditionalProperties(value: unknown): unknown {
return parseDefinitionsEncoding(value);
}
export function parseHeaderSchemaOneOf0(value: unknown): unknown {
return _parseReferenceHeaderSchemaOneOf0(value);
}
function _parseReferenceHeaderSchemaOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseHeaderSchemaOneOf1(value: unknown): unknown {
return _parseReferenceHeaderSchemaOneOf1(value);
}
function _parseReferenceHeaderSchemaOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseHeaderContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceHeaderContentAdditionalProperties(value);
}
function _parseReferenceHeaderContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseHeaderExamplesAdditionalProperties(value: unknown): unknown {
return _parseOneOfHeaderExamplesAdditionalProperties(value);
}
function _parseOneOfHeaderExamplesAdditionalProperties(value: unknown): unknown {
return parseHeaderExamplesAdditionalPropertiesOneOf0(value) ?? parseHeaderExamplesAdditionalPropertiesOneOf1(value);
}
export function parsePathItemServersItems(value: unknown): unknown {
return _parseReferencePathItemServersItems(value);
}
function _parseReferencePathItemServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parsePathItemParametersItems(value: unknown): unknown {
return _parseOneOfPathItemParametersItems(value);
}
function _parseOneOfPathItemParametersItems(value: unknown): unknown {
return parsePathItemParametersItemsOneOf0(value) ?? parsePathItemParametersItemsOneOf1(value);
}
export function parseOperationTagsItems(value: unknown): unknown {
return _parseStringOperationTagsItems(value);
}
function _parseStringOperationTagsItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationParametersItems(value: unknown): unknown {
return _parseOneOfOperationParametersItems(value);
}
function _parseOneOfOperationParametersItems(value: unknown): unknown {
return parseOperationParametersItemsOneOf0(value) ?? parseOperationParametersItemsOneOf1(value);
}
export function parseRequestBodyOneOf0(value: unknown): unknown {
return _parseReferenceRequestBodyOneOf0(value);
}
function _parseReferenceRequestBodyOneOf0(value: unknown): unknown {
return parseDefinitionsRequestBody(value);
}
export function parseRequestBodyOneOf1(value: unknown): unknown {
return _parseReferenceRequestBodyOneOf1(value);
}
function _parseReferenceRequestBodyOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseCallbacksAdditionalProperties(value: unknown): unknown {
return _parseOneOfCallbacksAdditionalProperties(value);
}
function _parseOneOfCallbacksAdditionalProperties(value: unknown): unknown {
return parseCallbacksAdditionalPropertiesOneOf0(value) ?? parseCallbacksAdditionalPropertiesOneOf1(value);
}
export function parseOperationSecurityItems(value: unknown): unknown {
return _parseReferenceOperationSecurityItems(value);
}
function _parseReferenceOperationSecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parseOperationServersItems(value: unknown): unknown {
return _parseReferenceOperationServersItems(value);
}
function _parseReferenceOperationServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parseDefaultOneOf0(value: unknown): unknown {
return _parseReferenceDefaultOneOf0(value);
}
function _parseReferenceDefaultOneOf0(value: unknown): unknown {
return parseResponse(value);
}
export function parseDefaultOneOf1(value: unknown): unknown {
return _parseReferenceDefaultOneOf1(value);
}
function _parseReferenceDefaultOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parsePatternProperties15D2XxOneOf0(value: unknown): unknown {
return _parseReferencePatternProperties15D2XxOneOf0(value);
}
function _parseReferencePatternProperties15D2XxOneOf0(value: unknown): unknown {
return parseResponse(value);
}
export function parsePatternProperties15D2XxOneOf1(value: unknown): unknown {
return _parseReferencePatternProperties15D2XxOneOf1(value);
}
function _parseReferencePatternProperties15D2XxOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAdditionalPropertiesItems(value: unknown): unknown {
return _parseStringAdditionalPropertiesItems(value);
}
function _parseStringAdditionalPropertiesItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf1AllOf0(value: unknown): unknown {
return _parseNotOneOf1AllOf0(value);
}
function _parseNotOneOf1AllOf0(value: unknown): unknown {
return parseAllOf0Not(value);
}
export function parseOneOf1AllOf1(value: unknown): unknown {
return _parseNotOneOf1AllOf1(value);
}
function _parseNotOneOf1AllOf1(value: unknown): unknown {
return parseAllOf1Not(value);
}
export function parseOneOf1AllOf2(value: unknown): unknown {
return _parseNotOneOf1AllOf2(value);
}
function _parseNotOneOf1AllOf2(value: unknown): unknown {
return parseAllOf2Not(value);
}
export function parseAllOf3(value: unknown): unknown {
return _parseNotAllOf3(value);
}
function _parseNotAllOf3(value: unknown): unknown {
return parseAllOf3Not(value);
}
export function parseAllOf4(value: unknown): unknown {
return _parseNotAllOf4(value);
}
function _parseNotAllOf4(value: unknown): unknown {
return parseAllOf4Not(value);
}
export function parseParameterSchemaOneOf0(value: unknown): unknown {
return _parseReferenceParameterSchemaOneOf0(value);
}
function _parseReferenceParameterSchemaOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseParameterSchemaOneOf1(value: unknown): unknown {
return _parseReferenceParameterSchemaOneOf1(value);
}
function _parseReferenceParameterSchemaOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseParameterContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceParameterContentAdditionalProperties(value);
}
function _parseReferenceParameterContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseParameterExamplesAdditionalProperties(value: unknown): unknown {
return _parseOneOfParameterExamplesAdditionalProperties(value);
}
function _parseOneOfParameterExamplesAdditionalProperties(value: unknown): unknown {
return parseParameterExamplesAdditionalPropertiesOneOf0(value) ?? parseParameterExamplesAdditionalPropertiesOneOf1(value);
}
export function parseOneOf0In(value: unknown): unknown {
return _parseStringOneOf0In(value);
}
function _parseStringOneOf0In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf0Style(value: unknown): unknown {
return _parseStringOneOf0Style(value);
}
function _parseStringOneOf0Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf0Required(value: unknown): unknown {
return _parseBooleanOneOf0Required(value);
}
function _parseBooleanOneOf0Required(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOneOf1In(value: unknown): unknown {
return _parseStringOneOf1In(value);
}
function _parseStringOneOf1In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf1Style(value: unknown): unknown {
return _parseStringOneOf1Style(value);
}
function _parseStringOneOf1Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf2In(value: unknown): unknown {
return _parseStringOneOf2In(value);
}
function _parseStringOneOf2In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf2Style(value: unknown): unknown {
return _parseStringOneOf2Style(value);
}
function _parseStringOneOf2Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf3In(value: unknown): unknown {
return _parseStringOneOf3In(value);
}
function _parseStringOneOf3In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf3Style(value: unknown): unknown {
return _parseStringOneOf3Style(value);
}
function _parseStringOneOf3Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseRequestBodyContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceRequestBodyContentAdditionalProperties(value);
}
function _parseReferenceRequestBodyContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseOneOf0Scheme(value: unknown): unknown {
return _parseStringOneOf0Scheme(value);
}
function _parseStringOneOf0Scheme(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf1Scheme(value: unknown): unknown {
return _parseNotOneOf1Scheme(value);
}
function _parseNotOneOf1Scheme(value: unknown): unknown {
return parseSchemeNot(value);
}
export function parseOneOf1Not(value: unknown): unknown {
return _parseMapOneOf1Not(value);
}
function _parseMapOneOf1Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseImplicitOauthFlowScopesAdditionalProperties(value: unknown): unknown {
return _parseStringImplicitOauthFlowScopesAdditionalProperties(value);
}
function _parseStringImplicitOauthFlowScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePasswordOauthFlowScopesAdditionalProperties(value: unknown): unknown {
return _parseStringPasswordOauthFlowScopesAdditionalProperties(value);
}
function _parseStringPasswordOauthFlowScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseClientCredentialsFlowScopesAdditionalProperties(value: unknown): unknown {
return _parseStringClientCredentialsFlowScopesAdditionalProperties(value);
}
function _parseStringClientCredentialsFlowScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowScopesAdditionalProperties(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowScopesAdditionalProperties(value);
}
function _parseStringAuthorizationCodeOauthFlowScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParametersAdditionalProperties(value: unknown): unknown {
return ;
}
export function parseEncodingHeadersAdditionalProperties(value: unknown): unknown {
return _parseOneOfEncodingHeadersAdditionalProperties(value);
}
function _parseOneOfEncodingHeadersAdditionalProperties(value: unknown): unknown {
return parseEncodingHeadersAdditionalPropertiesOneOf0(value) ?? parseEncodingHeadersAdditionalPropertiesOneOf1(value);
}
export function parseSchemasAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceSchemasAZAZ09OneOf0(value);
}
function _parseReferenceSchemasAZAZ09OneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchemasAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceSchemasAZAZ09OneOf1(value);
}
function _parseReferenceSchemasAZAZ09OneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponsesAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceResponsesAZAZ09OneOf0(value);
}
function _parseReferenceResponsesAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseResponsesAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceResponsesAZAZ09OneOf1(value);
}
function _parseReferenceResponsesAZAZ09OneOf1(value: unknown): unknown {
return parseResponse(value);
}
export function parseParametersAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceParametersAZAZ09OneOf0(value);
}
function _parseReferenceParametersAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseParametersAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceParametersAZAZ09OneOf1(value);
}
function _parseReferenceParametersAZAZ09OneOf1(value: unknown): unknown {
return parseParameter(value);
}
export function parseExamplesAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceExamplesAZAZ09OneOf0(value);
}
function _parseReferenceExamplesAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseExamplesAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceExamplesAZAZ09OneOf1(value);
}
function _parseReferenceExamplesAZAZ09OneOf1(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseRequestBodiesAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceRequestBodiesAZAZ09OneOf0(value);
}
function _parseReferenceRequestBodiesAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseRequestBodiesAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceRequestBodiesAZAZ09OneOf1(value);
}
function _parseReferenceRequestBodiesAZAZ09OneOf1(value: unknown): unknown {
return parseDefinitionsRequestBody(value);
}
export function parseHeadersAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceHeadersAZAZ09OneOf0(value);
}
function _parseReferenceHeadersAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseHeadersAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceHeadersAZAZ09OneOf1(value);
}
function _parseReferenceHeadersAZAZ09OneOf1(value: unknown): unknown {
return parseHeader(value);
}
export function parseSecuritySchemesAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceSecuritySchemesAZAZ09OneOf0(value);
}
function _parseReferenceSecuritySchemesAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseSecuritySchemesAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceSecuritySchemesAZAZ09OneOf1(value);
}
function _parseReferenceSecuritySchemesAZAZ09OneOf1(value: unknown): unknown {
return parseSecurityScheme(value);
}
export function parseLinksAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceLinksAZAZ09OneOf0(value);
}
function _parseReferenceLinksAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseLinksAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceLinksAZAZ09OneOf1(value);
}
function _parseReferenceLinksAZAZ09OneOf1(value: unknown): unknown {
return parseLink(value);
}
export function parseCallbacksAZAZ09OneOf0(value: unknown): unknown {
return _parseReferenceCallbacksAZAZ09OneOf0(value);
}
function _parseReferenceCallbacksAZAZ09OneOf0(value: unknown): unknown {
return parseReference(value);
}
export function parseCallbacksAZAZ09OneOf1(value: unknown): unknown {
return _parseReferenceCallbacksAZAZ09OneOf1(value);
}
function _parseReferenceCallbacksAZAZ09OneOf1(value: unknown): unknown {
return parseCallback(value);
}
export function parseAllOfItemsOneOf0(value: unknown): unknown {
return _parseReferenceAllOfItemsOneOf0(value);
}
function _parseReferenceAllOfItemsOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAllOfItemsOneOf1(value: unknown): unknown {
return _parseReferenceAllOfItemsOneOf1(value);
}
function _parseReferenceAllOfItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseOneOfItemsOneOf0(value: unknown): unknown {
return _parseReferenceOneOfItemsOneOf0(value);
}
function _parseReferenceOneOfItemsOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseOneOfItemsOneOf1(value: unknown): unknown {
return _parseReferenceOneOfItemsOneOf1(value);
}
function _parseReferenceOneOfItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAnyOfItemsOneOf0(value: unknown): unknown {
return _parseReferenceAnyOfItemsOneOf0(value);
}
function _parseReferenceAnyOfItemsOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAnyOfItemsOneOf1(value: unknown): unknown {
return _parseReferenceAnyOfItemsOneOf1(value);
}
function _parseReferenceAnyOfItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parsePropertiesPropertiesAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferencePropertiesPropertiesAdditionalPropertiesOneOf0(value);
}
function _parseReferencePropertiesPropertiesAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parsePropertiesPropertiesAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferencePropertiesPropertiesAdditionalPropertiesOneOf1(value);
}
function _parseReferencePropertiesPropertiesAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponseHeadersAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceResponseHeadersAdditionalPropertiesOneOf0(value);
}
function _parseReferenceResponseHeadersAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseHeader(value);
}
export function parseResponseHeadersAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceResponseHeadersAdditionalPropertiesOneOf1(value);
}
function _parseReferenceResponseHeadersAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseLinksAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceLinksAdditionalPropertiesOneOf0(value);
}
function _parseReferenceLinksAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseLink(value);
}
export function parseLinksAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceLinksAdditionalPropertiesOneOf1(value);
}
function _parseReferenceLinksAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseMediaTypeExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceMediaTypeExamplesAdditionalPropertiesOneOf0(value);
}
function _parseReferenceMediaTypeExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseMediaTypeExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceMediaTypeExamplesAdditionalPropertiesOneOf1(value);
}
function _parseReferenceMediaTypeExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseHeaderExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceHeaderExamplesAdditionalPropertiesOneOf0(value);
}
function _parseReferenceHeaderExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseHeaderExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceHeaderExamplesAdditionalPropertiesOneOf1(value);
}
function _parseReferenceHeaderExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parsePathItemParametersItemsOneOf0(value: unknown): unknown {
return _parseReferencePathItemParametersItemsOneOf0(value);
}
function _parseReferencePathItemParametersItemsOneOf0(value: unknown): unknown {
return parseParameter(value);
}
export function parsePathItemParametersItemsOneOf1(value: unknown): unknown {
return _parseReferencePathItemParametersItemsOneOf1(value);
}
function _parseReferencePathItemParametersItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseOperationParametersItemsOneOf0(value: unknown): unknown {
return _parseReferenceOperationParametersItemsOneOf0(value);
}
function _parseReferenceOperationParametersItemsOneOf0(value: unknown): unknown {
return parseParameter(value);
}
export function parseOperationParametersItemsOneOf1(value: unknown): unknown {
return _parseReferenceOperationParametersItemsOneOf1(value);
}
function _parseReferenceOperationParametersItemsOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseCallbacksAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceCallbacksAdditionalPropertiesOneOf0(value);
}
function _parseReferenceCallbacksAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseCallback(value);
}
export function parseCallbacksAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceCallbacksAdditionalPropertiesOneOf1(value);
}
function _parseReferenceCallbacksAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAllOf0Not(value: unknown): unknown {
return _parseMapAllOf0Not(value);
}
function _parseMapAllOf0Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseAllOf1Not(value: unknown): unknown {
return _parseMapAllOf1Not(value);
}
function _parseMapAllOf1Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseAllOf2Not(value: unknown): unknown {
return _parseMapAllOf2Not(value);
}
function _parseMapAllOf2Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseAllOf3Not(value: unknown): unknown {
return _parseMapAllOf3Not(value);
}
function _parseMapAllOf3Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseAllOf4Not(value: unknown): unknown {
return _parseMapAllOf4Not(value);
}
function _parseMapAllOf4Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseParameterExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceParameterExamplesAdditionalPropertiesOneOf0(value);
}
function _parseReferenceParameterExamplesAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseParameterExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceParameterExamplesAdditionalPropertiesOneOf1(value);
}
function _parseReferenceParameterExamplesAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseSchemeNot(value: unknown): unknown {
return _parseStringSchemeNot(value);
}
function _parseStringSchemeNot(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncodingHeadersAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceEncodingHeadersAdditionalPropertiesOneOf0(value);
}
function _parseReferenceEncodingHeadersAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseHeader(value);
}
export function parseEncodingHeadersAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceEncodingHeadersAdditionalPropertiesOneOf1(value);
}
function _parseReferenceEncodingHeadersAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseReference(value);
}
