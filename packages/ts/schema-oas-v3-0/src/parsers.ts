// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
export function parseSchemaDocument(value: unknown): unknown {
return _parseMapSchemaDocument(value);
}
function _parseMapSchemaDocument(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "openapi": {
const propertyValue = parseOpenapi(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "info": {
const propertyValue = parsePropertiesInfo(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parsePropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parsePropertiesServers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parsePropertiesSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tags": {
const propertyValue = parsePropertiesTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "paths": {
const propertyValue = parsePropertiesPaths(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "components": {
const propertyValue = parsePropertiesComponents(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseReference(value: unknown): unknown {
return _parseMapReference(value);
}
function _parseMapReference(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseDefinitionsInfo(value: unknown): unknown {
return _parseMapDefinitionsInfo(value);
}
function _parseMapDefinitionsInfo(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseInfoTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseInfoDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "termsOfService": {
const propertyValue = parseTermsOfService(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "contact": {
const propertyValue = parseInfoContact(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "license": {
const propertyValue = parseInfoLicense(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "version": {
const propertyValue = parseVersion(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseInfoAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsContact(value: unknown): unknown {
return _parseMapDefinitionsContact(value);
}
function _parseMapDefinitionsContact(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseContactName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseContactUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "email": {
const propertyValue = parseEmail(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseContactAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsLicense(value: unknown): unknown {
return _parseMapDefinitionsLicense(value);
}
function _parseMapDefinitionsLicense(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseLicenseName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseLicenseUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseLicenseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsServer(value: unknown): unknown {
return _parseMapDefinitionsServer(value);
}
function _parseMapDefinitionsServer(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "url": {
const propertyValue = parseServerUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseServerDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "variables": {
const propertyValue = parseVariables(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseServerAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseServerVariable(value: unknown): unknown {
return _parseMapServerVariable(value);
}
function _parseMapServerVariable(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "enum": {
const propertyValue = parseServerVariableEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseServerVariableDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseServerVariableDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseServerVariableAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsComponents(value: unknown): unknown {
return _parseMapDefinitionsComponents(value);
}
function _parseMapDefinitionsComponents(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "schemas": {
const propertyValue = parseSchemas(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseComponentsResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseComponentsParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseComponentsExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBodies": {
const propertyValue = parseRequestBodies(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseComponentsHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "securitySchemes": {
const propertyValue = parseSecuritySchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "links": {
const propertyValue = parseComponentsLinks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "callbacks": {
const propertyValue = parseComponentsCallbacks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseComponentsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSchema(value: unknown): unknown {
return _parseMapDefinitionsSchema(value);
}
function _parseMapDefinitionsSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseSchemaTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxProperties": {
const propertyValue = parseMaxProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minProperties": {
const propertyValue = parseMinProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "not": {
const propertyValue = parseSchemaNot(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allOf": {
const propertyValue = parseAllOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "oneOf": {
const propertyValue = parseOneOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "anyOf": {
const propertyValue = parseAnyOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePropertiesSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "properties": {
const propertyValue = parseProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "additionalProperties": {
const propertyValue = parsePropertiesSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "nullable": {
const propertyValue = parseNullable(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "discriminator": {
const propertyValue = parseSchemaDiscriminator(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "writeOnly": {
const propertyValue = parseWriteOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseSchemaExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchemaExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseSchemaDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "xml": {
const propertyValue = parseSchemaXml(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsDiscriminator(value: unknown): unknown {
return _parseMapDefinitionsDiscriminator(value);
}
function _parseMapDefinitionsDiscriminator(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "propertyName": {
const propertyValue = parsePropertyName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "mapping": {
const propertyValue = parseMapping(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseDefinitionsXml(value: unknown): unknown {
return _parseMapDefinitionsXml(value);
}
function _parseMapDefinitionsXml(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseXmlName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "namespace": {
const propertyValue = parseNamespace(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "prefix": {
const propertyValue = parsePrefix(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "attribute": {
const propertyValue = parseAttribute(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "wrapped": {
const propertyValue = parseWrapped(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseXmlAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponse(value: unknown): unknown {
return _parseMapResponse(value);
}
function _parseMapResponse(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseResponseDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseResponseHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseResponseContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "links": {
const propertyValue = parseResponseLinks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaType(value: unknown): unknown {
return _parseMapMediaType(value) ?? _parseAllOfMediaType(value);
}
function _parseMapMediaType(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "schema": {
const propertyValue = parseMediaTypeSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseMediaTypeExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseMediaTypeExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "encoding": {
const propertyValue = parseMediaTypeEncoding(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsMediaTypeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfMediaType(value: unknown): unknown {
return parseAllOfMediaType0(value);
}
export function parseDefinitionsExample(value: unknown): unknown {
return _parseMapDefinitionsExample(value);
}
function _parseMapDefinitionsExample(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "summary": {
const propertyValue = parseExampleSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseExampleDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "value": {
const propertyValue = parseValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalValue": {
const propertyValue = parseExternalValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExampleAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeader(value: unknown): unknown {
return _parseMapHeader(value) ?? _parseAllOfHeader(value);
}
function _parseMapHeader(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseHeaderDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseHeaderRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseHeaderDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseHeaderAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseHeaderStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseHeaderExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseHeaderAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseHeaderSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseHeaderContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseHeaderExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseHeaderExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfHeader(value: unknown): unknown {
return parseHeaderAllOf0(value) ?? parseHeaderAllOf1(value);
}
export function parseDefinitionsPaths(value: unknown): unknown {
return _parseMapDefinitionsPaths(value);
}
function _parseMapDefinitionsPaths(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePathsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathItem(value: unknown): unknown {
return _parseMapPathItem(value);
}
function _parseMapPathItem(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parsePathItemRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parsePathItemSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parsePathItemDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parsePathItemServers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parsePathItemParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathItemAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOperation(value: unknown): unknown {
return _parseMapOperation(value);
}
function _parseMapOperation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tags": {
const propertyValue = parseOperationTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parseOperationSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOperationDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseOperationExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationId": {
const propertyValue = parseOperationOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseOperationParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBody": {
const propertyValue = parseOperationRequestBody(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseOperationResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "callbacks": {
const propertyValue = parseOperationCallbacks(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseOperationDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseOperationSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "servers": {
const propertyValue = parseOperationServers(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOperationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsResponses(value: unknown): unknown {
return _parseMapDefinitionsResponses(value);
}
function _parseMapDefinitionsResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "default": {
const propertyValue = parseResponsesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponsesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSecurityRequirement(value: unknown): unknown {
return _parseMapSecurityRequirement(value);
}
function _parseMapSecurityRequirement(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityRequirementAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseTag(value: unknown): unknown {
return _parseMapTag(value);
}
function _parseMapTag(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseTagName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseTagDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseTagExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseTagAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseExternalDocumentation(value: unknown): unknown {
return _parseMapExternalDocumentation(value);
}
function _parseMapExternalDocumentation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseExternalDocumentationDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseExternalDocumentationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExternalDocumentationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseExampleXorExamples(value: unknown): unknown {
return _parseNotExampleXorExamples(value);
}
function _parseNotExampleXorExamples(value: unknown): unknown {
return parseExampleXorExamplesNot(value);
}
export function parseSchemaXorContent(value: unknown): unknown {
return _parseOneOfSchemaXorContent(value) ?? _parseNotSchemaXorContent(value);
}
function _parseOneOfSchemaXorContent(value: unknown): unknown {
return parseOneOfSchemaXorContent0(value) ?? parseOneOfSchemaXorContent1(value);
}
function _parseNotSchemaXorContent(value: unknown): unknown {
return parseDefinitionsSchemaXorContentNot(value);
}
export function parseParameter(value: unknown): unknown {
return _parseMapParameter(value) ?? _parseAllOfParameter(value);
}
function _parseMapParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseParameterName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseParameterIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseParameterDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseParameterRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseParameterDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseParameterAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseParameterStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseParameterExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseParameterAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseParameterSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseParameterContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseParameterExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseParameterExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseParameterAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseAllOfParameter(value: unknown): unknown {
return parseParameterAllOf0(value) ?? parseParameterAllOf1(value) ?? parseAllOf2(value);
}
export function parseParameterLocation(value: unknown): unknown {
return _parseOneOfParameterLocation(value);
}
function _parseOneOfParameterLocation(value: unknown): unknown {
return parseParameterLocation0(value) ?? parseParameterLocation1(value) ?? parseParameterLocation2(value) ?? parseParameterLocation3(value);
}
export function parseDefinitionsRequestBody(value: unknown): unknown {
return _parseMapDefinitionsRequestBody(value);
}
function _parseMapDefinitionsRequestBody(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseRequestBodyDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "content": {
const propertyValue = parseRequestBodyContent(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseRequestBodyRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseRequestBodyAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSecurityScheme(value: unknown): unknown {
return _parseOneOfSecurityScheme(value);
}
function _parseOneOfSecurityScheme(value: unknown): unknown {
return parseSecurityScheme0(value) ?? parseSecurityScheme1(value) ?? parseSecurityScheme2(value) ?? parseSecurityScheme3(value);
}
export function parseApiKeySecurityScheme(value: unknown): unknown {
return _parseMapApiKeySecurityScheme(value);
}
function _parseMapApiKeySecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseApiKeySecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseApiKeySecuritySchemeName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseApiKeySecuritySchemeIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseApiKeySecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseApiKeySecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHttpSecurityScheme(value: unknown): unknown {
return _parseMapHttpSecurityScheme(value) ?? _parseOneOfHttpSecurityScheme(value);
}
function _parseMapHttpSecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parsePropertiesHttpSecuritySchemeScheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "bearerFormat": {
const propertyValue = parseBearerFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHttpSecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseHttpSecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHttpSecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseOneOfHttpSecurityScheme(value: unknown): unknown {
return parseHttpSecurityScheme0(value) ?? parseHttpSecurityScheme1(value);
}
export function parseOauth2SecurityScheme(value: unknown): unknown {
return _parseMapOauth2SecurityScheme(value);
}
function _parseMapOauth2SecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2SecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flows": {
const propertyValue = parseFlows(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2SecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2SecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOpenIdConnectSecurityScheme(value: unknown): unknown {
return _parseMapOpenIdConnectSecurityScheme(value);
}
function _parseMapOpenIdConnectSecurityScheme(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOpenIdConnectSecuritySchemeType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "openIdConnectUrl": {
const propertyValue = parseOpenIdConnectUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOpenIdConnectSecuritySchemeDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOpenIdConnectSecuritySchemeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauthFlows(value: unknown): unknown {
return _parseMapOauthFlows(value);
}
function _parseMapOauthFlows(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "implicit": {
const propertyValue = parseImplicit(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "password": {
const propertyValue = parsePassword(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "clientCredentials": {
const propertyValue = parseClientCredentials(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationCode": {
const propertyValue = parseAuthorizationCode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauthFlowsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseImplicitOauthFlow(value: unknown): unknown {
return _parseMapImplicitOauthFlow(value);
}
function _parseMapImplicitOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "authorizationUrl": {
const propertyValue = parseImplicitOauthFlowAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseImplicitOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseImplicitOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsImplicitOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePasswordOauthFlow(value: unknown): unknown {
return _parseMapPasswordOauthFlow(value);
}
function _parseMapPasswordOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tokenUrl": {
const propertyValue = parsePasswordOauthFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parsePasswordOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parsePasswordOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsPasswordOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseClientCredentialsFlow(value: unknown): unknown {
return _parseMapClientCredentialsFlow(value);
}
function _parseMapClientCredentialsFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tokenUrl": {
const propertyValue = parseClientCredentialsFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseClientCredentialsFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseClientCredentialsFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsClientCredentialsFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseAuthorizationCodeOauthFlow(value: unknown): unknown {
return _parseMapAuthorizationCodeOauthFlow(value);
}
function _parseMapAuthorizationCodeOauthFlow(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "authorizationUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "refreshUrl": {
const propertyValue = parseAuthorizationCodeOauthFlowRefreshUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseAuthorizationCodeOauthFlowScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseLink(value: unknown): unknown {
return _parseMapLink(value) ?? _parseNotLink(value);
}
function _parseMapLink(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "operationId": {
const propertyValue = parseLinkOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationRef": {
const propertyValue = parseOperationRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseLinkParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "requestBody": {
const propertyValue = parseLinkRequestBody(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseLinkDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "server": {
const propertyValue = parseLinkServer(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsLinkAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseNotLink(value: unknown): unknown {
return parseLinkNot(value);
}
export function parseCallback(value: unknown): unknown {
return _parseMapCallback(value);
}
function _parseMapCallback(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseCallbackAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsEncoding(value: unknown): unknown {
return _parseMapDefinitionsEncoding(value);
}
function _parseMapDefinitionsEncoding(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "contentType": {
const propertyValue = parseContentType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseEncodingHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseEncodingStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "explode": {
const propertyValue = parseEncodingExplode(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowReserved": {
const propertyValue = parseEncodingAllowReserved(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsEncodingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOpenapi(value: unknown): unknown {
return _parseStringOpenapi(value);
}
function _parseStringOpenapi(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesInfo(value: unknown): unknown {
return _parseReferencePropertiesInfo(value);
}
function _parseReferencePropertiesInfo(value: unknown): unknown {
return parseDefinitionsInfo(value);
}
export function parsePropertiesExternalDocs(value: unknown): unknown {
return _parseReferencePropertiesExternalDocs(value);
}
function _parseReferencePropertiesExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parsePropertiesServers(value: unknown): unknown {
return _parseArrayPropertiesServers(value);
}
function _parseArrayPropertiesServers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePropertiesServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesSecurity(value: unknown): unknown {
return _parseArrayPropertiesSecurity(value);
}
function _parseArrayPropertiesSecurity(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePropertiesSecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesTags(value: unknown): unknown {
return _parseArrayPropertiesTags(value);
}
function _parseArrayPropertiesTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePropertiesTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesPaths(value: unknown): unknown {
return _parseReferencePropertiesPaths(value);
}
function _parseReferencePropertiesPaths(value: unknown): unknown {
return parseDefinitionsPaths(value);
}
export function parsePropertiesComponents(value: unknown): unknown {
return _parseReferencePropertiesComponents(value);
}
function _parseReferencePropertiesComponents(value: unknown): unknown {
return parseDefinitionsComponents(value);
}
export function parseAdditionalProperties(value: unknown): unknown {
return _parseNeverAdditionalProperties(value);
}
function _parseNeverAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePatternPropertiesX(value: unknown): unknown {
return ;
}
export function parseReferenceRef(value: unknown): unknown {
return _parseStringReferenceRef(value);
}
function _parseStringReferenceRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoTitle(value: unknown): unknown {
return _parseStringInfoTitle(value);
}
function _parseStringInfoTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoDescription(value: unknown): unknown {
return _parseStringInfoDescription(value);
}
function _parseStringInfoDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTermsOfService(value: unknown): unknown {
return _parseStringTermsOfService(value);
}
function _parseStringTermsOfService(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoContact(value: unknown): unknown {
return _parseReferenceInfoContact(value);
}
function _parseReferenceInfoContact(value: unknown): unknown {
return parseDefinitionsContact(value);
}
export function parseInfoLicense(value: unknown): unknown {
return _parseReferenceInfoLicense(value);
}
function _parseReferenceInfoLicense(value: unknown): unknown {
return parseDefinitionsLicense(value);
}
export function parseVersion(value: unknown): unknown {
return _parseStringVersion(value);
}
function _parseStringVersion(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoAdditionalProperties(value: unknown): unknown {
return _parseNeverInfoAdditionalProperties(value);
}
function _parseNeverInfoAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseInfoX(value: unknown): unknown {
return ;
}
export function parseContactName(value: unknown): unknown {
return _parseStringContactName(value);
}
function _parseStringContactName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactUrl(value: unknown): unknown {
return _parseStringContactUrl(value);
}
function _parseStringContactUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEmail(value: unknown): unknown {
return _parseStringEmail(value);
}
function _parseStringEmail(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactAdditionalProperties(value: unknown): unknown {
return _parseNeverContactAdditionalProperties(value);
}
function _parseNeverContactAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseContactX(value: unknown): unknown {
return ;
}
export function parseLicenseName(value: unknown): unknown {
return _parseStringLicenseName(value);
}
function _parseStringLicenseName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseUrl(value: unknown): unknown {
return _parseStringLicenseUrl(value);
}
function _parseStringLicenseUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseAdditionalProperties(value: unknown): unknown {
return _parseNeverLicenseAdditionalProperties(value);
}
function _parseNeverLicenseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLicenseX(value: unknown): unknown {
return ;
}
export function parseServerUrl(value: unknown): unknown {
return _parseStringServerUrl(value);
}
function _parseStringServerUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerDescription(value: unknown): unknown {
return _parseStringServerDescription(value);
}
function _parseStringServerDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseVariables(value: unknown): unknown {
return _parseMapVariables(value);
}
function _parseMapVariables(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseVariablesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseServerAdditionalProperties(value: unknown): unknown {
return _parseNeverServerAdditionalProperties(value);
}
function _parseNeverServerAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseServerX(value: unknown): unknown {
return ;
}
export function parseServerVariableEnum(value: unknown): unknown {
return _parseArrayServerVariableEnum(value);
}
function _parseArrayServerVariableEnum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseServerVariableEnumItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseServerVariableDefault(value: unknown): unknown {
return _parseStringServerVariableDefault(value);
}
function _parseStringServerVariableDefault(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerVariableDescription(value: unknown): unknown {
return _parseStringServerVariableDescription(value);
}
function _parseStringServerVariableDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseServerVariableAdditionalProperties(value: unknown): unknown {
return _parseNeverServerVariableAdditionalProperties(value);
}
function _parseNeverServerVariableAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseServerVariableX(value: unknown): unknown {
return ;
}
export function parseSchemas(value: unknown): unknown {
return _parseMapSchemas(value);
}
function _parseMapSchemas(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsResponses(value: unknown): unknown {
return _parseMapComponentsResponses(value);
}
function _parseMapComponentsResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsParameters(value: unknown): unknown {
return _parseMapComponentsParameters(value);
}
function _parseMapComponentsParameters(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsExamples(value: unknown): unknown {
return _parseMapComponentsExamples(value);
}
function _parseMapComponentsExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseRequestBodies(value: unknown): unknown {
return _parseMapRequestBodies(value);
}
function _parseMapRequestBodies(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsHeaders(value: unknown): unknown {
return _parseMapComponentsHeaders(value);
}
function _parseMapComponentsHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSecuritySchemes(value: unknown): unknown {
return _parseMapSecuritySchemes(value);
}
function _parseMapSecuritySchemes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsLinks(value: unknown): unknown {
return _parseMapComponentsLinks(value);
}
function _parseMapComponentsLinks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsCallbacks(value: unknown): unknown {
return _parseMapComponentsCallbacks(value);
}
function _parseMapComponentsCallbacks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseComponentsAdditionalProperties(value: unknown): unknown {
return _parseNeverComponentsAdditionalProperties(value);
}
function _parseNeverComponentsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseComponentsX(value: unknown): unknown {
return ;
}
export function parseSchemaTitle(value: unknown): unknown {
return _parseStringSchemaTitle(value);
}
function _parseStringSchemaTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMultipleOf(value: unknown): unknown {
return _parseNumberMultipleOf(value);
}
function _parseNumberMultipleOf(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMaximum(value: unknown): unknown {
return _parseNumberMaximum(value);
}
function _parseNumberMaximum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseExclusiveMaximum(value: unknown): unknown {
return _parseBooleanExclusiveMaximum(value);
}
function _parseBooleanExclusiveMaximum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMinimum(value: unknown): unknown {
return _parseNumberMinimum(value);
}
function _parseNumberMinimum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseExclusiveMinimum(value: unknown): unknown {
return _parseBooleanExclusiveMinimum(value);
}
function _parseBooleanExclusiveMinimum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMaxLength(value: unknown): unknown {
return _parseIntegerMaxLength(value);
}
function _parseIntegerMaxLength(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinLength(value: unknown): unknown {
return _parseIntegerMinLength(value);
}
function _parseIntegerMinLength(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parsePattern(value: unknown): unknown {
return _parseStringPattern(value);
}
function _parseStringPattern(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMaxItems(value: unknown): unknown {
return _parseIntegerMaxItems(value);
}
function _parseIntegerMaxItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinItems(value: unknown): unknown {
return _parseIntegerMinItems(value);
}
function _parseIntegerMinItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseUniqueItems(value: unknown): unknown {
return _parseBooleanUniqueItems(value);
}
function _parseBooleanUniqueItems(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMaxProperties(value: unknown): unknown {
return _parseIntegerMaxProperties(value);
}
function _parseIntegerMaxProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseMinProperties(value: unknown): unknown {
return _parseIntegerMinProperties(value);
}
function _parseIntegerMinProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseSchemaRequired(value: unknown): unknown {
return _parseArraySchemaRequired(value);
}
function _parseArraySchemaRequired(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseRequiredItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemaEnum(value: unknown): unknown {
return _parseArraySchemaEnum(value);
}
function _parseArraySchemaEnum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchemaEnumItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemaType(value: unknown): unknown {
return _parseStringSchemaType(value);
}
function _parseStringSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaNot(value: unknown): unknown {
return _parseOneOfSchemaNot(value);
}
function _parseOneOfSchemaNot(value: unknown): unknown {
return parseNot0(value) ?? parseNot1(value);
}
export function parseAllOf(value: unknown): unknown {
return _parseArrayAllOf(value);
}
function _parseArrayAllOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAllOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOneOf(value: unknown): unknown {
return _parseArrayOneOf(value);
}
function _parseArrayOneOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOneOfSchemaItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAnyOf(value: unknown): unknown {
return _parseArrayAnyOf(value);
}
function _parseArrayAnyOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAnyOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesSchemaItems(value: unknown): unknown {
return _parseOneOfPropertiesSchemaItems(value);
}
function _parseOneOfPropertiesSchemaItems(value: unknown): unknown {
return parseItems0(value) ?? parseItems1(value);
}
export function parseProperties(value: unknown): unknown {
return _parseMapProperties(value);
}
function _parseMapProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePropertiesSchemaAdditionalProperties(value: unknown): unknown {
return _parseOneOfPropertiesSchemaAdditionalProperties(value);
}
function _parseOneOfPropertiesSchemaAdditionalProperties(value: unknown): unknown {
return parseSchema0(value) ?? parseSchema1(value) ?? parseSchema2(value);
}
export function parseSchemaDescription(value: unknown): unknown {
return _parseStringSchemaDescription(value);
}
function _parseStringSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormat(value: unknown): unknown {
return _parseStringFormat(value);
}
function _parseStringFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaDefault(value: unknown): unknown {
return ;
}
export function parseNullable(value: unknown): unknown {
return _parseBooleanNullable(value);
}
function _parseBooleanNullable(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseSchemaDiscriminator(value: unknown): unknown {
return _parseReferenceSchemaDiscriminator(value);
}
function _parseReferenceSchemaDiscriminator(value: unknown): unknown {
return parseDefinitionsDiscriminator(value);
}
export function parseReadOnly(value: unknown): unknown {
return _parseBooleanReadOnly(value);
}
function _parseBooleanReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWriteOnly(value: unknown): unknown {
return _parseBooleanWriteOnly(value);
}
function _parseBooleanWriteOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseSchemaExample(value: unknown): unknown {
return ;
}
export function parseSchemaExternalDocs(value: unknown): unknown {
return _parseReferenceSchemaExternalDocs(value);
}
function _parseReferenceSchemaExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseSchemaDeprecated(value: unknown): unknown {
return _parseBooleanSchemaDeprecated(value);
}
function _parseBooleanSchemaDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseSchemaXml(value: unknown): unknown {
return _parseReferenceSchemaXml(value);
}
function _parseReferenceSchemaXml(value: unknown): unknown {
return parseDefinitionsXml(value);
}
export function parseDefinitionsSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsSchemaAdditionalProperties(value);
}
function _parseNeverDefinitionsSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaPatternPropertiesX(value: unknown): unknown {
return ;
}
export function parsePropertyName(value: unknown): unknown {
return _parseStringPropertyName(value);
}
function _parseStringPropertyName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMapping(value: unknown): unknown {
return _parseMapMapping(value);
}
function _parseMapMapping(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseMappingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseXmlName(value: unknown): unknown {
return _parseStringXmlName(value);
}
function _parseStringXmlName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseNamespace(value: unknown): unknown {
return _parseStringNamespace(value);
}
function _parseStringNamespace(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrefix(value: unknown): unknown {
return _parseStringPrefix(value);
}
function _parseStringPrefix(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAttribute(value: unknown): unknown {
return _parseBooleanAttribute(value);
}
function _parseBooleanAttribute(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWrapped(value: unknown): unknown {
return _parseBooleanWrapped(value);
}
function _parseBooleanWrapped(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseXmlAdditionalProperties(value: unknown): unknown {
return _parseNeverXmlAdditionalProperties(value);
}
function _parseNeverXmlAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseXmlX(value: unknown): unknown {
return ;
}
export function parseResponseDescription(value: unknown): unknown {
return _parseStringResponseDescription(value);
}
function _parseStringResponseDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseResponseHeaders(value: unknown): unknown {
return _parseMapResponseHeaders(value);
}
function _parseMapResponseHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeadersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseContent(value: unknown): unknown {
return _parseMapResponseContent(value);
}
function _parseMapResponseContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponseContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseLinks(value: unknown): unknown {
return _parseMapResponseLinks(value);
}
function _parseMapResponseLinks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseLinksAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseAdditionalProperties(value: unknown): unknown {
return _parseNeverResponseAdditionalProperties(value);
}
function _parseNeverResponseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponseX(value: unknown): unknown {
return ;
}
export function parseMediaTypeSchema(value: unknown): unknown {
return _parseOneOfMediaTypeSchema(value);
}
function _parseOneOfMediaTypeSchema(value: unknown): unknown {
return parseSchemaMediaType0(value) ?? parseSchemaMediaType1(value);
}
export function parseMediaTypeExample(value: unknown): unknown {
return ;
}
export function parseMediaTypeExamples(value: unknown): unknown {
return _parseMapMediaTypeExamples(value);
}
function _parseMapMediaTypeExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseExamplesMediaTypeAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaTypeEncoding(value: unknown): unknown {
return _parseMapMediaTypeEncoding(value);
}
function _parseMapMediaTypeEncoding(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseMediaTypeEncodingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsMediaTypeAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsMediaTypeAdditionalProperties(value);
}
function _parseNeverDefinitionsMediaTypeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseMediaTypeX(value: unknown): unknown {
return ;
}
export function parseAllOfMediaType0(value: unknown): unknown {
return _parseReferenceAllOfMediaType0(value);
}
function _parseReferenceAllOfMediaType0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseExampleSummary(value: unknown): unknown {
return _parseStringExampleSummary(value);
}
function _parseStringExampleSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExampleDescription(value: unknown): unknown {
return _parseStringExampleDescription(value);
}
function _parseStringExampleDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseValue(value: unknown): unknown {
return ;
}
export function parseExternalValue(value: unknown): unknown {
return _parseStringExternalValue(value);
}
function _parseStringExternalValue(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExampleAdditionalProperties(value: unknown): unknown {
return _parseNeverExampleAdditionalProperties(value);
}
function _parseNeverExampleAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExampleX(value: unknown): unknown {
return ;
}
export function parseHeaderDescription(value: unknown): unknown {
return _parseStringHeaderDescription(value);
}
function _parseStringHeaderDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderRequired(value: unknown): unknown {
return _parseBooleanHeaderRequired(value);
}
function _parseBooleanHeaderRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderDeprecated(value: unknown): unknown {
return _parseBooleanHeaderDeprecated(value);
}
function _parseBooleanHeaderDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderAllowEmptyValue(value: unknown): unknown {
return _parseBooleanHeaderAllowEmptyValue(value);
}
function _parseBooleanHeaderAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderStyle(value: unknown): unknown {
return _parseStringHeaderStyle(value);
}
function _parseStringHeaderStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderExplode(value: unknown): unknown {
return _parseBooleanHeaderExplode(value);
}
function _parseBooleanHeaderExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderAllowReserved(value: unknown): unknown {
return _parseBooleanHeaderAllowReserved(value);
}
function _parseBooleanHeaderAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderSchema(value: unknown): unknown {
return _parseOneOfHeaderSchema(value);
}
function _parseOneOfHeaderSchema(value: unknown): unknown {
return parseHeader0(value) ?? parseHeader1(value);
}
export function parseHeaderContent(value: unknown): unknown {
return _parseMapHeaderContent(value);
}
function _parseMapHeaderContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeaderContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderExample(value: unknown): unknown {
return ;
}
export function parseHeaderExamples(value: unknown): unknown {
return _parseMapHeaderExamples(value);
}
function _parseMapHeaderExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeaderExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderAdditionalProperties(value);
}
function _parseNeverHeaderAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderX(value: unknown): unknown {
return ;
}
export function parseHeaderAllOf0(value: unknown): unknown {
return _parseReferenceHeaderAllOf0(value);
}
function _parseReferenceHeaderAllOf0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseHeaderAllOf1(value: unknown): unknown {
return _parseReferenceHeaderAllOf1(value);
}
function _parseReferenceHeaderAllOf1(value: unknown): unknown {
return parseSchemaXorContent(value);
}
export function parsePathsAdditionalProperties(value: unknown): unknown {
return _parseNeverPathsAdditionalProperties(value);
}
function _parseNeverPathsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePatternProperties(value: unknown): unknown {
return _parseReferencePatternProperties(value);
}
function _parseReferencePatternProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parsePathsX(value: unknown): unknown {
return ;
}
export function parsePathItemRef(value: unknown): unknown {
return _parseStringPathItemRef(value);
}
function _parseStringPathItemRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemSummary(value: unknown): unknown {
return _parseStringPathItemSummary(value);
}
function _parseStringPathItemSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemDescription(value: unknown): unknown {
return _parseStringPathItemDescription(value);
}
function _parseStringPathItemDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathItemServers(value: unknown): unknown {
return _parseArrayPathItemServers(value);
}
function _parseArrayPathItemServers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePathItemServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePathItemParameters(value: unknown): unknown {
return _parseArrayPathItemParameters(value);
}
function _parseArrayPathItemParameters(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePathItemItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePathItemAdditionalProperties(value: unknown): unknown {
return _parseNeverPathItemAdditionalProperties(value);
}
function _parseNeverPathItemAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseGetPutPostDeleteOptionsHeadPatchTrace(value: unknown): unknown {
return _parseReferenceGetPutPostDeleteOptionsHeadPatchTrace(value);
}
function _parseReferenceGetPutPostDeleteOptionsHeadPatchTrace(value: unknown): unknown {
return parseOperation(value);
}
export function parsePathItemX(value: unknown): unknown {
return ;
}
export function parseOperationTags(value: unknown): unknown {
return _parseArrayOperationTags(value);
}
function _parseArrayOperationTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationSummary(value: unknown): unknown {
return _parseStringOperationSummary(value);
}
function _parseStringOperationSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationDescription(value: unknown): unknown {
return _parseStringOperationDescription(value);
}
function _parseStringOperationDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationExternalDocs(value: unknown): unknown {
return _parseReferenceOperationExternalDocs(value);
}
function _parseReferenceOperationExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseOperationOperationId(value: unknown): unknown {
return _parseStringOperationOperationId(value);
}
function _parseStringOperationOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationParameters(value: unknown): unknown {
return _parseArrayOperationParameters(value);
}
function _parseArrayOperationParameters(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseParametersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationRequestBody(value: unknown): unknown {
return _parseOneOfOperationRequestBody(value);
}
function _parseOneOfOperationRequestBody(value: unknown): unknown {
return parseRequestBody0(value) ?? parseRequestBody1(value);
}
export function parseOperationResponses(value: unknown): unknown {
return _parseReferenceOperationResponses(value);
}
function _parseReferenceOperationResponses(value: unknown): unknown {
return parseDefinitionsResponses(value);
}
export function parseOperationCallbacks(value: unknown): unknown {
return _parseMapOperationCallbacks(value);
}
function _parseMapOperationCallbacks(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseCallbacksAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOperationDeprecated(value: unknown): unknown {
return _parseBooleanOperationDeprecated(value);
}
function _parseBooleanOperationDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOperationSecurity(value: unknown): unknown {
return _parseArrayOperationSecurity(value);
}
function _parseArrayOperationSecurity(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationSecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationServers(value: unknown): unknown {
return _parseArrayOperationServers(value);
}
function _parseArrayOperationServers(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationServersItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseOperationAdditionalProperties(value: unknown): unknown {
return _parseNeverOperationAdditionalProperties(value);
}
function _parseNeverOperationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOperationX(value: unknown): unknown {
return ;
}
export function parseResponsesDefault(value: unknown): unknown {
return _parseOneOfResponsesDefault(value);
}
function _parseOneOfResponsesDefault(value: unknown): unknown {
return parseDefault0(value) ?? parseDefault1(value);
}
export function parseResponsesAdditionalProperties(value: unknown): unknown {
return _parseNeverResponsesAdditionalProperties(value);
}
function _parseNeverResponsesAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponses15D2Xx(value: unknown): unknown {
return _parseOneOfResponses15D2Xx(value);
}
function _parseOneOfResponses15D2Xx(value: unknown): unknown {
return parseResponses15D2Xx0(value) ?? parseResponses15D2Xx1(value);
}
export function parseResponsesX(value: unknown): unknown {
return ;
}
export function parseSecurityRequirementAdditionalProperties(value: unknown): unknown {
return _parseArraySecurityRequirementAdditionalProperties(value);
}
function _parseArraySecurityRequirementAdditionalProperties(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSecurityRequirementItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseTagName(value: unknown): unknown {
return _parseStringTagName(value);
}
function _parseStringTagName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagDescription(value: unknown): unknown {
return _parseStringTagDescription(value);
}
function _parseStringTagDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagExternalDocs(value: unknown): unknown {
return _parseReferenceTagExternalDocs(value);
}
function _parseReferenceTagExternalDocs(value: unknown): unknown {
return parseExternalDocumentation(value);
}
export function parseTagAdditionalProperties(value: unknown): unknown {
return _parseNeverTagAdditionalProperties(value);
}
function _parseNeverTagAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseTagX(value: unknown): unknown {
return ;
}
export function parseExternalDocumentationDescription(value: unknown): unknown {
return _parseStringExternalDocumentationDescription(value);
}
function _parseStringExternalDocumentationDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocumentationUrl(value: unknown): unknown {
return _parseStringExternalDocumentationUrl(value);
}
function _parseStringExternalDocumentationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocumentationAdditionalProperties(value: unknown): unknown {
return _parseNeverExternalDocumentationAdditionalProperties(value);
}
function _parseNeverExternalDocumentationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExternalDocumentationX(value: unknown): unknown {
return ;
}
export function parseExampleXorExamplesNot(value: unknown): unknown {
return _parseMapExampleXorExamplesNot(value);
}
function _parseMapExampleXorExamplesNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseOneOfSchemaXorContent0(value: unknown): unknown {
return _parseMapOneOfSchemaXorContent0(value);
}
function _parseMapOneOfSchemaXorContent0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseOneOfSchemaXorContent1(value: unknown): unknown {
return _parseMapOneOfSchemaXorContent1(value) ?? _parseAllOfOneOfSchemaXorContent1(value);
}
function _parseMapOneOfSchemaXorContent1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
function _parseAllOfOneOfSchemaXorContent1(value: unknown): unknown {
return parseAllOfSchemaXorContent0(value) ?? parseAllOfSchemaXorContent1(value) ?? parseSchemaXorContent2(value) ?? parseSchemaXorContent3(value) ?? parseSchemaXorContent4(value);
}
export function parseDefinitionsSchemaXorContentNot(value: unknown): unknown {
return _parseMapDefinitionsSchemaXorContentNot(value);
}
function _parseMapDefinitionsSchemaXorContentNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseParameterName(value: unknown): unknown {
return _parseStringParameterName(value);
}
function _parseStringParameterName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterIn(value: unknown): unknown {
return _parseStringParameterIn(value);
}
function _parseStringParameterIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterDescription(value: unknown): unknown {
return _parseStringParameterDescription(value);
}
function _parseStringParameterDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterRequired(value: unknown): unknown {
return _parseBooleanParameterRequired(value);
}
function _parseBooleanParameterRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterDeprecated(value: unknown): unknown {
return _parseBooleanParameterDeprecated(value);
}
function _parseBooleanParameterDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterAllowEmptyValue(value: unknown): unknown {
return _parseBooleanParameterAllowEmptyValue(value);
}
function _parseBooleanParameterAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterStyle(value: unknown): unknown {
return _parseStringParameterStyle(value);
}
function _parseStringParameterStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterExplode(value: unknown): unknown {
return _parseBooleanParameterExplode(value);
}
function _parseBooleanParameterExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterAllowReserved(value: unknown): unknown {
return _parseBooleanParameterAllowReserved(value);
}
function _parseBooleanParameterAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseParameterSchema(value: unknown): unknown {
return _parseOneOfParameterSchema(value);
}
function _parseOneOfParameterSchema(value: unknown): unknown {
return parseParameter0(value) ?? parseParameter1(value);
}
export function parseParameterContent(value: unknown): unknown {
return _parseMapParameterContent(value);
}
function _parseMapParameterContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterExample(value: unknown): unknown {
return ;
}
export function parseParameterExamples(value: unknown): unknown {
return _parseMapParameterExamples(value);
}
function _parseMapParameterExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterAdditionalProperties(value: unknown): unknown {
return _parseNeverParameterAdditionalProperties(value);
}
function _parseNeverParameterAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseParameterX(value: unknown): unknown {
return ;
}
export function parseParameterAllOf0(value: unknown): unknown {
return _parseReferenceParameterAllOf0(value);
}
function _parseReferenceParameterAllOf0(value: unknown): unknown {
return parseExampleXorExamples(value);
}
export function parseParameterAllOf1(value: unknown): unknown {
return _parseReferenceParameterAllOf1(value);
}
function _parseReferenceParameterAllOf1(value: unknown): unknown {
return parseSchemaXorContent(value);
}
export function parseAllOf2(value: unknown): unknown {
return _parseReferenceAllOf2(value);
}
function _parseReferenceAllOf2(value: unknown): unknown {
return parseParameterLocation(value);
}
export function parseParameterLocation0(value: unknown): unknown {
return _parseMapParameterLocation0(value);
}
function _parseMapParameterLocation0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf0ParameterLocationIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf0ParameterLocationStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseParameterLocationRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocation1(value: unknown): unknown {
return _parseMapParameterLocation1(value);
}
function _parseMapParameterLocation1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseOneOf1ParameterLocationIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseOneOf1ParameterLocationStyle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocation2(value: unknown): unknown {
return _parseMapParameterLocation2(value);
}
function _parseMapParameterLocation2(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseParameterLocation2In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseParameterLocation2Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseParameterLocation3(value: unknown): unknown {
return _parseMapParameterLocation3(value);
}
function _parseMapParameterLocation3(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "in": {
const propertyValue = parseParameterLocation3In(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "style": {
const propertyValue = parseParameterLocation3Style(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseRequestBodyDescription(value: unknown): unknown {
return _parseStringRequestBodyDescription(value);
}
function _parseStringRequestBodyDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseRequestBodyContent(value: unknown): unknown {
return _parseMapRequestBodyContent(value);
}
function _parseMapRequestBodyContent(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseRequestBodyContentAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseRequestBodyRequired(value: unknown): unknown {
return _parseBooleanRequestBodyRequired(value);
}
function _parseBooleanRequestBodyRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseRequestBodyAdditionalProperties(value: unknown): unknown {
return _parseNeverRequestBodyAdditionalProperties(value);
}
function _parseNeverRequestBodyAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseRequestBodyX(value: unknown): unknown {
return ;
}
export function parseSecurityScheme0(value: unknown): unknown {
return _parseReferenceSecurityScheme0(value);
}
function _parseReferenceSecurityScheme0(value: unknown): unknown {
return parseApiKeySecurityScheme(value);
}
export function parseSecurityScheme1(value: unknown): unknown {
return _parseReferenceSecurityScheme1(value);
}
function _parseReferenceSecurityScheme1(value: unknown): unknown {
return parseHttpSecurityScheme(value);
}
export function parseSecurityScheme2(value: unknown): unknown {
return _parseReferenceSecurityScheme2(value);
}
function _parseReferenceSecurityScheme2(value: unknown): unknown {
return parseOauth2SecurityScheme(value);
}
export function parseSecurityScheme3(value: unknown): unknown {
return _parseReferenceSecurityScheme3(value);
}
function _parseReferenceSecurityScheme3(value: unknown): unknown {
return parseOpenIdConnectSecurityScheme(value);
}
export function parseApiKeySecuritySchemeType(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeType(value);
}
function _parseStringApiKeySecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeName(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeName(value);
}
function _parseStringApiKeySecuritySchemeName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeIn(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeIn(value);
}
function _parseStringApiKeySecuritySchemeIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeDescription(value: unknown): unknown {
return _parseStringApiKeySecuritySchemeDescription(value);
}
function _parseStringApiKeySecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverApiKeySecuritySchemeAdditionalProperties(value);
}
function _parseNeverApiKeySecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseApiKeySecuritySchemeX(value: unknown): unknown {
return ;
}
export function parsePropertiesHttpSecuritySchemeScheme(value: unknown): unknown {
return _parseStringPropertiesHttpSecuritySchemeScheme(value);
}
function _parseStringPropertiesHttpSecuritySchemeScheme(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBearerFormat(value: unknown): unknown {
return _parseStringBearerFormat(value);
}
function _parseStringBearerFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeDescription(value: unknown): unknown {
return _parseStringHttpSecuritySchemeDescription(value);
}
function _parseStringHttpSecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeType(value: unknown): unknown {
return _parseStringHttpSecuritySchemeType(value);
}
function _parseStringHttpSecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHttpSecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverHttpSecuritySchemeAdditionalProperties(value);
}
function _parseNeverHttpSecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHttpSecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseHttpSecurityScheme0(value: unknown): unknown {
return _parseMapHttpSecurityScheme0(value);
}
function _parseMapHttpSecurityScheme0(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parseOneOf0HttpSecuritySchemeScheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
export function parseHttpSecurityScheme1(value: unknown): unknown {
return _parseMapHttpSecurityScheme1(value) ?? _parseNotHttpSecurityScheme1(value);
}
function _parseMapHttpSecurityScheme1(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "scheme": {
const propertyValue = parseOneOf1HttpSecuritySchemeScheme(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
}
return result;
}
return undefined;
}
function _parseNotHttpSecurityScheme1(value: unknown): unknown {
return parseHttpSecuritySchemeNot(value);
}
export function parseOauth2SecuritySchemeType(value: unknown): unknown {
return _parseStringOauth2SecuritySchemeType(value);
}
function _parseStringOauth2SecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFlows(value: unknown): unknown {
return _parseReferenceFlows(value);
}
function _parseReferenceFlows(value: unknown): unknown {
return parseOauthFlows(value);
}
export function parseOauth2SecuritySchemeDescription(value: unknown): unknown {
return _parseStringOauth2SecuritySchemeDescription(value);
}
function _parseStringOauth2SecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2SecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2SecuritySchemeAdditionalProperties(value);
}
function _parseNeverOauth2SecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2SecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseOpenIdConnectSecuritySchemeType(value: unknown): unknown {
return _parseStringOpenIdConnectSecuritySchemeType(value);
}
function _parseStringOpenIdConnectSecuritySchemeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectUrl(value: unknown): unknown {
return _parseStringOpenIdConnectUrl(value);
}
function _parseStringOpenIdConnectUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectSecuritySchemeDescription(value: unknown): unknown {
return _parseStringOpenIdConnectSecuritySchemeDescription(value);
}
function _parseStringOpenIdConnectSecuritySchemeDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown): unknown {
return _parseNeverOpenIdConnectSecuritySchemeAdditionalProperties(value);
}
function _parseNeverOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOpenIdConnectSecuritySchemeX(value: unknown): unknown {
return ;
}
export function parseImplicit(value: unknown): unknown {
return _parseReferenceImplicit(value);
}
function _parseReferenceImplicit(value: unknown): unknown {
return parseImplicitOauthFlow(value);
}
export function parsePassword(value: unknown): unknown {
return _parseReferencePassword(value);
}
function _parseReferencePassword(value: unknown): unknown {
return parsePasswordOauthFlow(value);
}
export function parseClientCredentials(value: unknown): unknown {
return _parseReferenceClientCredentials(value);
}
function _parseReferenceClientCredentials(value: unknown): unknown {
return parseClientCredentialsFlow(value);
}
export function parseAuthorizationCode(value: unknown): unknown {
return _parseReferenceAuthorizationCode(value);
}
function _parseReferenceAuthorizationCode(value: unknown): unknown {
return parseAuthorizationCodeOauthFlow(value);
}
export function parseOauthFlowsAdditionalProperties(value: unknown): unknown {
return _parseNeverOauthFlowsAdditionalProperties(value);
}
function _parseNeverOauthFlowsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauthFlowsX(value: unknown): unknown {
return ;
}
export function parseImplicitOauthFlowAuthorizationUrl(value: unknown): unknown {
return _parseStringImplicitOauthFlowAuthorizationUrl(value);
}
function _parseStringImplicitOauthFlowAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseImplicitOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringImplicitOauthFlowRefreshUrl(value);
}
function _parseStringImplicitOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseImplicitOauthFlowScopes(value: unknown): unknown {
return _parseMapImplicitOauthFlowScopes(value);
}
function _parseMapImplicitOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseScopesImplicitOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsImplicitOauthFlowAdditionalProperties(value);
}
function _parseNeverDefinitionsImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseImplicitOauthFlowX(value: unknown): unknown {
return ;
}
export function parsePasswordOauthFlowTokenUrl(value: unknown): unknown {
return _parseStringPasswordOauthFlowTokenUrl(value);
}
function _parseStringPasswordOauthFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePasswordOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringPasswordOauthFlowRefreshUrl(value);
}
function _parseStringPasswordOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePasswordOauthFlowScopes(value: unknown): unknown {
return _parseMapPasswordOauthFlowScopes(value);
}
function _parseMapPasswordOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseScopesPasswordOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsPasswordOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsPasswordOauthFlowAdditionalProperties(value);
}
function _parseNeverDefinitionsPasswordOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePasswordOauthFlowX(value: unknown): unknown {
return ;
}
export function parseClientCredentialsFlowTokenUrl(value: unknown): unknown {
return _parseStringClientCredentialsFlowTokenUrl(value);
}
function _parseStringClientCredentialsFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseClientCredentialsFlowRefreshUrl(value: unknown): unknown {
return _parseStringClientCredentialsFlowRefreshUrl(value);
}
function _parseStringClientCredentialsFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseClientCredentialsFlowScopes(value: unknown): unknown {
return _parseMapClientCredentialsFlowScopes(value);
}
function _parseMapClientCredentialsFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseScopesClientCredentialsFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsClientCredentialsFlowAdditionalProperties(value);
}
function _parseNeverDefinitionsClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseClientCredentialsFlowX(value: unknown): unknown {
return ;
}
export function parseAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowAuthorizationUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowTokenUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowTokenUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowRefreshUrl(value: unknown): unknown {
return _parseStringAuthorizationCodeOauthFlowRefreshUrl(value);
}
function _parseStringAuthorizationCodeOauthFlowRefreshUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAuthorizationCodeOauthFlowScopes(value: unknown): unknown {
return _parseMapAuthorizationCodeOauthFlowScopes(value);
}
function _parseMapAuthorizationCodeOauthFlowScopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseScopesAuthorizationCodeOauthFlowAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value);
}
function _parseNeverDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseAuthorizationCodeOauthFlowX(value: unknown): unknown {
return ;
}
export function parseLinkOperationId(value: unknown): unknown {
return _parseStringLinkOperationId(value);
}
function _parseStringLinkOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationRef(value: unknown): unknown {
return _parseStringOperationRef(value);
}
function _parseStringOperationRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLinkParameters(value: unknown): unknown {
return _parseMapLinkParameters(value);
}
function _parseMapLinkParameters(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParametersLinkAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseLinkRequestBody(value: unknown): unknown {
return ;
}
export function parseLinkDescription(value: unknown): unknown {
return _parseStringLinkDescription(value);
}
function _parseStringLinkDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLinkServer(value: unknown): unknown {
return _parseReferenceLinkServer(value);
}
function _parseReferenceLinkServer(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parseDefinitionsLinkAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsLinkAdditionalProperties(value);
}
function _parseNeverDefinitionsLinkAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLinkX(value: unknown): unknown {
return ;
}
export function parseLinkNot(value: unknown): unknown {
return _parseMapLinkNot(value);
}
function _parseMapLinkNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseCallbackAdditionalProperties(value: unknown): unknown {
return _parseReferenceCallbackAdditionalProperties(value);
}
function _parseReferenceCallbackAdditionalProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parseCallbackX(value: unknown): unknown {
return ;
}
export function parseContentType(value: unknown): unknown {
return _parseStringContentType(value);
}
function _parseStringContentType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncodingHeaders(value: unknown): unknown {
return _parseMapEncodingHeaders(value);
}
function _parseMapEncodingHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeadersEncodingAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseEncodingStyle(value: unknown): unknown {
return _parseStringEncodingStyle(value);
}
function _parseStringEncodingStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncodingExplode(value: unknown): unknown {
return _parseBooleanEncodingExplode(value);
}
function _parseBooleanEncodingExplode(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseEncodingAllowReserved(value: unknown): unknown {
return _parseBooleanEncodingAllowReserved(value);
}
function _parseBooleanEncodingAllowReserved(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDefinitionsEncodingAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsEncodingAdditionalProperties(value);
}
function _parseNeverDefinitionsEncodingAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePropertiesServersItems(value: unknown): unknown {
return _parseReferencePropertiesServersItems(value);
}
function _parseReferencePropertiesServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parsePropertiesSecurityItems(value: unknown): unknown {
return _parseReferencePropertiesSecurityItems(value);
}
function _parseReferencePropertiesSecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parsePropertiesTagsItems(value: unknown): unknown {
return _parseReferencePropertiesTagsItems(value);
}
function _parseReferencePropertiesTagsItems(value: unknown): unknown {
return parseTag(value);
}
export function parseVariablesAdditionalProperties(value: unknown): unknown {
return _parseReferenceVariablesAdditionalProperties(value);
}
function _parseReferenceVariablesAdditionalProperties(value: unknown): unknown {
return parseServerVariable(value);
}
export function parseServerVariableEnumItems(value: unknown): unknown {
return _parseStringServerVariableEnumItems(value);
}
function _parseStringServerVariableEnumItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemasAZAZ09(value: unknown): unknown {
return _parseOneOfSchemasAZAZ09(value);
}
function _parseOneOfSchemasAZAZ09(value: unknown): unknown {
return parseSchemas0(value) ?? parseSchemas1(value);
}
export function parseResponsesAZAZ09(value: unknown): unknown {
return _parseOneOfResponsesAZAZ09(value);
}
function _parseOneOfResponsesAZAZ09(value: unknown): unknown {
return parseResponses0(value) ?? parseResponses1(value);
}
export function parseParametersAZAZ09(value: unknown): unknown {
return _parseOneOfParametersAZAZ09(value);
}
function _parseOneOfParametersAZAZ09(value: unknown): unknown {
return parseAZAZ09Parameters0(value) ?? parseAZAZ09Parameters1(value);
}
export function parseExamplesAZAZ09(value: unknown): unknown {
return _parseOneOfExamplesAZAZ09(value);
}
function _parseOneOfExamplesAZAZ09(value: unknown): unknown {
return parseAZAZ09Examples0(value) ?? parseAZAZ09Examples1(value);
}
export function parseRequestBodiesAZAZ09(value: unknown): unknown {
return _parseOneOfRequestBodiesAZAZ09(value);
}
function _parseOneOfRequestBodiesAZAZ09(value: unknown): unknown {
return parseRequestBodies0(value) ?? parseRequestBodies1(value);
}
export function parseHeadersAZAZ09(value: unknown): unknown {
return _parseOneOfHeadersAZAZ09(value);
}
function _parseOneOfHeadersAZAZ09(value: unknown): unknown {
return parseAZAZ09Headers0(value) ?? parseAZAZ09Headers1(value);
}
export function parseSecuritySchemesAZAZ09(value: unknown): unknown {
return _parseOneOfSecuritySchemesAZAZ09(value);
}
function _parseOneOfSecuritySchemesAZAZ09(value: unknown): unknown {
return parseSecuritySchemes0(value) ?? parseSecuritySchemes1(value);
}
export function parseLinksAZAZ09(value: unknown): unknown {
return _parseOneOfLinksAZAZ09(value);
}
function _parseOneOfLinksAZAZ09(value: unknown): unknown {
return parseAZAZ09Links0(value) ?? parseAZAZ09Links1(value);
}
export function parseCallbacksAZAZ09(value: unknown): unknown {
return _parseOneOfCallbacksAZAZ09(value);
}
function _parseOneOfCallbacksAZAZ09(value: unknown): unknown {
return parseAZAZ09Callbacks0(value) ?? parseAZAZ09Callbacks1(value);
}
export function parseRequiredItems(value: unknown): unknown {
return _parseStringRequiredItems(value);
}
function _parseStringRequiredItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaEnumItems(value: unknown): unknown {
return ;
}
export function parseNot0(value: unknown): unknown {
return _parseReferenceNot0(value);
}
function _parseReferenceNot0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseNot1(value: unknown): unknown {
return _parseReferenceNot1(value);
}
function _parseReferenceNot1(value: unknown): unknown {
return parseReference(value);
}
export function parseAllOfItems(value: unknown): unknown {
return _parseOneOfAllOfItems(value);
}
function _parseOneOfAllOfItems(value: unknown): unknown {
return parseItemsAllOf0(value) ?? parseItemsAllOf1(value);
}
export function parseOneOfSchemaItems(value: unknown): unknown {
return _parseOneOfOneOfSchemaItems(value);
}
function _parseOneOfOneOfSchemaItems(value: unknown): unknown {
return parseOneOf0(value) ?? parseOneOf1(value);
}
export function parseAnyOfItems(value: unknown): unknown {
return _parseOneOfAnyOfItems(value);
}
function _parseOneOfAnyOfItems(value: unknown): unknown {
return parseAnyOf0(value) ?? parseAnyOf1(value);
}
export function parseItems0(value: unknown): unknown {
return _parseReferenceItems0(value);
}
function _parseReferenceItems0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseItems1(value: unknown): unknown {
return _parseReferenceItems1(value);
}
function _parseReferenceItems1(value: unknown): unknown {
return parseReference(value);
}
export function parsePropertiesAdditionalProperties(value: unknown): unknown {
return _parseOneOfPropertiesAdditionalProperties(value);
}
function _parseOneOfPropertiesAdditionalProperties(value: unknown): unknown {
return parseProperties0(value) ?? parseProperties1(value);
}
export function parseSchema0(value: unknown): unknown {
return _parseReferenceSchema0(value);
}
function _parseReferenceSchema0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchema1(value: unknown): unknown {
return _parseReferenceSchema1(value);
}
function _parseReferenceSchema1(value: unknown): unknown {
return parseReference(value);
}
export function parseSchema2(value: unknown): unknown {
return _parseBooleanSchema2(value);
}
function _parseBooleanSchema2(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseMappingAdditionalProperties(value: unknown): unknown {
return _parseStringMappingAdditionalProperties(value);
}
function _parseStringMappingAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeadersAdditionalProperties(value: unknown): unknown {
return _parseOneOfHeadersAdditionalProperties(value);
}
function _parseOneOfHeadersAdditionalProperties(value: unknown): unknown {
return parseResponseHeaders0(value) ?? parseResponseHeaders1(value);
}
export function parseResponseContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceResponseContentAdditionalProperties(value);
}
function _parseReferenceResponseContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseLinksAdditionalProperties(value: unknown): unknown {
return _parseOneOfLinksAdditionalProperties(value);
}
function _parseOneOfLinksAdditionalProperties(value: unknown): unknown {
return parseResponseLinks0(value) ?? parseResponseLinks1(value);
}
export function parseSchemaMediaType0(value: unknown): unknown {
return _parseReferenceSchemaMediaType0(value);
}
function _parseReferenceSchemaMediaType0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchemaMediaType1(value: unknown): unknown {
return _parseReferenceSchemaMediaType1(value);
}
function _parseReferenceSchemaMediaType1(value: unknown): unknown {
return parseReference(value);
}
export function parseExamplesMediaTypeAdditionalProperties(value: unknown): unknown {
return _parseOneOfExamplesMediaTypeAdditionalProperties(value);
}
function _parseOneOfExamplesMediaTypeAdditionalProperties(value: unknown): unknown {
return parseExamplesMediaType0(value) ?? parseExamplesMediaType1(value);
}
export function parseMediaTypeEncodingAdditionalProperties(value: unknown): unknown {
return _parseReferenceMediaTypeEncodingAdditionalProperties(value);
}
function _parseReferenceMediaTypeEncodingAdditionalProperties(value: unknown): unknown {
return parseDefinitionsEncoding(value);
}
export function parseHeader0(value: unknown): unknown {
return _parseReferenceHeader0(value);
}
function _parseReferenceHeader0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseHeader1(value: unknown): unknown {
return _parseReferenceHeader1(value);
}
function _parseReferenceHeader1(value: unknown): unknown {
return parseReference(value);
}
export function parseHeaderContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceHeaderContentAdditionalProperties(value);
}
function _parseReferenceHeaderContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseHeaderExamplesAdditionalProperties(value: unknown): unknown {
return _parseOneOfHeaderExamplesAdditionalProperties(value);
}
function _parseOneOfHeaderExamplesAdditionalProperties(value: unknown): unknown {
return parseHeaderExamples0(value) ?? parseHeaderExamples1(value);
}
export function parsePathItemServersItems(value: unknown): unknown {
return _parseReferencePathItemServersItems(value);
}
function _parseReferencePathItemServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parsePathItemItems(value: unknown): unknown {
return _parseOneOfPathItemItems(value);
}
function _parseOneOfPathItemItems(value: unknown): unknown {
return parsePathItem0(value) ?? parsePathItem1(value);
}
export function parseOperationTagsItems(value: unknown): unknown {
return _parseStringOperationTagsItems(value);
}
function _parseStringOperationTagsItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParametersItems(value: unknown): unknown {
return _parseOneOfParametersItems(value);
}
function _parseOneOfParametersItems(value: unknown): unknown {
return parseOperationParameters0(value) ?? parseOperationParameters1(value);
}
export function parseRequestBody0(value: unknown): unknown {
return _parseReferenceRequestBody0(value);
}
function _parseReferenceRequestBody0(value: unknown): unknown {
return parseDefinitionsRequestBody(value);
}
export function parseRequestBody1(value: unknown): unknown {
return _parseReferenceRequestBody1(value);
}
function _parseReferenceRequestBody1(value: unknown): unknown {
return parseReference(value);
}
export function parseCallbacksAdditionalProperties(value: unknown): unknown {
return _parseOneOfCallbacksAdditionalProperties(value);
}
function _parseOneOfCallbacksAdditionalProperties(value: unknown): unknown {
return parseOperationCallbacks0(value) ?? parseOperationCallbacks1(value);
}
export function parseOperationSecurityItems(value: unknown): unknown {
return _parseReferenceOperationSecurityItems(value);
}
function _parseReferenceOperationSecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parseOperationServersItems(value: unknown): unknown {
return _parseReferenceOperationServersItems(value);
}
function _parseReferenceOperationServersItems(value: unknown): unknown {
return parseDefinitionsServer(value);
}
export function parseDefault0(value: unknown): unknown {
return _parseReferenceDefault0(value);
}
function _parseReferenceDefault0(value: unknown): unknown {
return parseResponse(value);
}
export function parseDefault1(value: unknown): unknown {
return _parseReferenceDefault1(value);
}
function _parseReferenceDefault1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponses15D2Xx0(value: unknown): unknown {
return _parseReferenceResponses15D2Xx0(value);
}
function _parseReferenceResponses15D2Xx0(value: unknown): unknown {
return parseResponse(value);
}
export function parseResponses15D2Xx1(value: unknown): unknown {
return _parseReferenceResponses15D2Xx1(value);
}
function _parseReferenceResponses15D2Xx1(value: unknown): unknown {
return parseReference(value);
}
export function parseSecurityRequirementItems(value: unknown): unknown {
return _parseStringSecurityRequirementItems(value);
}
function _parseStringSecurityRequirementItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAllOfSchemaXorContent0(value: unknown): unknown {
return _parseNotAllOfSchemaXorContent0(value);
}
function _parseNotAllOfSchemaXorContent0(value: unknown): unknown {
return parseAllOfSchemaXorContentNot(value);
}
export function parseAllOfSchemaXorContent1(value: unknown): unknown {
return _parseNotAllOfSchemaXorContent1(value);
}
function _parseNotAllOfSchemaXorContent1(value: unknown): unknown {
return parseSchemaXorContent1Not(value);
}
export function parseSchemaXorContent2(value: unknown): unknown {
return _parseNotSchemaXorContent2(value);
}
function _parseNotSchemaXorContent2(value: unknown): unknown {
return parseSchemaXorContent2Not(value);
}
export function parseSchemaXorContent3(value: unknown): unknown {
return _parseNotSchemaXorContent3(value);
}
function _parseNotSchemaXorContent3(value: unknown): unknown {
return parseSchemaXorContent3Not(value);
}
export function parseSchemaXorContent4(value: unknown): unknown {
return _parseNotSchemaXorContent4(value);
}
function _parseNotSchemaXorContent4(value: unknown): unknown {
return parseSchemaXorContent4Not(value);
}
export function parseParameter0(value: unknown): unknown {
return _parseReferenceParameter0(value);
}
function _parseReferenceParameter0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseParameter1(value: unknown): unknown {
return _parseReferenceParameter1(value);
}
function _parseReferenceParameter1(value: unknown): unknown {
return parseReference(value);
}
export function parseParameterContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceParameterContentAdditionalProperties(value);
}
function _parseReferenceParameterContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseParameterExamplesAdditionalProperties(value: unknown): unknown {
return _parseOneOfParameterExamplesAdditionalProperties(value);
}
function _parseOneOfParameterExamplesAdditionalProperties(value: unknown): unknown {
return parseParameterExamples0(value) ?? parseParameterExamples1(value);
}
export function parseOneOf0ParameterLocationIn(value: unknown): unknown {
return _parseStringOneOf0ParameterLocationIn(value);
}
function _parseStringOneOf0ParameterLocationIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf0ParameterLocationStyle(value: unknown): unknown {
return _parseStringOneOf0ParameterLocationStyle(value);
}
function _parseStringOneOf0ParameterLocationStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterLocationRequired(value: unknown): unknown {
return _parseBooleanParameterLocationRequired(value);
}
function _parseBooleanParameterLocationRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOneOf1ParameterLocationIn(value: unknown): unknown {
return _parseStringOneOf1ParameterLocationIn(value);
}
function _parseStringOneOf1ParameterLocationIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf1ParameterLocationStyle(value: unknown): unknown {
return _parseStringOneOf1ParameterLocationStyle(value);
}
function _parseStringOneOf1ParameterLocationStyle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterLocation2In(value: unknown): unknown {
return _parseStringParameterLocation2In(value);
}
function _parseStringParameterLocation2In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterLocation2Style(value: unknown): unknown {
return _parseStringParameterLocation2Style(value);
}
function _parseStringParameterLocation2Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterLocation3In(value: unknown): unknown {
return _parseStringParameterLocation3In(value);
}
function _parseStringParameterLocation3In(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParameterLocation3Style(value: unknown): unknown {
return _parseStringParameterLocation3Style(value);
}
function _parseStringParameterLocation3Style(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseRequestBodyContentAdditionalProperties(value: unknown): unknown {
return _parseReferenceRequestBodyContentAdditionalProperties(value);
}
function _parseReferenceRequestBodyContentAdditionalProperties(value: unknown): unknown {
return parseMediaType(value);
}
export function parseOneOf0HttpSecuritySchemeScheme(value: unknown): unknown {
return _parseStringOneOf0HttpSecuritySchemeScheme(value);
}
function _parseStringOneOf0HttpSecuritySchemeScheme(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOneOf1HttpSecuritySchemeScheme(value: unknown): unknown {
return _parseNotOneOf1HttpSecuritySchemeScheme(value);
}
function _parseNotOneOf1HttpSecuritySchemeScheme(value: unknown): unknown {
return parseSchemeNot(value);
}
export function parseHttpSecuritySchemeNot(value: unknown): unknown {
return _parseMapHttpSecuritySchemeNot(value);
}
function _parseMapHttpSecuritySchemeNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseScopesImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseStringScopesImplicitOauthFlowAdditionalProperties(value);
}
function _parseStringScopesImplicitOauthFlowAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseScopesPasswordOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseStringScopesPasswordOauthFlowAdditionalProperties(value);
}
function _parseStringScopesPasswordOauthFlowAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseScopesClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
return _parseStringScopesClientCredentialsFlowAdditionalProperties(value);
}
function _parseStringScopesClientCredentialsFlowAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseScopesAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
return _parseStringScopesAuthorizationCodeOauthFlowAdditionalProperties(value);
}
function _parseStringScopesAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseParametersLinkAdditionalProperties(value: unknown): unknown {
return ;
}
export function parseHeadersEncodingAdditionalProperties(value: unknown): unknown {
return _parseOneOfHeadersEncodingAdditionalProperties(value);
}
function _parseOneOfHeadersEncodingAdditionalProperties(value: unknown): unknown {
return parseEncoding0(value) ?? parseEncoding1(value);
}
export function parseSchemas0(value: unknown): unknown {
return _parseReferenceSchemas0(value);
}
function _parseReferenceSchemas0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchemas1(value: unknown): unknown {
return _parseReferenceSchemas1(value);
}
function _parseReferenceSchemas1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponses0(value: unknown): unknown {
return _parseReferenceResponses0(value);
}
function _parseReferenceResponses0(value: unknown): unknown {
return parseReference(value);
}
export function parseResponses1(value: unknown): unknown {
return _parseReferenceResponses1(value);
}
function _parseReferenceResponses1(value: unknown): unknown {
return parseResponse(value);
}
export function parseAZAZ09Parameters0(value: unknown): unknown {
return _parseReferenceAZAZ09Parameters0(value);
}
function _parseReferenceAZAZ09Parameters0(value: unknown): unknown {
return parseReference(value);
}
export function parseAZAZ09Parameters1(value: unknown): unknown {
return _parseReferenceAZAZ09Parameters1(value);
}
function _parseReferenceAZAZ09Parameters1(value: unknown): unknown {
return parseParameter(value);
}
export function parseAZAZ09Examples0(value: unknown): unknown {
return _parseReferenceAZAZ09Examples0(value);
}
function _parseReferenceAZAZ09Examples0(value: unknown): unknown {
return parseReference(value);
}
export function parseAZAZ09Examples1(value: unknown): unknown {
return _parseReferenceAZAZ09Examples1(value);
}
function _parseReferenceAZAZ09Examples1(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseRequestBodies0(value: unknown): unknown {
return _parseReferenceRequestBodies0(value);
}
function _parseReferenceRequestBodies0(value: unknown): unknown {
return parseReference(value);
}
export function parseRequestBodies1(value: unknown): unknown {
return _parseReferenceRequestBodies1(value);
}
function _parseReferenceRequestBodies1(value: unknown): unknown {
return parseDefinitionsRequestBody(value);
}
export function parseAZAZ09Headers0(value: unknown): unknown {
return _parseReferenceAZAZ09Headers0(value);
}
function _parseReferenceAZAZ09Headers0(value: unknown): unknown {
return parseReference(value);
}
export function parseAZAZ09Headers1(value: unknown): unknown {
return _parseReferenceAZAZ09Headers1(value);
}
function _parseReferenceAZAZ09Headers1(value: unknown): unknown {
return parseHeader(value);
}
export function parseSecuritySchemes0(value: unknown): unknown {
return _parseReferenceSecuritySchemes0(value);
}
function _parseReferenceSecuritySchemes0(value: unknown): unknown {
return parseReference(value);
}
export function parseSecuritySchemes1(value: unknown): unknown {
return _parseReferenceSecuritySchemes1(value);
}
function _parseReferenceSecuritySchemes1(value: unknown): unknown {
return parseSecurityScheme(value);
}
export function parseAZAZ09Links0(value: unknown): unknown {
return _parseReferenceAZAZ09Links0(value);
}
function _parseReferenceAZAZ09Links0(value: unknown): unknown {
return parseReference(value);
}
export function parseAZAZ09Links1(value: unknown): unknown {
return _parseReferenceAZAZ09Links1(value);
}
function _parseReferenceAZAZ09Links1(value: unknown): unknown {
return parseLink(value);
}
export function parseAZAZ09Callbacks0(value: unknown): unknown {
return _parseReferenceAZAZ09Callbacks0(value);
}
function _parseReferenceAZAZ09Callbacks0(value: unknown): unknown {
return parseReference(value);
}
export function parseAZAZ09Callbacks1(value: unknown): unknown {
return _parseReferenceAZAZ09Callbacks1(value);
}
function _parseReferenceAZAZ09Callbacks1(value: unknown): unknown {
return parseCallback(value);
}
export function parseItemsAllOf0(value: unknown): unknown {
return _parseReferenceItemsAllOf0(value);
}
function _parseReferenceItemsAllOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseItemsAllOf1(value: unknown): unknown {
return _parseReferenceItemsAllOf1(value);
}
function _parseReferenceItemsAllOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseOneOf0(value: unknown): unknown {
return _parseReferenceOneOf0(value);
}
function _parseReferenceOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseOneOf1(value: unknown): unknown {
return _parseReferenceOneOf1(value);
}
function _parseReferenceOneOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseAnyOf0(value: unknown): unknown {
return _parseReferenceAnyOf0(value);
}
function _parseReferenceAnyOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAnyOf1(value: unknown): unknown {
return _parseReferenceAnyOf1(value);
}
function _parseReferenceAnyOf1(value: unknown): unknown {
return parseReference(value);
}
export function parseProperties0(value: unknown): unknown {
return _parseReferenceProperties0(value);
}
function _parseReferenceProperties0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseProperties1(value: unknown): unknown {
return _parseReferenceProperties1(value);
}
function _parseReferenceProperties1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponseHeaders0(value: unknown): unknown {
return _parseReferenceResponseHeaders0(value);
}
function _parseReferenceResponseHeaders0(value: unknown): unknown {
return parseHeader(value);
}
export function parseResponseHeaders1(value: unknown): unknown {
return _parseReferenceResponseHeaders1(value);
}
function _parseReferenceResponseHeaders1(value: unknown): unknown {
return parseReference(value);
}
export function parseResponseLinks0(value: unknown): unknown {
return _parseReferenceResponseLinks0(value);
}
function _parseReferenceResponseLinks0(value: unknown): unknown {
return parseLink(value);
}
export function parseResponseLinks1(value: unknown): unknown {
return _parseReferenceResponseLinks1(value);
}
function _parseReferenceResponseLinks1(value: unknown): unknown {
return parseReference(value);
}
export function parseExamplesMediaType0(value: unknown): unknown {
return _parseReferenceExamplesMediaType0(value);
}
function _parseReferenceExamplesMediaType0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseExamplesMediaType1(value: unknown): unknown {
return _parseReferenceExamplesMediaType1(value);
}
function _parseReferenceExamplesMediaType1(value: unknown): unknown {
return parseReference(value);
}
export function parseHeaderExamples0(value: unknown): unknown {
return _parseReferenceHeaderExamples0(value);
}
function _parseReferenceHeaderExamples0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseHeaderExamples1(value: unknown): unknown {
return _parseReferenceHeaderExamples1(value);
}
function _parseReferenceHeaderExamples1(value: unknown): unknown {
return parseReference(value);
}
export function parsePathItem0(value: unknown): unknown {
return _parseReferencePathItem0(value);
}
function _parseReferencePathItem0(value: unknown): unknown {
return parseParameter(value);
}
export function parsePathItem1(value: unknown): unknown {
return _parseReferencePathItem1(value);
}
function _parseReferencePathItem1(value: unknown): unknown {
return parseReference(value);
}
export function parseOperationParameters0(value: unknown): unknown {
return _parseReferenceOperationParameters0(value);
}
function _parseReferenceOperationParameters0(value: unknown): unknown {
return parseParameter(value);
}
export function parseOperationParameters1(value: unknown): unknown {
return _parseReferenceOperationParameters1(value);
}
function _parseReferenceOperationParameters1(value: unknown): unknown {
return parseReference(value);
}
export function parseOperationCallbacks0(value: unknown): unknown {
return _parseReferenceOperationCallbacks0(value);
}
function _parseReferenceOperationCallbacks0(value: unknown): unknown {
return parseCallback(value);
}
export function parseOperationCallbacks1(value: unknown): unknown {
return _parseReferenceOperationCallbacks1(value);
}
function _parseReferenceOperationCallbacks1(value: unknown): unknown {
return parseReference(value);
}
export function parseAllOfSchemaXorContentNot(value: unknown): unknown {
return _parseMapAllOfSchemaXorContentNot(value);
}
function _parseMapAllOfSchemaXorContentNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContent1Not(value: unknown): unknown {
return _parseMapSchemaXorContent1Not(value);
}
function _parseMapSchemaXorContent1Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContent2Not(value: unknown): unknown {
return _parseMapSchemaXorContent2Not(value);
}
function _parseMapSchemaXorContent2Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContent3Not(value: unknown): unknown {
return _parseMapSchemaXorContent3Not(value);
}
function _parseMapSchemaXorContent3Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseSchemaXorContent4Not(value: unknown): unknown {
return _parseMapSchemaXorContent4Not(value);
}
function _parseMapSchemaXorContent4Not(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
export function parseParameterExamples0(value: unknown): unknown {
return _parseReferenceParameterExamples0(value);
}
function _parseReferenceParameterExamples0(value: unknown): unknown {
return parseDefinitionsExample(value);
}
export function parseParameterExamples1(value: unknown): unknown {
return _parseReferenceParameterExamples1(value);
}
function _parseReferenceParameterExamples1(value: unknown): unknown {
return parseReference(value);
}
export function parseSchemeNot(value: unknown): unknown {
return _parseStringSchemeNot(value);
}
function _parseStringSchemeNot(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEncoding0(value: unknown): unknown {
return _parseReferenceEncoding0(value);
}
function _parseReferenceEncoding0(value: unknown): unknown {
return parseHeader(value);
}
export function parseEncoding1(value: unknown): unknown {
return _parseReferenceEncoding1(value);
}
function _parseReferenceEncoding1(value: unknown): unknown {
return parseReference(value);
}
