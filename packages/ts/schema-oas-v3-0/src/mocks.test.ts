// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.7                         -- www.JsonSchema42.org
//
import assert from "node:assert/strict";
import test from "node:test";
import * as validators from "./validators.js";
import * as mocks from "./mocks.js";
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator}
*/
test("DefinitionsDiscriminator", () => {
const mock = mocks.mockDefinitionsDiscriminator();
const valid = validators.isDefinitionsDiscriminator(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement}
*/
test("SecurityRequirement", () => {
const mock = mocks.mockSecurityRequirement();
const valid = validators.isSecurityRequirement(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security}
*/
test("PropertiesSecurity", () => {
const mock = mocks.mockPropertiesSecurity();
const valid = validators.isPropertiesSecurity(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/title}
*/
test("InfoTitle", () => {
const mock = mocks.mockInfoTitle();
const valid = validators.isInfoTitle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/description}
*/
test("InfoDescription", () => {
const mock = mocks.mockInfoDescription();
const valid = validators.isInfoDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/version}
*/
test("Version", () => {
const mock = mocks.mockVersion();
const valid = validators.isVersion(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/name}
*/
test("ContactName", () => {
const mock = mocks.mockContactName();
const valid = validators.isContactName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/properties/name}
*/
test("LicenseName", () => {
const mock = mocks.mockLicenseName();
const valid = validators.isLicenseName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/url}
*/
test("ServerUrl", () => {
const mock = mocks.mockServerUrl();
const valid = validators.isServerUrl(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/description}
*/
test("ServerDescription", () => {
const mock = mocks.mockServerDescription();
const valid = validators.isServerDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum}
*/
test("ServerVariableEnum", () => {
const mock = mocks.mockServerVariableEnum();
const valid = validators.isServerVariableEnum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/default}
*/
test("ServerVariableDefault", () => {
const mock = mocks.mockServerVariableDefault();
const valid = validators.isServerVariableDefault(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/description}
*/
test("ServerVariableDescription", () => {
const mock = mocks.mockServerVariableDescription();
const valid = validators.isServerVariableDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/title}
*/
test("SchemaTitle", () => {
const mock = mocks.mockSchemaTitle();
const valid = validators.isSchemaTitle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/multipleOf}
*/
test("MultipleOf", () => {
const mock = mocks.mockMultipleOf();
const valid = validators.isMultipleOf(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maximum}
*/
test("Maximum", () => {
const mock = mocks.mockMaximum();
const valid = validators.isMaximum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMaximum}
*/
test("ExclusiveMaximum", () => {
const mock = mocks.mockExclusiveMaximum();
const valid = validators.isExclusiveMaximum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minimum}
*/
test("Minimum", () => {
const mock = mocks.mockMinimum();
const valid = validators.isMinimum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMinimum}
*/
test("ExclusiveMinimum", () => {
const mock = mocks.mockExclusiveMinimum();
const valid = validators.isExclusiveMinimum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxLength}
*/
test("MaxLength", () => {
const mock = mocks.mockMaxLength();
const valid = validators.isMaxLength(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minLength}
*/
test("MinLength", () => {
const mock = mocks.mockMinLength();
const valid = validators.isMinLength(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxItems}
*/
test("MaxItems", () => {
const mock = mocks.mockMaxItems();
const valid = validators.isMaxItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minItems}
*/
test("MinItems", () => {
const mock = mocks.mockMinItems();
const valid = validators.isMinItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/uniqueItems}
*/
test("UniqueItems", () => {
const mock = mocks.mockUniqueItems();
const valid = validators.isUniqueItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxProperties}
*/
test("MaxProperties", () => {
const mock = mocks.mockMaxProperties();
const valid = validators.isMaxProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minProperties}
*/
test("MinProperties", () => {
const mock = mocks.mockMinProperties();
const valid = validators.isMinProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/type}
*/
test("SchemaType", () => {
const mock = mocks.mockSchemaType();
const valid = validators.isSchemaType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/description}
*/
test("SchemaDescription", () => {
const mock = mocks.mockSchemaDescription();
const valid = validators.isSchemaDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/format}
*/
test("Format", () => {
const mock = mocks.mockFormat();
const valid = validators.isFormat(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/nullable}
*/
test("Nullable", () => {
const mock = mocks.mockNullable();
const valid = validators.isNullable(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/discriminator}
*/
test("SchemaDiscriminator", () => {
const mock = mocks.mockSchemaDiscriminator();
const valid = validators.isSchemaDiscriminator(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/readOnly}
*/
test("ReadOnly", () => {
const mock = mocks.mockReadOnly();
const valid = validators.isReadOnly(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/writeOnly}
*/
test("WriteOnly", () => {
const mock = mocks.mockWriteOnly();
const valid = validators.isWriteOnly(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/deprecated}
*/
test("SchemaDeprecated", () => {
const mock = mocks.mockSchemaDeprecated();
const valid = validators.isSchemaDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/propertyName}
*/
test("PropertyName", () => {
const mock = mocks.mockPropertyName();
const valid = validators.isPropertyName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping}
*/
test("Mapping", () => {
const mock = mocks.mockMapping();
const valid = validators.isMapping(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/name}
*/
test("XmlName", () => {
const mock = mocks.mockXmlName();
const valid = validators.isXmlName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/prefix}
*/
test("Prefix", () => {
const mock = mocks.mockPrefix();
const valid = validators.isPrefix(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/attribute}
*/
test("Attribute", () => {
const mock = mocks.mockAttribute();
const valid = validators.isAttribute(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/wrapped}
*/
test("Wrapped", () => {
const mock = mocks.mockWrapped();
const valid = validators.isWrapped(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/description}
*/
test("ResponseDescription", () => {
const mock = mocks.mockResponseDescription();
const valid = validators.isResponseDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/summary}
*/
test("ExampleSummary", () => {
const mock = mocks.mockExampleSummary();
const valid = validators.isExampleSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/description}
*/
test("ExampleDescription", () => {
const mock = mocks.mockExampleDescription();
const valid = validators.isExampleDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/description}
*/
test("HeaderDescription", () => {
const mock = mocks.mockHeaderDescription();
const valid = validators.isHeaderDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/required}
*/
test("HeaderRequired", () => {
const mock = mocks.mockHeaderRequired();
const valid = validators.isHeaderRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/deprecated}
*/
test("HeaderDeprecated", () => {
const mock = mocks.mockHeaderDeprecated();
const valid = validators.isHeaderDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowEmptyValue}
*/
test("HeaderAllowEmptyValue", () => {
const mock = mocks.mockHeaderAllowEmptyValue();
const valid = validators.isHeaderAllowEmptyValue(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/style}
*/
test("HeaderStyle", () => {
const mock = mocks.mockHeaderStyle();
const valid = validators.isHeaderStyle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/explode}
*/
test("HeaderExplode", () => {
const mock = mocks.mockHeaderExplode();
const valid = validators.isHeaderExplode(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowReserved}
*/
test("HeaderAllowReserved", () => {
const mock = mocks.mockHeaderAllowReserved();
const valid = validators.isHeaderAllowReserved(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/$ref}
*/
test("PathItemRef", () => {
const mock = mocks.mockPathItemRef();
const valid = validators.isPathItemRef(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/summary}
*/
test("PathItemSummary", () => {
const mock = mocks.mockPathItemSummary();
const valid = validators.isPathItemSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/description}
*/
test("PathItemDescription", () => {
const mock = mocks.mockPathItemDescription();
const valid = validators.isPathItemDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags}
*/
test("OperationTags", () => {
const mock = mocks.mockOperationTags();
const valid = validators.isOperationTags(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/summary}
*/
test("OperationSummary", () => {
const mock = mocks.mockOperationSummary();
const valid = validators.isOperationSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/description}
*/
test("OperationDescription", () => {
const mock = mocks.mockOperationDescription();
const valid = validators.isOperationDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/operationId}
*/
test("OperationOperationId", () => {
const mock = mocks.mockOperationOperationId();
const valid = validators.isOperationOperationId(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/deprecated}
*/
test("OperationDeprecated", () => {
const mock = mocks.mockOperationDeprecated();
const valid = validators.isOperationDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security}
*/
test("OperationSecurity", () => {
const mock = mocks.mockOperationSecurity();
const valid = validators.isOperationSecurity(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties}
*/
test("SecurityRequirementAdditionalProperties", () => {
const mock = mocks.mockSecurityRequirementAdditionalProperties();
const valid = validators.isSecurityRequirementAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/name}
*/
test("TagName", () => {
const mock = mocks.mockTagName();
const valid = validators.isTagName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/description}
*/
test("TagDescription", () => {
const mock = mocks.mockTagDescription();
const valid = validators.isTagDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/properties/description}
*/
test("ExternalDocumentationDescription", () => {
const mock = mocks.mockExternalDocumentationDescription();
const valid = validators.isExternalDocumentationDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/name}
*/
test("ParameterName", () => {
const mock = mocks.mockParameterName();
const valid = validators.isParameterName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/in}
*/
test("ParameterIn", () => {
const mock = mocks.mockParameterIn();
const valid = validators.isParameterIn(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/description}
*/
test("ParameterDescription", () => {
const mock = mocks.mockParameterDescription();
const valid = validators.isParameterDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/required}
*/
test("ParameterRequired", () => {
const mock = mocks.mockParameterRequired();
const valid = validators.isParameterRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/deprecated}
*/
test("ParameterDeprecated", () => {
const mock = mocks.mockParameterDeprecated();
const valid = validators.isParameterDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowEmptyValue}
*/
test("ParameterAllowEmptyValue", () => {
const mock = mocks.mockParameterAllowEmptyValue();
const valid = validators.isParameterAllowEmptyValue(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/style}
*/
test("ParameterStyle", () => {
const mock = mocks.mockParameterStyle();
const valid = validators.isParameterStyle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/explode}
*/
test("ParameterExplode", () => {
const mock = mocks.mockParameterExplode();
const valid = validators.isParameterExplode(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowReserved}
*/
test("ParameterAllowReserved", () => {
const mock = mocks.mockParameterAllowReserved();
const valid = validators.isParameterAllowReserved(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/description}
*/
test("RequestBodyDescription", () => {
const mock = mocks.mockRequestBodyDescription();
const valid = validators.isRequestBodyDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/required}
*/
test("RequestBodyRequired", () => {
const mock = mocks.mockRequestBodyRequired();
const valid = validators.isRequestBodyRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/type}
*/
test("ApiKeySecuritySchemeType", () => {
const mock = mocks.mockApiKeySecuritySchemeType();
const valid = validators.isApiKeySecuritySchemeType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/name}
*/
test("ApiKeySecuritySchemeName", () => {
const mock = mocks.mockApiKeySecuritySchemeName();
const valid = validators.isApiKeySecuritySchemeName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/in}
*/
test("ApiKeySecuritySchemeIn", () => {
const mock = mocks.mockApiKeySecuritySchemeIn();
const valid = validators.isApiKeySecuritySchemeIn(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/description}
*/
test("ApiKeySecuritySchemeDescription", () => {
const mock = mocks.mockApiKeySecuritySchemeDescription();
const valid = validators.isApiKeySecuritySchemeDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/scheme}
*/
test("PropertiesHttpSecuritySchemeScheme", () => {
const mock = mocks.mockPropertiesHttpSecuritySchemeScheme();
const valid = validators.isPropertiesHttpSecuritySchemeScheme(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/bearerFormat}
*/
test("BearerFormat", () => {
const mock = mocks.mockBearerFormat();
const valid = validators.isBearerFormat(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/description}
*/
test("HttpSecuritySchemeDescription", () => {
const mock = mocks.mockHttpSecuritySchemeDescription();
const valid = validators.isHttpSecuritySchemeDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/type}
*/
test("HttpSecuritySchemeType", () => {
const mock = mocks.mockHttpSecuritySchemeType();
const valid = validators.isHttpSecuritySchemeType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/type}
*/
test("Oauth2SecuritySchemeType", () => {
const mock = mocks.mockOauth2SecuritySchemeType();
const valid = validators.isOauth2SecuritySchemeType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/description}
*/
test("Oauth2SecuritySchemeDescription", () => {
const mock = mocks.mockOauth2SecuritySchemeDescription();
const valid = validators.isOauth2SecuritySchemeDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/type}
*/
test("OpenIdConnectSecuritySchemeType", () => {
const mock = mocks.mockOpenIdConnectSecuritySchemeType();
const valid = validators.isOpenIdConnectSecuritySchemeType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/description}
*/
test("OpenIdConnectSecuritySchemeDescription", () => {
const mock = mocks.mockOpenIdConnectSecuritySchemeDescription();
const valid = validators.isOpenIdConnectSecuritySchemeDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes}
*/
test("ImplicitOauthFlowScopes", () => {
const mock = mocks.mockImplicitOauthFlowScopes();
const valid = validators.isImplicitOauthFlowScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes}
*/
test("PasswordOauthFlowScopes", () => {
const mock = mocks.mockPasswordOauthFlowScopes();
const valid = validators.isPasswordOauthFlowScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes}
*/
test("ClientCredentialsFlowScopes", () => {
const mock = mocks.mockClientCredentialsFlowScopes();
const valid = validators.isClientCredentialsFlowScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes}
*/
test("AuthorizationCodeOauthFlowScopes", () => {
const mock = mocks.mockAuthorizationCodeOauthFlowScopes();
const valid = validators.isAuthorizationCodeOauthFlowScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/operationId}
*/
test("LinkOperationId", () => {
const mock = mocks.mockLinkOperationId();
const valid = validators.isLinkOperationId(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/description}
*/
test("LinkDescription", () => {
const mock = mocks.mockLinkDescription();
const valid = validators.isLinkDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/contentType}
*/
test("ContentType", () => {
const mock = mocks.mockContentType();
const valid = validators.isContentType(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/style}
*/
test("EncodingStyle", () => {
const mock = mocks.mockEncodingStyle();
const valid = validators.isEncodingStyle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/explode}
*/
test("EncodingExplode", () => {
const mock = mocks.mockEncodingExplode();
const valid = validators.isEncodingExplode(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/allowReserved}
*/
test("EncodingAllowReserved", () => {
const mock = mocks.mockEncodingAllowReserved();
const valid = validators.isEncodingAllowReserved(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security/items}
*/
test("PropertiesSecurityItems", () => {
const mock = mocks.mockPropertiesSecurityItems();
const valid = validators.isPropertiesSecurityItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum/items}
*/
test("ServerVariableEnumItems", () => {
const mock = mocks.mockServerVariableEnumItems();
const valid = validators.isServerVariableEnumItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required/items}
*/
test("RequiredItems", () => {
const mock = mocks.mockRequiredItems();
const valid = validators.isRequiredItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/2}
*/
test("Schema2", () => {
const mock = mocks.mockSchema2();
const valid = validators.isSchema2(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping/additionalProperties}
*/
test("MappingAdditionalProperties", () => {
const mock = mocks.mockMappingAdditionalProperties();
const valid = validators.isMappingAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags/items}
*/
test("OperationTagsItems", () => {
const mock = mocks.mockOperationTagsItems();
const valid = validators.isOperationTagsItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security/items}
*/
test("OperationSecurityItems", () => {
const mock = mocks.mockOperationSecurityItems();
const valid = validators.isOperationSecurityItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties/items}
*/
test("SecurityRequirementItems", () => {
const mock = mocks.mockSecurityRequirementItems();
const valid = validators.isSecurityRequirementItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes/additionalProperties}
*/
test("ScopesImplicitOauthFlowAdditionalProperties", () => {
const mock = mocks.mockScopesImplicitOauthFlowAdditionalProperties();
const valid = validators.isScopesImplicitOauthFlowAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes/additionalProperties}
*/
test("ScopesPasswordOauthFlowAdditionalProperties", () => {
const mock = mocks.mockScopesPasswordOauthFlowAdditionalProperties();
const valid = validators.isScopesPasswordOauthFlowAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes/additionalProperties}
*/
test("ScopesClientCredentialsFlowAdditionalProperties", () => {
const mock = mocks.mockScopesClientCredentialsFlowAdditionalProperties();
const valid = validators.isScopesClientCredentialsFlowAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes/additionalProperties}
*/
test("ScopesAuthorizationCodeOauthFlowAdditionalProperties", () => {
const mock = mocks.mockScopesAuthorizationCodeOauthFlowAdditionalProperties();
const valid = validators.isScopesAuthorizationCodeOauthFlowAdditionalProperties(mock);
assert.equal(valid, true);
});
