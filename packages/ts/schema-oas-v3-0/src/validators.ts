// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.8                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
export interface ValidationError {
path: string;
rule: string;
typeName?: string;
}
const pathPartStack = new Array<string>();
const typeNameStack = new Array<string>();
let errors = new Array<ValidationError>();
let depth = 0;
export function getValidationErrors() {
return errors;
}
export function getLastValidationError() {
if(errors.length === 0) {
throw new TypeError("no validation errors");
}
return errors[errors.length - 1];
}
function withPath<T>(pathPart: string, job: () => T): T {
pathPartStack.push(pathPart);
try {
return job();
}
finally {
pathPartStack.pop();
}
}
function withType<T>(typeName: string, job: () => T): T {
if(typeNameStack.length === 0) {
resetErrors();
}
typeNameStack.push(typeName);
try {
return job();
}
finally {
typeNameStack.pop();
}
}
function resetErrors() {
errors = [];
}
function recordError(rule: string) {
errors.push({
path: pathPartStack.join("/"),
typeName: typeNameStack[typeNameStack.length - 1],
rule,
})
}
/**
* @description The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#}
*/
export function isSchemaDocument(value: unknown): value is types.SchemaDocument {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDocument", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("openapi" in value) ||
value["openapi"] === undefined
) {
recordError("required");
return false;
}
if(
!("info" in value) ||
value["info"] === undefined
) {
recordError("required");
return false;
}
if(
!("paths" in value) ||
value["paths"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "openapi":
if(!withPath(propertyName, () => {
if(!isOpenapi(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "info":
if(!withPath(propertyName, () => {
if(!isPropertiesInfo(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isPropertiesExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "servers":
if(!withPath(propertyName, () => {
if(!isPropertiesServers(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "security":
if(!withPath(propertyName, () => {
if(!isPropertiesSecurity(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tags":
if(!withPath(propertyName, () => {
if(!isPropertiesTags(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "paths":
if(!withPath(propertyName, () => {
if(!isPropertiesPaths(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "components":
if(!withPath(propertyName, () => {
if(!isPropertiesComponents(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isPatternPropertiesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Reference}
*/
export function isReference(value: unknown): value is types.Reference {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Reference", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("$ref" in value) ||
value["$ref"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^\\$ref$").test(propertyName) &&
!isReferenceRef(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info}
*/
export function isDefinitionsInfo(value: unknown): value is types.DefinitionsInfo {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsInfo", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("title" in value) ||
value["title"] === undefined
) {
recordError("required");
return false;
}
if(
!("version" in value) ||
value["version"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "title":
if(!withPath(propertyName, () => {
if(!isInfoTitle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isInfoDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "termsOfService":
if(!withPath(propertyName, () => {
if(!isTermsOfService(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "contact":
if(!withPath(propertyName, () => {
if(!isInfoContact(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "license":
if(!withPath(propertyName, () => {
if(!isInfoLicense(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "version":
if(!withPath(propertyName, () => {
if(!isVersion(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isInfoX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isInfoAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact}
*/
export function isDefinitionsContact(value: unknown): value is types.DefinitionsContact {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsContact", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isContactName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isContactUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "email":
if(!withPath(propertyName, () => {
if(!isEmail(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isContactX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isContactAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License}
*/
export function isDefinitionsLicense(value: unknown): value is types.DefinitionsLicense {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsLicense", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isLicenseName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isLicenseUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isLicenseX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isLicenseAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server}
*/
export function isDefinitionsServer(value: unknown): value is types.DefinitionsServer {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsServer", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("url" in value) ||
value["url"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "url":
if(!withPath(propertyName, () => {
if(!isServerUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isServerDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "variables":
if(!withPath(propertyName, () => {
if(!isVariables(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isServerX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isServerAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable}
*/
export function isServerVariable(value: unknown): value is types.ServerVariable {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariable", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("default" in value) ||
value["default"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "enum":
if(!withPath(propertyName, () => {
if(!isServerVariableEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isServerVariableDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isServerVariableDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isServerVariableX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isServerVariableAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components}
*/
export function isDefinitionsComponents(value: unknown): value is types.DefinitionsComponents {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsComponents", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "schemas":
if(!withPath(propertyName, () => {
if(!isSchemas(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "responses":
if(!withPath(propertyName, () => {
if(!isComponentsResponses(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isComponentsParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "examples":
if(!withPath(propertyName, () => {
if(!isComponentsExamples(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "requestBodies":
if(!withPath(propertyName, () => {
if(!isRequestBodies(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "headers":
if(!withPath(propertyName, () => {
if(!isComponentsHeaders(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "securitySchemes":
if(!withPath(propertyName, () => {
if(!isSecuritySchemes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "links":
if(!withPath(propertyName, () => {
if(!isComponentsLinks(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "callbacks":
if(!withPath(propertyName, () => {
if(!isComponentsCallbacks(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isComponentsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isComponentsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema}
*/
export function isDefinitionsSchema(value: unknown): value is types.DefinitionsSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSchema", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "title":
if(!withPath(propertyName, () => {
if(!isSchemaTitle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxProperties":
if(!withPath(propertyName, () => {
if(!isMaxProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minProperties":
if(!withPath(propertyName, () => {
if(!isMinProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "not":
if(!withPath(propertyName, () => {
if(!isSchemaNot(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allOf":
if(!withPath(propertyName, () => {
if(!isAllOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "oneOf":
if(!withPath(propertyName, () => {
if(!isOneOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "anyOf":
if(!withPath(propertyName, () => {
if(!isAnyOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isPropertiesSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "properties":
if(!withPath(propertyName, () => {
if(!isProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "additionalProperties":
if(!withPath(propertyName, () => {
if(!isPropertiesSchemaAdditionalProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "nullable":
if(!withPath(propertyName, () => {
if(!isNullable(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "discriminator":
if(!withPath(propertyName, () => {
if(!isSchemaDiscriminator(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "readOnly":
if(!withPath(propertyName, () => {
if(!isReadOnly(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "writeOnly":
if(!withPath(propertyName, () => {
if(!isWriteOnly(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isSchemaExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isSchemaExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "deprecated":
if(!withPath(propertyName, () => {
if(!isSchemaDeprecated(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "xml":
if(!withPath(propertyName, () => {
if(!isSchemaXml(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isSchemaPatternPropertiesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator}
*/
export function isDefinitionsDiscriminator(value: unknown): value is types.DefinitionsDiscriminator {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsDiscriminator", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("propertyName" in value) ||
value["propertyName"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "propertyName":
if(!withPath(propertyName, () => {
if(!isPropertyName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "mapping":
if(!withPath(propertyName, () => {
if(!isMapping(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML}
*/
export function isDefinitionsXml(value: unknown): value is types.DefinitionsXml {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsXml", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isXmlName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "namespace":
if(!withPath(propertyName, () => {
if(!isNamespace(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "prefix":
if(!withPath(propertyName, () => {
if(!isPrefix(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "attribute":
if(!withPath(propertyName, () => {
if(!isAttribute(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "wrapped":
if(!withPath(propertyName, () => {
if(!isWrapped(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isXmlX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isXmlAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response}
*/
export function isResponse(value: unknown): value is types.Response {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Response", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("description" in value) ||
value["description"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isResponseDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "headers":
if(!withPath(propertyName, () => {
if(!isResponseHeaders(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "content":
if(!withPath(propertyName, () => {
if(!isResponseContent(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "links":
if(!withPath(propertyName, () => {
if(!isResponseLinks(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isResponseX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isResponseAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType}
*/
export function isMediaType(value: unknown): value is types.MediaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaType", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "schema":
if(!withPath(propertyName, () => {
if(!isMediaTypeSchema(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isMediaTypeExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "examples":
if(!withPath(propertyName, () => {
if(!isMediaTypeExamples(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "encoding":
if(!withPath(propertyName, () => {
if(!isMediaTypeEncoding(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isMediaTypeX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsMediaTypeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
{
let counter = 0;
if(counter === 0 && isAllOfMediaType0(value)) {
counter += 1;
}
if(counter < 1) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example}
*/
export function isDefinitionsExample(value: unknown): value is types.DefinitionsExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsExample", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "summary":
if(!withPath(propertyName, () => {
if(!isExampleSummary(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isExampleDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "value":
if(!withPath(propertyName, () => {
if(!isValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalValue":
if(!withPath(propertyName, () => {
if(!isExternalValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isExampleX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isExampleAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header}
*/
export function isHeader(value: unknown): value is types.Header {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Header", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isHeaderDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isHeaderRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "deprecated":
if(!withPath(propertyName, () => {
if(!isHeaderDeprecated(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowEmptyValue":
if(!withPath(propertyName, () => {
if(!isHeaderAllowEmptyValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isHeaderStyle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "explode":
if(!withPath(propertyName, () => {
if(!isHeaderExplode(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowReserved":
if(!withPath(propertyName, () => {
if(!isHeaderAllowReserved(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schema":
if(!withPath(propertyName, () => {
if(!isHeaderSchema(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "content":
if(!withPath(propertyName, () => {
if(!isHeaderContent(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isHeaderExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "examples":
if(!withPath(propertyName, () => {
if(!isHeaderExamples(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isHeaderX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isHeaderAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
{
let counter = 0;
if(counter === 0 && isHeaderAllOf0(value)) {
counter += 1;
}
if(counter === 1 && isHeaderAllOf1(value)) {
counter += 1;
}
if(counter < 2) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths}
*/
export function isDefinitionsPaths(value: unknown): value is types.DefinitionsPaths {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsPaths", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^\\/").test(propertyName) &&
!isPatternProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isPathsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isPathsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem}
*/
export function isPathItem(value: unknown): value is types.PathItem {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItem", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$ref":
if(!withPath(propertyName, () => {
if(!isPathItemRef(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "summary":
if(!withPath(propertyName, () => {
if(!isPathItemSummary(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isPathItemDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "servers":
if(!withPath(propertyName, () => {
if(!isPathItemServers(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isPathItemParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^(get|put|post|delete|options|head|patch|trace)$").test(propertyName) &&
!isGetPutPostDeleteOptionsHeadPatchTrace(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isPathItemX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isPathItemAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation}
*/
export function isOperation(value: unknown): value is types.Operation {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Operation", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("responses" in value) ||
value["responses"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "tags":
if(!withPath(propertyName, () => {
if(!isOperationTags(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "summary":
if(!withPath(propertyName, () => {
if(!isOperationSummary(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOperationDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isOperationExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "operationId":
if(!withPath(propertyName, () => {
if(!isOperationOperationId(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isOperationParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "requestBody":
if(!withPath(propertyName, () => {
if(!isOperationRequestBody(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "responses":
if(!withPath(propertyName, () => {
if(!isOperationResponses(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "callbacks":
if(!withPath(propertyName, () => {
if(!isOperationCallbacks(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "deprecated":
if(!withPath(propertyName, () => {
if(!isOperationDeprecated(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "security":
if(!withPath(propertyName, () => {
if(!isOperationSecurity(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "servers":
if(!withPath(propertyName, () => {
if(!isOperationServers(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isOperationX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isOperationAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses}
*/
export function isDefinitionsResponses(value: unknown): value is types.DefinitionsResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsResponses", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
let propertyCount = 0;
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
propertyCount++;
switch(propertyName) {
case "default":
if(!withPath(propertyName, () => {
if(!isResponsesDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[1-5](?:\\d{2}|XX)$").test(propertyName) &&
!isResponses15D2Xx(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isResponsesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isResponsesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
if(propertyCount < 1) {
recordError("minimumProperties");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement}
*/
export function isSecurityRequirement(value: unknown): value is types.SecurityRequirement {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirement", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isSecurityRequirementAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag}
*/
export function isTag(value: unknown): value is types.Tag {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Tag", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isTagName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isTagDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isTagExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isTagX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isTagAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation}
*/
export function isExternalDocumentation(value: unknown): value is types.ExternalDocumentation {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocumentation", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("url" in value) ||
value["url"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isExternalDocumentationDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isExternalDocumentationUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isExternalDocumentationX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isExternalDocumentationAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Example and examples are mutually exclusive
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExampleXORExamples}
*/
export function isExampleXorExamples(value: unknown): value is types.ExampleXorExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleXorExamples", () => {
if(isExampleXorExamplesNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Schema and content are mutually exclusive, at least one is required
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent}
*/
export function isSchemaXorContent(value: unknown): value is types.SchemaXorContent {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent", () => {
{
let counter = 0;
if(counter < 2 && isOneOfSchemaXorContent0(value)) {
counter += 1;
}
if(counter < 2 && isOneOfSchemaXorContent1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
if(isDefinitionsSchemaXorContentNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter}
*/
export function isParameter(value: unknown): value is types.Parameter {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
if(
!("in" in value) ||
value["in"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isParameterName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isParameterIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isParameterDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isParameterRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "deprecated":
if(!withPath(propertyName, () => {
if(!isParameterDeprecated(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowEmptyValue":
if(!withPath(propertyName, () => {
if(!isParameterAllowEmptyValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isParameterStyle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "explode":
if(!withPath(propertyName, () => {
if(!isParameterExplode(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowReserved":
if(!withPath(propertyName, () => {
if(!isParameterAllowReserved(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schema":
if(!withPath(propertyName, () => {
if(!isParameterSchema(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "content":
if(!withPath(propertyName, () => {
if(!isParameterContent(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isParameterExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "examples":
if(!withPath(propertyName, () => {
if(!isParameterExamples(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isParameterX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isParameterAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
{
let counter = 0;
if(counter === 0 && isParameterAllOf0(value)) {
counter += 1;
}
if(counter === 1 && isParameterAllOf1(value)) {
counter += 1;
}
if(counter === 2 && isAllOf2(value)) {
counter += 1;
}
if(counter < 3) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Parameter location
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation}
*/
export function isParameterLocation(value: unknown): value is types.ParameterLocation {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation", () => {
{
let counter = 0;
if(counter < 2 && isParameterLocation0(value)) {
counter += 1;
}
if(counter < 2 && isParameterLocation1(value)) {
counter += 1;
}
if(counter < 2 && isParameterLocation2(value)) {
counter += 1;
}
if(counter < 2 && isParameterLocation3(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody}
*/
export function isDefinitionsRequestBody(value: unknown): value is types.DefinitionsRequestBody {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsRequestBody", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("content" in value) ||
value["content"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isRequestBodyDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "content":
if(!withPath(propertyName, () => {
if(!isRequestBodyContent(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isRequestBodyRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isRequestBodyX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isRequestBodyAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme}
*/
export function isSecurityScheme(value: unknown): value is types.SecurityScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityScheme", () => {
{
let counter = 0;
if(counter < 2 && isSecurityScheme0(value)) {
counter += 1;
}
if(counter < 2 && isSecurityScheme1(value)) {
counter += 1;
}
if(counter < 2 && isSecurityScheme2(value)) {
counter += 1;
}
if(counter < 2 && isSecurityScheme3(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme}
*/
export function isApiKeySecurityScheme(value: unknown): value is types.ApiKeySecurityScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityScheme", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
if(
!("in" in value) ||
value["in"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isApiKeySecuritySchemeType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isApiKeySecuritySchemeName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isApiKeySecuritySchemeIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isApiKeySecuritySchemeDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isApiKeySecuritySchemeX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isApiKeySecuritySchemeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme}
*/
export function isHttpSecurityScheme(value: unknown): value is types.HttpSecurityScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecurityScheme", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("scheme" in value) ||
value["scheme"] === undefined
) {
recordError("required");
return false;
}
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "scheme":
if(!withPath(propertyName, () => {
if(!isPropertiesHttpSecuritySchemeScheme(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "bearerFormat":
if(!withPath(propertyName, () => {
if(!isBearerFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isHttpSecuritySchemeDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isHttpSecuritySchemeType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isHttpSecuritySchemeX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isHttpSecuritySchemeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
{
let counter = 0;
if(counter < 2 && isHttpSecurityScheme0(value)) {
counter += 1;
}
if(counter < 2 && isHttpSecurityScheme1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme}
*/
export function isOauth2SecurityScheme(value: unknown): value is types.Oauth2SecurityScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2SecurityScheme", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("flows" in value) ||
value["flows"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOauth2SecuritySchemeType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "flows":
if(!withPath(propertyName, () => {
if(!isFlows(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOauth2SecuritySchemeDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isOauth2SecuritySchemeX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isOauth2SecuritySchemeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme}
*/
export function isOpenIdConnectSecurityScheme(value: unknown): value is types.OpenIdConnectSecurityScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectSecurityScheme", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("openIdConnectUrl" in value) ||
value["openIdConnectUrl"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOpenIdConnectSecuritySchemeType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "openIdConnectUrl":
if(!withPath(propertyName, () => {
if(!isOpenIdConnectUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOpenIdConnectSecuritySchemeDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isOpenIdConnectSecuritySchemeX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isOpenIdConnectSecuritySchemeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows}
*/
export function isOauthFlows(value: unknown): value is types.OauthFlows {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OauthFlows", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "implicit":
if(!withPath(propertyName, () => {
if(!isImplicit(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "password":
if(!withPath(propertyName, () => {
if(!isPassword(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "clientCredentials":
if(!withPath(propertyName, () => {
if(!isClientCredentials(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "authorizationCode":
if(!withPath(propertyName, () => {
if(!isAuthorizationCode(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isOauthFlowsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isOauthFlowsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow}
*/
export function isImplicitOauthFlow(value: unknown): value is types.ImplicitOauthFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ImplicitOauthFlow", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("authorizationUrl" in value) ||
value["authorizationUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("scopes" in value) ||
value["scopes"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "authorizationUrl":
if(!withPath(propertyName, () => {
if(!isImplicitOauthFlowAuthorizationUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "refreshUrl":
if(!withPath(propertyName, () => {
if(!isImplicitOauthFlowRefreshUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isImplicitOauthFlowScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isImplicitOauthFlowX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsImplicitOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow}
*/
export function isPasswordOauthFlow(value: unknown): value is types.PasswordOauthFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PasswordOauthFlow", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("scopes" in value) ||
value["scopes"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isPasswordOauthFlowTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "refreshUrl":
if(!withPath(propertyName, () => {
if(!isPasswordOauthFlowRefreshUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isPasswordOauthFlowScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isPasswordOauthFlowX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsPasswordOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow}
*/
export function isClientCredentialsFlow(value: unknown): value is types.ClientCredentialsFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentialsFlow", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("scopes" in value) ||
value["scopes"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isClientCredentialsFlowTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "refreshUrl":
if(!withPath(propertyName, () => {
if(!isClientCredentialsFlowRefreshUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isClientCredentialsFlowScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isClientCredentialsFlowX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsClientCredentialsFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow}
*/
export function isAuthorizationCodeOauthFlow(value: unknown): value is types.AuthorizationCodeOauthFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlow", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("authorizationUrl" in value) ||
value["authorizationUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("scopes" in value) ||
value["scopes"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "authorizationUrl":
if(!withPath(propertyName, () => {
if(!isAuthorizationCodeOauthFlowAuthorizationUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isAuthorizationCodeOauthFlowTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "refreshUrl":
if(!withPath(propertyName, () => {
if(!isAuthorizationCodeOauthFlowRefreshUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isAuthorizationCodeOauthFlowScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isAuthorizationCodeOauthFlowX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link}
*/
export function isLink(value: unknown): value is types.Link {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Link", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "operationId":
if(!withPath(propertyName, () => {
if(!isLinkOperationId(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "operationRef":
if(!withPath(propertyName, () => {
if(!isOperationRef(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isLinkParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "requestBody":
if(!withPath(propertyName, () => {
if(!isLinkRequestBody(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isLinkDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "server":
if(!withPath(propertyName, () => {
if(!isLinkServer(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isLinkX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isDefinitionsLinkAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
if(isLinkNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback}
*/
export function isCallback(value: unknown): value is types.Callback {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Callback", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^x-").test(propertyName) &&
!isCallbackX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
else
if(!withPath(propertyName, () => {
if(
!isCallbackAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding}
*/
export function isDefinitionsEncoding(value: unknown): value is types.DefinitionsEncoding {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsEncoding", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "contentType":
if(!withPath(propertyName, () => {
if(!isContentType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "headers":
if(!withPath(propertyName, () => {
if(!isEncodingHeaders(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isEncodingStyle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "explode":
if(!withPath(propertyName, () => {
if(!isEncodingExplode(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowReserved":
if(!withPath(propertyName, () => {
if(!isEncodingAllowReserved(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
!isDefinitionsEncodingAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/openapi}
*/
export function isOpenapi(value: unknown): value is types.Openapi {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Openapi", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
if(
typeof value === "string"
) {
if(
!new RegExp("^3\\.0\\.\\d(-.+)?$").test(value)
) {
recordError("valuePattern");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/info}
*/
export function isPropertiesInfo(value: unknown): value is types.PropertiesInfo {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesInfo", () => {
if(!isDefinitionsInfo(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/externalDocs}
*/
export function isPropertiesExternalDocs(value: unknown): value is types.PropertiesExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesExternalDocs", () => {
if(!isExternalDocumentation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/servers}
*/
export function isPropertiesServers(value: unknown): value is types.PropertiesServers {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesServers", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPropertiesServersItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security}
*/
export function isPropertiesSecurity(value: unknown): value is types.PropertiesSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSecurity", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPropertiesSecurityItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/tags}
*/
export function isPropertiesTags(value: unknown): value is types.PropertiesTags {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesTags", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPropertiesTagsItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/paths}
*/
export function isPropertiesPaths(value: unknown): value is types.PropertiesPaths {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesPaths", () => {
if(!isDefinitionsPaths(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/components}
*/
export function isPropertiesComponents(value: unknown): value is types.PropertiesComponents {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesComponents", () => {
if(!isDefinitionsComponents(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/additionalProperties}
*/
export function isAdditionalProperties(value: unknown): value is types.AdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/patternProperties/^x-}
*/
export function isPatternPropertiesX(value: unknown): value is types.PatternPropertiesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PatternPropertiesX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Reference/patternProperties/^\$ref$}
*/
export function isReferenceRef(value: unknown): value is types.ReferenceRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ReferenceRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/title}
*/
export function isInfoTitle(value: unknown): value is types.InfoTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoTitle", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/description}
*/
export function isInfoDescription(value: unknown): value is types.InfoDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/termsOfService}
*/
export function isTermsOfService(value: unknown): value is types.TermsOfService {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TermsOfService", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/contact}
*/
export function isInfoContact(value: unknown): value is types.InfoContact {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoContact", () => {
if(!isDefinitionsContact(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/license}
*/
export function isInfoLicense(value: unknown): value is types.InfoLicense {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoLicense", () => {
if(!isDefinitionsLicense(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/properties/version}
*/
export function isVersion(value: unknown): value is types.Version {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Version", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/additionalProperties}
*/
export function isInfoAdditionalProperties(value: unknown): value is types.InfoAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Info/patternProperties/^x-}
*/
export function isInfoX(value: unknown): value is types.InfoX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/name}
*/
export function isContactName(value: unknown): value is types.ContactName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/url}
*/
export function isContactUrl(value: unknown): value is types.ContactUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/properties/email}
*/
export function isEmail(value: unknown): value is types.Email {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Email", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/additionalProperties}
*/
export function isContactAdditionalProperties(value: unknown): value is types.ContactAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Contact/patternProperties/^x-}
*/
export function isContactX(value: unknown): value is types.ContactX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/properties/name}
*/
export function isLicenseName(value: unknown): value is types.LicenseName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/properties/url}
*/
export function isLicenseUrl(value: unknown): value is types.LicenseUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/additionalProperties}
*/
export function isLicenseAdditionalProperties(value: unknown): value is types.LicenseAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/License/patternProperties/^x-}
*/
export function isLicenseX(value: unknown): value is types.LicenseX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/url}
*/
export function isServerUrl(value: unknown): value is types.ServerUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/description}
*/
export function isServerDescription(value: unknown): value is types.ServerDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/variables}
*/
export function isVariables(value: unknown): value is types.Variables {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Variables", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isVariablesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/additionalProperties}
*/
export function isServerAdditionalProperties(value: unknown): value is types.ServerAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/patternProperties/^x-}
*/
export function isServerX(value: unknown): value is types.ServerX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum}
*/
export function isServerVariableEnum(value: unknown): value is types.ServerVariableEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableEnum", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isServerVariableEnumItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/default}
*/
export function isServerVariableDefault(value: unknown): value is types.ServerVariableDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableDefault", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/description}
*/
export function isServerVariableDescription(value: unknown): value is types.ServerVariableDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/additionalProperties}
*/
export function isServerVariableAdditionalProperties(value: unknown): value is types.ServerVariableAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/patternProperties/^x-}
*/
export function isServerVariableX(value: unknown): value is types.ServerVariableX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas}
*/
export function isSchemas(value: unknown): value is types.Schemas {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schemas", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isSchemasAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses}
*/
export function isComponentsResponses(value: unknown): value is types.ComponentsResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsResponses", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isResponsesAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters}
*/
export function isComponentsParameters(value: unknown): value is types.ComponentsParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsParameters", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isParametersAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples}
*/
export function isComponentsExamples(value: unknown): value is types.ComponentsExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsExamples", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isExamplesAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies}
*/
export function isRequestBodies(value: unknown): value is types.RequestBodies {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodies", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isRequestBodiesAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers}
*/
export function isComponentsHeaders(value: unknown): value is types.ComponentsHeaders {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsHeaders", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isHeadersAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes}
*/
export function isSecuritySchemes(value: unknown): value is types.SecuritySchemes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecuritySchemes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isSecuritySchemesAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links}
*/
export function isComponentsLinks(value: unknown): value is types.ComponentsLinks {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsLinks", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isLinksAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks}
*/
export function isComponentsCallbacks(value: unknown): value is types.ComponentsCallbacks {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsCallbacks", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
new RegExp("^[a-zA-Z0-9\\.\\-_]+$").test(propertyName) &&
!isCallbacksAZAZ09(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/additionalProperties}
*/
export function isComponentsAdditionalProperties(value: unknown): value is types.ComponentsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/patternProperties/^x-}
*/
export function isComponentsX(value: unknown): value is types.ComponentsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ComponentsX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/title}
*/
export function isSchemaTitle(value: unknown): value is types.SchemaTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaTitle", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/multipleOf}
*/
export function isMultipleOf(value: unknown): value is types.MultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MultipleOf", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value <= 0
) {
recordError("minimumExclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maximum}
*/
export function isMaximum(value: unknown): value is types.Maximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Maximum", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMaximum}
*/
export function isExclusiveMaximum(value: unknown): value is types.ExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExclusiveMaximum", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minimum}
*/
export function isMinimum(value: unknown): value is types.Minimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Minimum", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/exclusiveMinimum}
*/
export function isExclusiveMinimum(value: unknown): value is types.ExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExclusiveMinimum", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxLength}
*/
export function isMaxLength(value: unknown): value is types.MaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MaxLength", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minLength}
*/
export function isMinLength(value: unknown): value is types.MinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MinLength", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/pattern}
*/
export function isPattern(value: unknown): value is types.Pattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Pattern", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxItems}
*/
export function isMaxItems(value: unknown): value is types.MaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MaxItems", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minItems}
*/
export function isMinItems(value: unknown): value is types.MinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MinItems", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/uniqueItems}
*/
export function isUniqueItems(value: unknown): value is types.UniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("UniqueItems", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/maxProperties}
*/
export function isMaxProperties(value: unknown): value is types.MaxProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MaxProperties", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/minProperties}
*/
export function isMinProperties(value: unknown): value is types.MinProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MinProperties", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required}
*/
export function isSchemaRequired(value: unknown): value is types.SchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaRequired", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isRequiredItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/enum}
*/
export function isSchemaEnum(value: unknown): value is types.SchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaEnum", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isSchemaEnumItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/type}
*/
export function isSchemaType(value: unknown): value is types.SchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaType", () => {
if(
value !== "array" &&
value !== "boolean" &&
value !== "integer" &&
value !== "number" &&
value !== "object" &&
value !== "string"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not}
*/
export function isSchemaNot(value: unknown): value is types.SchemaNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaNot", () => {
{
let counter = 0;
if(counter < 2 && isNot0(value)) {
counter += 1;
}
if(counter < 2 && isNot1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf}
*/
export function isAllOf(value: unknown): value is types.AllOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOf", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isAllOfItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf}
*/
export function isOneOf(value: unknown): value is types.OneOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isOneOfSchemaItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf}
*/
export function isAnyOf(value: unknown): value is types.AnyOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AnyOf", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isAnyOfItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items}
*/
export function isPropertiesSchemaItems(value: unknown): value is types.PropertiesSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSchemaItems", () => {
{
let counter = 0;
if(counter < 2 && isItems0(value)) {
counter += 1;
}
if(counter < 2 && isItems1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties}
*/
export function isProperties(value: unknown): value is types.Properties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Properties", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isPropertiesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties}
*/
export function isPropertiesSchemaAdditionalProperties(value: unknown): value is types.PropertiesSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSchemaAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isSchema0(value)) {
counter += 1;
}
if(counter < 2 && isSchema1(value)) {
counter += 1;
}
if(counter < 2 && isSchema2(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/description}
*/
export function isSchemaDescription(value: unknown): value is types.SchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/format}
*/
export function isFormat(value: unknown): value is types.Format {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Format", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/default}
*/
export function isSchemaDefault(value: unknown): value is types.SchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDefault", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/nullable}
*/
export function isNullable(value: unknown): value is types.Nullable {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Nullable", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/discriminator}
*/
export function isSchemaDiscriminator(value: unknown): value is types.SchemaDiscriminator {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDiscriminator", () => {
if(!isDefinitionsDiscriminator(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/readOnly}
*/
export function isReadOnly(value: unknown): value is types.ReadOnly {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ReadOnly", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/writeOnly}
*/
export function isWriteOnly(value: unknown): value is types.WriteOnly {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("WriteOnly", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/example}
*/
export function isSchemaExample(value: unknown): value is types.SchemaExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/externalDocs}
*/
export function isSchemaExternalDocs(value: unknown): value is types.SchemaExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExternalDocs", () => {
if(!isExternalDocumentation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/deprecated}
*/
export function isSchemaDeprecated(value: unknown): value is types.SchemaDeprecated {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDeprecated", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/xml}
*/
export function isSchemaXml(value: unknown): value is types.SchemaXml {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXml", () => {
if(!isDefinitionsXml(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/additionalProperties}
*/
export function isDefinitionsSchemaAdditionalProperties(value: unknown): value is types.DefinitionsSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/patternProperties/^x-}
*/
export function isSchemaPatternPropertiesX(value: unknown): value is types.SchemaPatternPropertiesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaPatternPropertiesX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/propertyName}
*/
export function isPropertyName(value: unknown): value is types.PropertyName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertyName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping}
*/
export function isMapping(value: unknown): value is types.Mapping {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Mapping", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isMappingAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/name}
*/
export function isXmlName(value: unknown): value is types.XmlName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/namespace}
*/
export function isNamespace(value: unknown): value is types.Namespace {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Namespace", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/prefix}
*/
export function isPrefix(value: unknown): value is types.Prefix {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Prefix", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/attribute}
*/
export function isAttribute(value: unknown): value is types.Attribute {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Attribute", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/properties/wrapped}
*/
export function isWrapped(value: unknown): value is types.Wrapped {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Wrapped", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/additionalProperties}
*/
export function isXmlAdditionalProperties(value: unknown): value is types.XmlAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/XML/patternProperties/^x-}
*/
export function isXmlX(value: unknown): value is types.XmlX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/description}
*/
export function isResponseDescription(value: unknown): value is types.ResponseDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers}
*/
export function isResponseHeaders(value: unknown): value is types.ResponseHeaders {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseHeaders", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isHeadersAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/content}
*/
export function isResponseContent(value: unknown): value is types.ResponseContent {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseContent", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isResponseContentAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links}
*/
export function isResponseLinks(value: unknown): value is types.ResponseLinks {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseLinks", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isLinksAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/additionalProperties}
*/
export function isResponseAdditionalProperties(value: unknown): value is types.ResponseAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/patternProperties/^x-}
*/
export function isResponseX(value: unknown): value is types.ResponseX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema}
*/
export function isMediaTypeSchema(value: unknown): value is types.MediaTypeSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeSchema", () => {
{
let counter = 0;
if(counter < 2 && isSchemaMediaType0(value)) {
counter += 1;
}
if(counter < 2 && isSchemaMediaType1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/example}
*/
export function isMediaTypeExample(value: unknown): value is types.MediaTypeExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples}
*/
export function isMediaTypeExamples(value: unknown): value is types.MediaTypeExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeExamples", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isExamplesMediaTypeAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/encoding}
*/
export function isMediaTypeEncoding(value: unknown): value is types.MediaTypeEncoding {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeEncoding", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isMediaTypeEncodingAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/additionalProperties}
*/
export function isDefinitionsMediaTypeAdditionalProperties(value: unknown): value is types.DefinitionsMediaTypeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMediaTypeAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/patternProperties/^x-}
*/
export function isMediaTypeX(value: unknown): value is types.MediaTypeX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/allOf/0}
*/
export function isAllOfMediaType0(value: unknown): value is types.AllOfMediaType0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfMediaType0", () => {
if(!isExampleXorExamples(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/summary}
*/
export function isExampleSummary(value: unknown): value is types.ExampleSummary {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleSummary", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/description}
*/
export function isExampleDescription(value: unknown): value is types.ExampleDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/value}
*/
export function isValue(value: unknown): value is types.Value {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Value", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/properties/externalValue}
*/
export function isExternalValue(value: unknown): value is types.ExternalValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalValue", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/additionalProperties}
*/
export function isExampleAdditionalProperties(value: unknown): value is types.ExampleAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Example/patternProperties/^x-}
*/
export function isExampleX(value: unknown): value is types.ExampleX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/description}
*/
export function isHeaderDescription(value: unknown): value is types.HeaderDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/required}
*/
export function isHeaderRequired(value: unknown): value is types.HeaderRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/deprecated}
*/
export function isHeaderDeprecated(value: unknown): value is types.HeaderDeprecated {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderDeprecated", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowEmptyValue}
*/
export function isHeaderAllowEmptyValue(value: unknown): value is types.HeaderAllowEmptyValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAllowEmptyValue", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/style}
*/
export function isHeaderStyle(value: unknown): value is types.HeaderStyle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderStyle", () => {
if(
value !== "simple"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/explode}
*/
export function isHeaderExplode(value: unknown): value is types.HeaderExplode {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExplode", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/allowReserved}
*/
export function isHeaderAllowReserved(value: unknown): value is types.HeaderAllowReserved {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAllowReserved", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema}
*/
export function isHeaderSchema(value: unknown): value is types.HeaderSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderSchema", () => {
{
let counter = 0;
if(counter < 2 && isHeader0(value)) {
counter += 1;
}
if(counter < 2 && isHeader1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/content}
*/
export function isHeaderContent(value: unknown): value is types.HeaderContent {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderContent", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
let propertyCount = 0;
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
propertyCount++;
if(propertyCount > 1) {
recordError("maximumProperties");
return false;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isHeaderContentAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
if(propertyCount < 1) {
recordError("minimumProperties");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/example}
*/
export function isHeaderExample(value: unknown): value is types.HeaderExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples}
*/
export function isHeaderExamples(value: unknown): value is types.HeaderExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExamples", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isHeaderExamplesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/additionalProperties}
*/
export function isHeaderAdditionalProperties(value: unknown): value is types.HeaderAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/patternProperties/^x-}
*/
export function isHeaderX(value: unknown): value is types.HeaderX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/allOf/0}
*/
export function isHeaderAllOf0(value: unknown): value is types.HeaderAllOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAllOf0", () => {
if(!isExampleXorExamples(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/allOf/1}
*/
export function isHeaderAllOf1(value: unknown): value is types.HeaderAllOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAllOf1", () => {
if(!isSchemaXorContent(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/additionalProperties}
*/
export function isPathsAdditionalProperties(value: unknown): value is types.PathsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/patternProperties/^\/}
*/
export function isPatternProperties(value: unknown): value is types.PatternProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PatternProperties", () => {
if(!isPathItem(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Paths/patternProperties/^x-}
*/
export function isPathsX(value: unknown): value is types.PathsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathsX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/$ref}
*/
export function isPathItemRef(value: unknown): value is types.PathItemRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/summary}
*/
export function isPathItemSummary(value: unknown): value is types.PathItemSummary {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemSummary", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/description}
*/
export function isPathItemDescription(value: unknown): value is types.PathItemDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/servers}
*/
export function isPathItemServers(value: unknown): value is types.PathItemServers {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemServers", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPathItemServersItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters}
*/
export function isPathItemParameters(value: unknown): value is types.PathItemParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemParameters", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPathItemItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/additionalProperties}
*/
export function isPathItemAdditionalProperties(value: unknown): value is types.PathItemAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/patternProperties/^(get|put|post|delete|options|head|patch|trace)$}
*/
export function isGetPutPostDeleteOptionsHeadPatchTrace(value: unknown): value is types.GetPutPostDeleteOptionsHeadPatchTrace {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("GetPutPostDeleteOptionsHeadPatchTrace", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/patternProperties/^x-}
*/
export function isPathItemX(value: unknown): value is types.PathItemX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags}
*/
export function isOperationTags(value: unknown): value is types.OperationTags {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationTags", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isOperationTagsItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/summary}
*/
export function isOperationSummary(value: unknown): value is types.OperationSummary {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationSummary", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/description}
*/
export function isOperationDescription(value: unknown): value is types.OperationDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/externalDocs}
*/
export function isOperationExternalDocs(value: unknown): value is types.OperationExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationExternalDocs", () => {
if(!isExternalDocumentation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/operationId}
*/
export function isOperationOperationId(value: unknown): value is types.OperationOperationId {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationOperationId", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters}
*/
export function isOperationParameters(value: unknown): value is types.OperationParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationParameters", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isParametersItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody}
*/
export function isOperationRequestBody(value: unknown): value is types.OperationRequestBody {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationRequestBody", () => {
{
let counter = 0;
if(counter < 2 && isRequestBody0(value)) {
counter += 1;
}
if(counter < 2 && isRequestBody1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/responses}
*/
export function isOperationResponses(value: unknown): value is types.OperationResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationResponses", () => {
if(!isDefinitionsResponses(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks}
*/
export function isOperationCallbacks(value: unknown): value is types.OperationCallbacks {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationCallbacks", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isCallbacksAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/deprecated}
*/
export function isOperationDeprecated(value: unknown): value is types.OperationDeprecated {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationDeprecated", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security}
*/
export function isOperationSecurity(value: unknown): value is types.OperationSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationSecurity", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isOperationSecurityItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/servers}
*/
export function isOperationServers(value: unknown): value is types.OperationServers {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationServers", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isOperationServersItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/additionalProperties}
*/
export function isOperationAdditionalProperties(value: unknown): value is types.OperationAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/patternProperties/^x-}
*/
export function isOperationX(value: unknown): value is types.OperationX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default}
*/
export function isResponsesDefault(value: unknown): value is types.ResponsesDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesDefault", () => {
{
let counter = 0;
if(counter < 2 && isDefault0(value)) {
counter += 1;
}
if(counter < 2 && isDefault1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/additionalProperties}
*/
export function isResponsesAdditionalProperties(value: unknown): value is types.ResponsesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$}
*/
export function isResponses15D2Xx(value: unknown): value is types.Responses15D2Xx {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses15D2Xx", () => {
{
let counter = 0;
if(counter < 2 && isResponses15D2Xx0(value)) {
counter += 1;
}
if(counter < 2 && isResponses15D2Xx1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^x-}
*/
export function isResponsesX(value: unknown): value is types.ResponsesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties}
*/
export function isSecurityRequirementAdditionalProperties(value: unknown): value is types.SecurityRequirementAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirementAdditionalProperties", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isSecurityRequirementItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/name}
*/
export function isTagName(value: unknown): value is types.TagName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/description}
*/
export function isTagDescription(value: unknown): value is types.TagDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/properties/externalDocs}
*/
export function isTagExternalDocs(value: unknown): value is types.TagExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagExternalDocs", () => {
if(!isExternalDocumentation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/additionalProperties}
*/
export function isTagAdditionalProperties(value: unknown): value is types.TagAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Tag/patternProperties/^x-}
*/
export function isTagX(value: unknown): value is types.TagX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/properties/description}
*/
export function isExternalDocumentationDescription(value: unknown): value is types.ExternalDocumentationDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocumentationDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/properties/url}
*/
export function isExternalDocumentationUrl(value: unknown): value is types.ExternalDocumentationUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocumentationUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/additionalProperties}
*/
export function isExternalDocumentationAdditionalProperties(value: unknown): value is types.ExternalDocumentationAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocumentationAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExternalDocumentation/patternProperties/^x-}
*/
export function isExternalDocumentationX(value: unknown): value is types.ExternalDocumentationX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocumentationX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ExampleXORExamples/not}
*/
export function isExampleXorExamplesNot(value: unknown): value is types.ExampleXorExamplesNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExampleXorExamplesNot", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("example" in value) ||
value["example"] === undefined
) {
recordError("required");
return false;
}
if(
!("examples" in value) ||
value["examples"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/0}
*/
export function isOneOfSchemaXorContent0(value: unknown): value is types.OneOfSchemaXorContent0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOfSchemaXorContent0", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("schema" in value) ||
value["schema"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Some properties are not allowed if content is present
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1}
*/
export function isOneOfSchemaXorContent1(value: unknown): value is types.OneOfSchemaXorContent1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOfSchemaXorContent1", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("content" in value) ||
value["content"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
{
let counter = 0;
if(counter === 0 && isAllOfSchemaXorContent0(value)) {
counter += 1;
}
if(counter === 1 && isAllOfSchemaXorContent1(value)) {
counter += 1;
}
if(counter === 2 && isSchemaXorContent2(value)) {
counter += 1;
}
if(counter === 3 && isSchemaXorContent3(value)) {
counter += 1;
}
if(counter === 4 && isSchemaXorContent4(value)) {
counter += 1;
}
if(counter < 5) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/not}
*/
export function isDefinitionsSchemaXorContentNot(value: unknown): value is types.DefinitionsSchemaXorContentNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSchemaXorContentNot", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("schema" in value) ||
value["schema"] === undefined
) {
recordError("required");
return false;
}
if(
!("content" in value) ||
value["content"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/name}
*/
export function isParameterName(value: unknown): value is types.ParameterName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/in}
*/
export function isParameterIn(value: unknown): value is types.ParameterIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterIn", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/description}
*/
export function isParameterDescription(value: unknown): value is types.ParameterDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/required}
*/
export function isParameterRequired(value: unknown): value is types.ParameterRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/deprecated}
*/
export function isParameterDeprecated(value: unknown): value is types.ParameterDeprecated {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterDeprecated", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowEmptyValue}
*/
export function isParameterAllowEmptyValue(value: unknown): value is types.ParameterAllowEmptyValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterAllowEmptyValue", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/style}
*/
export function isParameterStyle(value: unknown): value is types.ParameterStyle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterStyle", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/explode}
*/
export function isParameterExplode(value: unknown): value is types.ParameterExplode {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExplode", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/allowReserved}
*/
export function isParameterAllowReserved(value: unknown): value is types.ParameterAllowReserved {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterAllowReserved", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema}
*/
export function isParameterSchema(value: unknown): value is types.ParameterSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterSchema", () => {
{
let counter = 0;
if(counter < 2 && isParameter0(value)) {
counter += 1;
}
if(counter < 2 && isParameter1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/content}
*/
export function isParameterContent(value: unknown): value is types.ParameterContent {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterContent", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
let propertyCount = 0;
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
propertyCount++;
if(propertyCount > 1) {
recordError("maximumProperties");
return false;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isParameterContentAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
if(propertyCount < 1) {
recordError("minimumProperties");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/example}
*/
export function isParameterExample(value: unknown): value is types.ParameterExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples}
*/
export function isParameterExamples(value: unknown): value is types.ParameterExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExamples", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isParameterExamplesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/additionalProperties}
*/
export function isParameterAdditionalProperties(value: unknown): value is types.ParameterAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/patternProperties/^x-}
*/
export function isParameterX(value: unknown): value is types.ParameterX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/0}
*/
export function isParameterAllOf0(value: unknown): value is types.ParameterAllOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterAllOf0", () => {
if(!isExampleXorExamples(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/1}
*/
export function isParameterAllOf1(value: unknown): value is types.ParameterAllOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterAllOf1", () => {
if(!isSchemaXorContent(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/allOf/2}
*/
export function isAllOf2(value: unknown): value is types.AllOf2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOf2", () => {
if(!isParameterLocation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Parameter in path
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0}
*/
export function isParameterLocation0(value: unknown): value is types.ParameterLocation0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation0", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("required" in value) ||
value["required"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "in":
if(!withPath(propertyName, () => {
if(!isOneOf0ParameterLocationIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isOneOf0ParameterLocationStyle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isParameterLocationRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Parameter in query
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1}
*/
export function isParameterLocation1(value: unknown): value is types.ParameterLocation1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation1", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "in":
if(!withPath(propertyName, () => {
if(!isOneOf1ParameterLocationIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isOneOf1ParameterLocationStyle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Parameter in header
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2}
*/
export function isParameterLocation2(value: unknown): value is types.ParameterLocation2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation2", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "in":
if(!withPath(propertyName, () => {
if(!isParameterLocation2In(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isParameterLocation2Style(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Parameter in cookie
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3}
*/
export function isParameterLocation3(value: unknown): value is types.ParameterLocation3 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation3", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "in":
if(!withPath(propertyName, () => {
if(!isParameterLocation3In(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "style":
if(!withPath(propertyName, () => {
if(!isParameterLocation3Style(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/description}
*/
export function isRequestBodyDescription(value: unknown): value is types.RequestBodyDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/content}
*/
export function isRequestBodyContent(value: unknown): value is types.RequestBodyContent {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyContent", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isRequestBodyContentAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/required}
*/
export function isRequestBodyRequired(value: unknown): value is types.RequestBodyRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/additionalProperties}
*/
export function isRequestBodyAdditionalProperties(value: unknown): value is types.RequestBodyAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/patternProperties/^x-}
*/
export function isRequestBodyX(value: unknown): value is types.RequestBodyX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/0}
*/
export function isSecurityScheme0(value: unknown): value is types.SecurityScheme0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityScheme0", () => {
if(!isApiKeySecurityScheme(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/1}
*/
export function isSecurityScheme1(value: unknown): value is types.SecurityScheme1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityScheme1", () => {
if(!isHttpSecurityScheme(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/2}
*/
export function isSecurityScheme2(value: unknown): value is types.SecurityScheme2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityScheme2", () => {
if(!isOauth2SecurityScheme(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityScheme/oneOf/3}
*/
export function isSecurityScheme3(value: unknown): value is types.SecurityScheme3 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityScheme3", () => {
if(!isOpenIdConnectSecurityScheme(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/type}
*/
export function isApiKeySecuritySchemeType(value: unknown): value is types.ApiKeySecuritySchemeType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeType", () => {
if(
value !== "apiKey"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/name}
*/
export function isApiKeySecuritySchemeName(value: unknown): value is types.ApiKeySecuritySchemeName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/in}
*/
export function isApiKeySecuritySchemeIn(value: unknown): value is types.ApiKeySecuritySchemeIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeIn", () => {
if(
value !== "header" &&
value !== "query" &&
value !== "cookie"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/properties/description}
*/
export function isApiKeySecuritySchemeDescription(value: unknown): value is types.ApiKeySecuritySchemeDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/additionalProperties}
*/
export function isApiKeySecuritySchemeAdditionalProperties(value: unknown): value is types.ApiKeySecuritySchemeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/APIKeySecurityScheme/patternProperties/^x-}
*/
export function isApiKeySecuritySchemeX(value: unknown): value is types.ApiKeySecuritySchemeX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecuritySchemeX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/scheme}
*/
export function isPropertiesHttpSecuritySchemeScheme(value: unknown): value is types.PropertiesHttpSecuritySchemeScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesHttpSecuritySchemeScheme", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/bearerFormat}
*/
export function isBearerFormat(value: unknown): value is types.BearerFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BearerFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/description}
*/
export function isHttpSecuritySchemeDescription(value: unknown): value is types.HttpSecuritySchemeDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecuritySchemeDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/properties/type}
*/
export function isHttpSecuritySchemeType(value: unknown): value is types.HttpSecuritySchemeType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecuritySchemeType", () => {
if(
value !== "http"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/additionalProperties}
*/
export function isHttpSecuritySchemeAdditionalProperties(value: unknown): value is types.HttpSecuritySchemeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecuritySchemeAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/patternProperties/^x-}
*/
export function isHttpSecuritySchemeX(value: unknown): value is types.HttpSecuritySchemeX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecuritySchemeX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Bearer
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/0}
*/
export function isHttpSecurityScheme0(value: unknown): value is types.HttpSecurityScheme0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecurityScheme0", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "scheme":
if(!withPath(propertyName, () => {
if(!isOneOf0HttpSecuritySchemeScheme(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Non Bearer
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1}
*/
export function isHttpSecurityScheme1(value: unknown): value is types.HttpSecurityScheme1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecurityScheme1", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "scheme":
if(!withPath(propertyName, () => {
if(!isOneOf1HttpSecuritySchemeScheme(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
break;
}
}
}
if(isHttpSecuritySchemeNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/type}
*/
export function isOauth2SecuritySchemeType(value: unknown): value is types.Oauth2SecuritySchemeType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2SecuritySchemeType", () => {
if(
value !== "oauth2"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/flows}
*/
export function isFlows(value: unknown): value is types.Flows {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Flows", () => {
if(!isOauthFlows(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/properties/description}
*/
export function isOauth2SecuritySchemeDescription(value: unknown): value is types.Oauth2SecuritySchemeDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2SecuritySchemeDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/additionalProperties}
*/
export function isOauth2SecuritySchemeAdditionalProperties(value: unknown): value is types.Oauth2SecuritySchemeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2SecuritySchemeAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuth2SecurityScheme/patternProperties/^x-}
*/
export function isOauth2SecuritySchemeX(value: unknown): value is types.Oauth2SecuritySchemeX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2SecuritySchemeX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/type}
*/
export function isOpenIdConnectSecuritySchemeType(value: unknown): value is types.OpenIdConnectSecuritySchemeType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectSecuritySchemeType", () => {
if(
value !== "openIdConnect"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/openIdConnectUrl}
*/
export function isOpenIdConnectUrl(value: unknown): value is types.OpenIdConnectUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/properties/description}
*/
export function isOpenIdConnectSecuritySchemeDescription(value: unknown): value is types.OpenIdConnectSecuritySchemeDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectSecuritySchemeDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/additionalProperties}
*/
export function isOpenIdConnectSecuritySchemeAdditionalProperties(value: unknown): value is types.OpenIdConnectSecuritySchemeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectSecuritySchemeAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OpenIdConnectSecurityScheme/patternProperties/^x-}
*/
export function isOpenIdConnectSecuritySchemeX(value: unknown): value is types.OpenIdConnectSecuritySchemeX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OpenIdConnectSecuritySchemeX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/implicit}
*/
export function isImplicit(value: unknown): value is types.Implicit {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Implicit", () => {
if(!isImplicitOauthFlow(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/password}
*/
export function isPassword(value: unknown): value is types.Password {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Password", () => {
if(!isPasswordOauthFlow(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/clientCredentials}
*/
export function isClientCredentials(value: unknown): value is types.ClientCredentials {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentials", () => {
if(!isClientCredentialsFlow(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/properties/authorizationCode}
*/
export function isAuthorizationCode(value: unknown): value is types.AuthorizationCode {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCode", () => {
if(!isAuthorizationCodeOauthFlow(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/additionalProperties}
*/
export function isOauthFlowsAdditionalProperties(value: unknown): value is types.OauthFlowsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OauthFlowsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/OAuthFlows/patternProperties/^x-}
*/
export function isOauthFlowsX(value: unknown): value is types.OauthFlowsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OauthFlowsX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/authorizationUrl}
*/
export function isImplicitOauthFlowAuthorizationUrl(value: unknown): value is types.ImplicitOauthFlowAuthorizationUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ImplicitOauthFlowAuthorizationUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/refreshUrl}
*/
export function isImplicitOauthFlowRefreshUrl(value: unknown): value is types.ImplicitOauthFlowRefreshUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ImplicitOauthFlowRefreshUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes}
*/
export function isImplicitOauthFlowScopes(value: unknown): value is types.ImplicitOauthFlowScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ImplicitOauthFlowScopes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isScopesImplicitOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/additionalProperties}
*/
export function isDefinitionsImplicitOauthFlowAdditionalProperties(value: unknown): value is types.DefinitionsImplicitOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsImplicitOauthFlowAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/patternProperties/^x-}
*/
export function isImplicitOauthFlowX(value: unknown): value is types.ImplicitOauthFlowX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ImplicitOauthFlowX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/tokenUrl}
*/
export function isPasswordOauthFlowTokenUrl(value: unknown): value is types.PasswordOauthFlowTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PasswordOauthFlowTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/refreshUrl}
*/
export function isPasswordOauthFlowRefreshUrl(value: unknown): value is types.PasswordOauthFlowRefreshUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PasswordOauthFlowRefreshUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes}
*/
export function isPasswordOauthFlowScopes(value: unknown): value is types.PasswordOauthFlowScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PasswordOauthFlowScopes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isScopesPasswordOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/additionalProperties}
*/
export function isDefinitionsPasswordOauthFlowAdditionalProperties(value: unknown): value is types.DefinitionsPasswordOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsPasswordOauthFlowAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/patternProperties/^x-}
*/
export function isPasswordOauthFlowX(value: unknown): value is types.PasswordOauthFlowX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PasswordOauthFlowX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/tokenUrl}
*/
export function isClientCredentialsFlowTokenUrl(value: unknown): value is types.ClientCredentialsFlowTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentialsFlowTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/refreshUrl}
*/
export function isClientCredentialsFlowRefreshUrl(value: unknown): value is types.ClientCredentialsFlowRefreshUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentialsFlowRefreshUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes}
*/
export function isClientCredentialsFlowScopes(value: unknown): value is types.ClientCredentialsFlowScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentialsFlowScopes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isScopesClientCredentialsFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/additionalProperties}
*/
export function isDefinitionsClientCredentialsFlowAdditionalProperties(value: unknown): value is types.DefinitionsClientCredentialsFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsClientCredentialsFlowAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/patternProperties/^x-}
*/
export function isClientCredentialsFlowX(value: unknown): value is types.ClientCredentialsFlowX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ClientCredentialsFlowX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/authorizationUrl}
*/
export function isAuthorizationCodeOauthFlowAuthorizationUrl(value: unknown): value is types.AuthorizationCodeOauthFlowAuthorizationUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlowAuthorizationUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/tokenUrl}
*/
export function isAuthorizationCodeOauthFlowTokenUrl(value: unknown): value is types.AuthorizationCodeOauthFlowTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlowTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/refreshUrl}
*/
export function isAuthorizationCodeOauthFlowRefreshUrl(value: unknown): value is types.AuthorizationCodeOauthFlowRefreshUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlowRefreshUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes}
*/
export function isAuthorizationCodeOauthFlowScopes(value: unknown): value is types.AuthorizationCodeOauthFlowScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlowScopes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isScopesAuthorizationCodeOauthFlowAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/additionalProperties}
*/
export function isDefinitionsAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): value is types.DefinitionsAuthorizationCodeOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsAuthorizationCodeOauthFlowAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/patternProperties/^x-}
*/
export function isAuthorizationCodeOauthFlowX(value: unknown): value is types.AuthorizationCodeOauthFlowX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AuthorizationCodeOauthFlowX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/operationId}
*/
export function isLinkOperationId(value: unknown): value is types.LinkOperationId {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkOperationId", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/operationRef}
*/
export function isOperationRef(value: unknown): value is types.OperationRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/parameters}
*/
export function isLinkParameters(value: unknown): value is types.LinkParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkParameters", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isParametersLinkAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/requestBody}
*/
export function isLinkRequestBody(value: unknown): value is types.LinkRequestBody {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkRequestBody", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/description}
*/
export function isLinkDescription(value: unknown): value is types.LinkDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/server}
*/
export function isLinkServer(value: unknown): value is types.LinkServer {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkServer", () => {
if(!isDefinitionsServer(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/additionalProperties}
*/
export function isDefinitionsLinkAdditionalProperties(value: unknown): value is types.DefinitionsLinkAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsLinkAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/patternProperties/^x-}
*/
export function isLinkX(value: unknown): value is types.LinkX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Operation Id and Operation Ref are mutually exclusive
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/not}
*/
export function isLinkNot(value: unknown): value is types.LinkNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinkNot", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("operationId" in value) ||
value["operationId"] === undefined
) {
recordError("required");
return false;
}
if(
!("operationRef" in value) ||
value["operationRef"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback/additionalProperties}
*/
export function isCallbackAdditionalProperties(value: unknown): value is types.CallbackAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("CallbackAdditionalProperties", () => {
if(!isPathItem(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Callback/patternProperties/^x-}
*/
export function isCallbackX(value: unknown): value is types.CallbackX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("CallbackX", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/contentType}
*/
export function isContentType(value: unknown): value is types.ContentType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContentType", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers}
*/
export function isEncodingHeaders(value: unknown): value is types.EncodingHeaders {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("EncodingHeaders", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isHeadersEncodingAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/style}
*/
export function isEncodingStyle(value: unknown): value is types.EncodingStyle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("EncodingStyle", () => {
if(
value !== "form" &&
value !== "spaceDelimited" &&
value !== "pipeDelimited" &&
value !== "deepObject"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/explode}
*/
export function isEncodingExplode(value: unknown): value is types.EncodingExplode {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("EncodingExplode", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/allowReserved}
*/
export function isEncodingAllowReserved(value: unknown): value is types.EncodingAllowReserved {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("EncodingAllowReserved", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/additionalProperties}
*/
export function isDefinitionsEncodingAdditionalProperties(value: unknown): value is types.DefinitionsEncodingAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsEncodingAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/servers/items}
*/
export function isPropertiesServersItems(value: unknown): value is types.PropertiesServersItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesServersItems", () => {
if(!isDefinitionsServer(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/security/items}
*/
export function isPropertiesSecurityItems(value: unknown): value is types.PropertiesSecurityItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSecurityItems", () => {
if(!isSecurityRequirement(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/properties/tags/items}
*/
export function isPropertiesTagsItems(value: unknown): value is types.PropertiesTagsItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesTagsItems", () => {
if(!isTag(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Server/properties/variables/additionalProperties}
*/
export function isVariablesAdditionalProperties(value: unknown): value is types.VariablesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("VariablesAdditionalProperties", () => {
if(!isServerVariable(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ServerVariable/properties/enum/items}
*/
export function isServerVariableEnumItems(value: unknown): value is types.ServerVariableEnumItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ServerVariableEnumItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isSchemasAZAZ09(value: unknown): value is types.SchemasAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemasAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isSchemas0(value)) {
counter += 1;
}
if(counter < 2 && isSchemas1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isResponsesAZAZ09(value: unknown): value is types.ResponsesAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isResponses0(value)) {
counter += 1;
}
if(counter < 2 && isResponses1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isParametersAZAZ09(value: unknown): value is types.ParametersAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isAZAZ09Parameters0(value)) {
counter += 1;
}
if(counter < 2 && isAZAZ09Parameters1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isExamplesAZAZ09(value: unknown): value is types.ExamplesAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExamplesAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isAZAZ09Examples0(value)) {
counter += 1;
}
if(counter < 2 && isAZAZ09Examples1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isRequestBodiesAZAZ09(value: unknown): value is types.RequestBodiesAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodiesAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isRequestBodies0(value)) {
counter += 1;
}
if(counter < 2 && isRequestBodies1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isHeadersAZAZ09(value: unknown): value is types.HeadersAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeadersAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isAZAZ09Headers0(value)) {
counter += 1;
}
if(counter < 2 && isAZAZ09Headers1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isSecuritySchemesAZAZ09(value: unknown): value is types.SecuritySchemesAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecuritySchemesAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isSecuritySchemes0(value)) {
counter += 1;
}
if(counter < 2 && isSecuritySchemes1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isLinksAZAZ09(value: unknown): value is types.LinksAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinksAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isAZAZ09Links0(value)) {
counter += 1;
}
if(counter < 2 && isAZAZ09Links1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$}
*/
export function isCallbacksAZAZ09(value: unknown): value is types.CallbacksAZAZ09 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("CallbacksAZAZ09", () => {
{
let counter = 0;
if(counter < 2 && isAZAZ09Callbacks0(value)) {
counter += 1;
}
if(counter < 2 && isAZAZ09Callbacks1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required/items}
*/
export function isRequiredItems(value: unknown): value is types.RequiredItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequiredItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/enum/items}
*/
export function isSchemaEnumItems(value: unknown): value is types.SchemaEnumItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaEnumItems", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not/oneOf/0}
*/
export function isNot0(value: unknown): value is types.Not0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Not0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/not/oneOf/1}
*/
export function isNot1(value: unknown): value is types.Not1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Not1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items}
*/
export function isAllOfItems(value: unknown): value is types.AllOfItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfItems", () => {
{
let counter = 0;
if(counter < 2 && isItemsAllOf0(value)) {
counter += 1;
}
if(counter < 2 && isItemsAllOf1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items}
*/
export function isOneOfSchemaItems(value: unknown): value is types.OneOfSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOfSchemaItems", () => {
{
let counter = 0;
if(counter < 2 && isOneOf0(value)) {
counter += 1;
}
if(counter < 2 && isOneOf1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items}
*/
export function isAnyOfItems(value: unknown): value is types.AnyOfItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AnyOfItems", () => {
{
let counter = 0;
if(counter < 2 && isAnyOf0(value)) {
counter += 1;
}
if(counter < 2 && isAnyOf1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items/oneOf/0}
*/
export function isItems0(value: unknown): value is types.Items0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Items0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/items/oneOf/1}
*/
export function isItems1(value: unknown): value is types.Items1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Items1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties}
*/
export function isPropertiesAdditionalProperties(value: unknown): value is types.PropertiesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isProperties0(value)) {
counter += 1;
}
if(counter < 2 && isProperties1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/0}
*/
export function isSchema0(value: unknown): value is types.Schema0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schema0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/1}
*/
export function isSchema1(value: unknown): value is types.Schema1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schema1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/additionalProperties/oneOf/2}
*/
export function isSchema2(value: unknown): value is types.Schema2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schema2", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Discriminator/properties/mapping/additionalProperties}
*/
export function isMappingAdditionalProperties(value: unknown): value is types.MappingAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MappingAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties}
*/
export function isHeadersAdditionalProperties(value: unknown): value is types.HeadersAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeadersAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isResponseHeaders0(value)) {
counter += 1;
}
if(counter < 2 && isResponseHeaders1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/content/additionalProperties}
*/
export function isResponseContentAdditionalProperties(value: unknown): value is types.ResponseContentAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseContentAdditionalProperties", () => {
if(!isMediaType(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties}
*/
export function isLinksAdditionalProperties(value: unknown): value is types.LinksAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LinksAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isResponseLinks0(value)) {
counter += 1;
}
if(counter < 2 && isResponseLinks1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema/oneOf/0}
*/
export function isSchemaMediaType0(value: unknown): value is types.SchemaMediaType0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMediaType0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/schema/oneOf/1}
*/
export function isSchemaMediaType1(value: unknown): value is types.SchemaMediaType1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMediaType1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties}
*/
export function isExamplesMediaTypeAdditionalProperties(value: unknown): value is types.ExamplesMediaTypeAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExamplesMediaTypeAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isExamplesMediaType0(value)) {
counter += 1;
}
if(counter < 2 && isExamplesMediaType1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/encoding/additionalProperties}
*/
export function isMediaTypeEncodingAdditionalProperties(value: unknown): value is types.MediaTypeEncodingAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeEncodingAdditionalProperties", () => {
if(!isDefinitionsEncoding(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema/oneOf/0}
*/
export function isHeader0(value: unknown): value is types.Header0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Header0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/schema/oneOf/1}
*/
export function isHeader1(value: unknown): value is types.Header1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Header1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/content/additionalProperties}
*/
export function isHeaderContentAdditionalProperties(value: unknown): value is types.HeaderContentAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderContentAdditionalProperties", () => {
if(!isMediaType(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties}
*/
export function isHeaderExamplesAdditionalProperties(value: unknown): value is types.HeaderExamplesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExamplesAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isHeaderExamples0(value)) {
counter += 1;
}
if(counter < 2 && isHeaderExamples1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/servers/items}
*/
export function isPathItemServersItems(value: unknown): value is types.PathItemServersItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemServersItems", () => {
if(!isDefinitionsServer(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items}
*/
export function isPathItemItems(value: unknown): value is types.PathItemItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemItems", () => {
{
let counter = 0;
if(counter < 2 && isPathItem0(value)) {
counter += 1;
}
if(counter < 2 && isPathItem1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags/items}
*/
export function isOperationTagsItems(value: unknown): value is types.OperationTagsItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationTagsItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items}
*/
export function isParametersItems(value: unknown): value is types.ParametersItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersItems", () => {
{
let counter = 0;
if(counter < 2 && isOperationParameters0(value)) {
counter += 1;
}
if(counter < 2 && isOperationParameters1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody/oneOf/0}
*/
export function isRequestBody0(value: unknown): value is types.RequestBody0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBody0", () => {
if(!isDefinitionsRequestBody(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/requestBody/oneOf/1}
*/
export function isRequestBody1(value: unknown): value is types.RequestBody1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBody1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties}
*/
export function isCallbacksAdditionalProperties(value: unknown): value is types.CallbacksAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("CallbacksAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isOperationCallbacks0(value)) {
counter += 1;
}
if(counter < 2 && isOperationCallbacks1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/security/items}
*/
export function isOperationSecurityItems(value: unknown): value is types.OperationSecurityItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationSecurityItems", () => {
if(!isSecurityRequirement(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/servers/items}
*/
export function isOperationServersItems(value: unknown): value is types.OperationServersItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationServersItems", () => {
if(!isDefinitionsServer(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default/oneOf/0}
*/
export function isDefault0(value: unknown): value is types.Default0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Default0", () => {
if(!isResponse(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/properties/default/oneOf/1}
*/
export function isDefault1(value: unknown): value is types.Default1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Default1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$/oneOf/0}
*/
export function isResponses15D2Xx0(value: unknown): value is types.Responses15D2Xx0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses15D2Xx0", () => {
if(!isResponse(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Responses/patternProperties/^[1-5](?:\d{2}|XX)$/oneOf/1}
*/
export function isResponses15D2Xx1(value: unknown): value is types.Responses15D2Xx1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses15D2Xx1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SecurityRequirement/additionalProperties/items}
*/
export function isSecurityRequirementItems(value: unknown): value is types.SecurityRequirementItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirementItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/0}
*/
export function isAllOfSchemaXorContent0(value: unknown): value is types.AllOfSchemaXorContent0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfSchemaXorContent0", () => {
if(isAllOfSchemaXorContentNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/1}
*/
export function isAllOfSchemaXorContent1(value: unknown): value is types.AllOfSchemaXorContent1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfSchemaXorContent1", () => {
if(isSchemaXorContent1Not(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/2}
*/
export function isSchemaXorContent2(value: unknown): value is types.SchemaXorContent2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent2", () => {
if(isSchemaXorContent2Not(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/3}
*/
export function isSchemaXorContent3(value: unknown): value is types.SchemaXorContent3 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent3", () => {
if(isSchemaXorContent3Not(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/4}
*/
export function isSchemaXorContent4(value: unknown): value is types.SchemaXorContent4 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent4", () => {
if(isSchemaXorContent4Not(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema/oneOf/0}
*/
export function isParameter0(value: unknown): value is types.Parameter0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/schema/oneOf/1}
*/
export function isParameter1(value: unknown): value is types.Parameter1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/content/additionalProperties}
*/
export function isParameterContentAdditionalProperties(value: unknown): value is types.ParameterContentAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterContentAdditionalProperties", () => {
if(!isMediaType(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties}
*/
export function isParameterExamplesAdditionalProperties(value: unknown): value is types.ParameterExamplesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExamplesAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isParameterExamples0(value)) {
counter += 1;
}
if(counter < 2 && isParameterExamples1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/in}
*/
export function isOneOf0ParameterLocationIn(value: unknown): value is types.OneOf0ParameterLocationIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf0ParameterLocationIn", () => {
if(
value !== "path"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/style}
*/
export function isOneOf0ParameterLocationStyle(value: unknown): value is types.OneOf0ParameterLocationStyle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf0ParameterLocationStyle", () => {
if(
value !== "matrix" &&
value !== "label" &&
value !== "simple"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/0/properties/required}
*/
export function isParameterLocationRequired(value: unknown): value is types.ParameterLocationRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocationRequired", () => {
if(
value !== true
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1/properties/in}
*/
export function isOneOf1ParameterLocationIn(value: unknown): value is types.OneOf1ParameterLocationIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf1ParameterLocationIn", () => {
if(
value !== "query"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/1/properties/style}
*/
export function isOneOf1ParameterLocationStyle(value: unknown): value is types.OneOf1ParameterLocationStyle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf1ParameterLocationStyle", () => {
if(
value !== "form" &&
value !== "spaceDelimited" &&
value !== "pipeDelimited" &&
value !== "deepObject"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2/properties/in}
*/
export function isParameterLocation2In(value: unknown): value is types.ParameterLocation2In {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation2In", () => {
if(
value !== "header"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/2/properties/style}
*/
export function isParameterLocation2Style(value: unknown): value is types.ParameterLocation2Style {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation2Style", () => {
if(
value !== "simple"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3/properties/in}
*/
export function isParameterLocation3In(value: unknown): value is types.ParameterLocation3In {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation3In", () => {
if(
value !== "cookie"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation/oneOf/3/properties/style}
*/
export function isParameterLocation3Style(value: unknown): value is types.ParameterLocation3Style {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterLocation3Style", () => {
if(
value !== "form"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/RequestBody/properties/content/additionalProperties}
*/
export function isRequestBodyContentAdditionalProperties(value: unknown): value is types.RequestBodyContentAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodyContentAdditionalProperties", () => {
if(!isMediaType(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/0/properties/scheme}
*/
export function isOneOf0HttpSecuritySchemeScheme(value: unknown): value is types.OneOf0HttpSecuritySchemeScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf0HttpSecuritySchemeScheme", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
if(
typeof value === "string"
) {
if(
!new RegExp("^[Bb][Ee][Aa][Rr][Ee][Rr]$").test(value)
) {
recordError("valuePattern");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/properties/scheme}
*/
export function isOneOf1HttpSecuritySchemeScheme(value: unknown): value is types.OneOf1HttpSecuritySchemeScheme {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf1HttpSecuritySchemeScheme", () => {
if(isSchemeNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/not}
*/
export function isHttpSecuritySchemeNot(value: unknown): value is types.HttpSecuritySchemeNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HttpSecuritySchemeNot", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("bearerFormat" in value) ||
value["bearerFormat"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ImplicitOAuthFlow/properties/scopes/additionalProperties}
*/
export function isScopesImplicitOauthFlowAdditionalProperties(value: unknown): value is types.ScopesImplicitOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ScopesImplicitOauthFlowAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PasswordOAuthFlow/properties/scopes/additionalProperties}
*/
export function isScopesPasswordOauthFlowAdditionalProperties(value: unknown): value is types.ScopesPasswordOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ScopesPasswordOauthFlowAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ClientCredentialsFlow/properties/scopes/additionalProperties}
*/
export function isScopesClientCredentialsFlowAdditionalProperties(value: unknown): value is types.ScopesClientCredentialsFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ScopesClientCredentialsFlowAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/AuthorizationCodeOAuthFlow/properties/scopes/additionalProperties}
*/
export function isScopesAuthorizationCodeOauthFlowAdditionalProperties(value: unknown): value is types.ScopesAuthorizationCodeOauthFlowAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ScopesAuthorizationCodeOauthFlowAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Link/properties/parameters/additionalProperties}
*/
export function isParametersLinkAdditionalProperties(value: unknown): value is types.ParametersLinkAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersLinkAdditionalProperties", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties}
*/
export function isHeadersEncodingAdditionalProperties(value: unknown): value is types.HeadersEncodingAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeadersEncodingAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isEncoding0(value)) {
counter += 1;
}
if(counter < 2 && isEncoding1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isSchemas0(value: unknown): value is types.Schemas0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schemas0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/schemas/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isSchemas1(value: unknown): value is types.Schemas1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Schemas1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isResponses0(value: unknown): value is types.Responses0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/responses/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isResponses1(value: unknown): value is types.Responses1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses1", () => {
if(!isResponse(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isAZAZ09Parameters0(value: unknown): value is types.AZAZ09Parameters0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Parameters0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/parameters/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isAZAZ09Parameters1(value: unknown): value is types.AZAZ09Parameters1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Parameters1", () => {
if(!isParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isAZAZ09Examples0(value: unknown): value is types.AZAZ09Examples0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Examples0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/examples/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isAZAZ09Examples1(value: unknown): value is types.AZAZ09Examples1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Examples1", () => {
if(!isDefinitionsExample(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isRequestBodies0(value: unknown): value is types.RequestBodies0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodies0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/requestBodies/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isRequestBodies1(value: unknown): value is types.RequestBodies1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("RequestBodies1", () => {
if(!isDefinitionsRequestBody(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isAZAZ09Headers0(value: unknown): value is types.AZAZ09Headers0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Headers0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/headers/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isAZAZ09Headers1(value: unknown): value is types.AZAZ09Headers1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Headers1", () => {
if(!isHeader(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isSecuritySchemes0(value: unknown): value is types.SecuritySchemes0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecuritySchemes0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/securitySchemes/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isSecuritySchemes1(value: unknown): value is types.SecuritySchemes1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecuritySchemes1", () => {
if(!isSecurityScheme(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isAZAZ09Links0(value: unknown): value is types.AZAZ09Links0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Links0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/links/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isAZAZ09Links1(value: unknown): value is types.AZAZ09Links1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Links1", () => {
if(!isLink(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/0}
*/
export function isAZAZ09Callbacks0(value: unknown): value is types.AZAZ09Callbacks0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Callbacks0", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Components/properties/callbacks/patternProperties/^[a-zA-Z0-9\.\-_]+$/oneOf/1}
*/
export function isAZAZ09Callbacks1(value: unknown): value is types.AZAZ09Callbacks1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AZAZ09Callbacks1", () => {
if(!isCallback(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items/oneOf/0}
*/
export function isItemsAllOf0(value: unknown): value is types.ItemsAllOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ItemsAllOf0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/allOf/items/oneOf/1}
*/
export function isItemsAllOf1(value: unknown): value is types.ItemsAllOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ItemsAllOf1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items/oneOf/0}
*/
export function isOneOf0(value: unknown): value is types.OneOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/oneOf/items/oneOf/1}
*/
export function isOneOf1(value: unknown): value is types.OneOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OneOf1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items/oneOf/0}
*/
export function isAnyOf0(value: unknown): value is types.AnyOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AnyOf0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/anyOf/items/oneOf/1}
*/
export function isAnyOf1(value: unknown): value is types.AnyOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AnyOf1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties/oneOf/0}
*/
export function isProperties0(value: unknown): value is types.Properties0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Properties0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/properties/additionalProperties/oneOf/1}
*/
export function isProperties1(value: unknown): value is types.Properties1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Properties1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties/oneOf/0}
*/
export function isResponseHeaders0(value: unknown): value is types.ResponseHeaders0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseHeaders0", () => {
if(!isHeader(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/headers/additionalProperties/oneOf/1}
*/
export function isResponseHeaders1(value: unknown): value is types.ResponseHeaders1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseHeaders1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties/oneOf/0}
*/
export function isResponseLinks0(value: unknown): value is types.ResponseLinks0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseLinks0", () => {
if(!isLink(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Response/properties/links/additionalProperties/oneOf/1}
*/
export function isResponseLinks1(value: unknown): value is types.ResponseLinks1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseLinks1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties/oneOf/0}
*/
export function isExamplesMediaType0(value: unknown): value is types.ExamplesMediaType0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExamplesMediaType0", () => {
if(!isDefinitionsExample(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/MediaType/properties/examples/additionalProperties/oneOf/1}
*/
export function isExamplesMediaType1(value: unknown): value is types.ExamplesMediaType1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExamplesMediaType1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties/oneOf/0}
*/
export function isHeaderExamples0(value: unknown): value is types.HeaderExamples0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExamples0", () => {
if(!isDefinitionsExample(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Header/properties/examples/additionalProperties/oneOf/1}
*/
export function isHeaderExamples1(value: unknown): value is types.HeaderExamples1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExamples1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items/oneOf/0}
*/
export function isPathItem0(value: unknown): value is types.PathItem0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItem0", () => {
if(!isParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/PathItem/properties/parameters/items/oneOf/1}
*/
export function isPathItem1(value: unknown): value is types.PathItem1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItem1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items/oneOf/0}
*/
export function isOperationParameters0(value: unknown): value is types.OperationParameters0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationParameters0", () => {
if(!isParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/parameters/items/oneOf/1}
*/
export function isOperationParameters1(value: unknown): value is types.OperationParameters1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationParameters1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties/oneOf/0}
*/
export function isOperationCallbacks0(value: unknown): value is types.OperationCallbacks0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationCallbacks0", () => {
if(!isCallback(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/callbacks/additionalProperties/oneOf/1}
*/
export function isOperationCallbacks1(value: unknown): value is types.OperationCallbacks1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationCallbacks1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/0/not}
*/
export function isAllOfSchemaXorContentNot(value: unknown): value is types.AllOfSchemaXorContentNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfSchemaXorContentNot", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("style" in value) ||
value["style"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/1/not}
*/
export function isSchemaXorContent1Not(value: unknown): value is types.SchemaXorContent1Not {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent1Not", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("explode" in value) ||
value["explode"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/2/not}
*/
export function isSchemaXorContent2Not(value: unknown): value is types.SchemaXorContent2Not {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent2Not", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("allowReserved" in value) ||
value["allowReserved"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/3/not}
*/
export function isSchemaXorContent3Not(value: unknown): value is types.SchemaXorContent3Not {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent3Not", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("example" in value) ||
value["example"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/4/not}
*/
export function isSchemaXorContent4Not(value: unknown): value is types.SchemaXorContent4Not {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXorContent4Not", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("examples" in value) ||
value["examples"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties/oneOf/0}
*/
export function isParameterExamples0(value: unknown): value is types.ParameterExamples0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExamples0", () => {
if(!isDefinitionsExample(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Parameter/properties/examples/additionalProperties/oneOf/1}
*/
export function isParameterExamples1(value: unknown): value is types.ParameterExamples1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterExamples1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/properties/scheme/not}
*/
export function isSchemeNot(value: unknown): value is types.SchemeNot {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemeNot", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
if(
typeof value === "string"
) {
if(
!new RegExp("^[Bb][Ee][Aa][Rr][Ee][Rr]$").test(value)
) {
recordError("valuePattern");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties/oneOf/0}
*/
export function isEncoding0(value: unknown): value is types.Encoding0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Encoding0", () => {
if(!isHeader(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Encoding/properties/headers/additionalProperties/oneOf/1}
*/
export function isEncoding1(value: unknown): value is types.Encoding1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Encoding1", () => {
if(!isReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
