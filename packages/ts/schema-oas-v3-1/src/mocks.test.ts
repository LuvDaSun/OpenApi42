// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.8                         -- www.JsonSchema42.org
//
import assert from "node:assert/strict";
import test from "node:test";
import * as validators from "./validators.js";
import * as mocks from "./mocks.js";
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/schema}
*/
test("Schema", () => {
const mock = mocks.mockSchema();
const valid = validators.isSchema(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-requirement}
*/
test("SecurityRequirement", () => {
const mock = mocks.mockSecurityRequirement();
const valid = validators.isSecurityRequirement(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/map-of-strings}
*/
test("MapOfStrings", () => {
const mock = mocks.mockMapOfStrings();
const valid = validators.isMapOfStrings(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/properties/security}
*/
test("PropertiesSecurity", () => {
const mock = mocks.mockPropertiesSecurity();
const valid = validators.isPropertiesSecurity(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/info/properties/title}
*/
test("Title", () => {
const mock = mocks.mockTitle();
const valid = validators.isTitle(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/info/properties/summary}
*/
test("InfoSummary", () => {
const mock = mocks.mockInfoSummary();
const valid = validators.isInfoSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/info/properties/description}
*/
test("InfoDescription", () => {
const mock = mocks.mockInfoDescription();
const valid = validators.isInfoDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/info/properties/version}
*/
test("Version", () => {
const mock = mocks.mockVersion();
const valid = validators.isVersion(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/contact/properties/name}
*/
test("ContactName", () => {
const mock = mocks.mockContactName();
const valid = validators.isContactName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/license/properties/name}
*/
test("LicenseName", () => {
const mock = mocks.mockLicenseName();
const valid = validators.isLicenseName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/license/properties/identifier}
*/
test("Identifier", () => {
const mock = mocks.mockIdentifier();
const valid = validators.isIdentifier(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/server/properties/description}
*/
test("ServerDescription", () => {
const mock = mocks.mockServerDescription();
const valid = validators.isServerDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/server-variable/properties/enum}
*/
test("Enum", () => {
const mock = mocks.mockEnum();
const valid = validators.isEnum(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/server-variable/properties/default}
*/
test("ServerVariableDefault", () => {
const mock = mocks.mockServerVariableDefault();
const valid = validators.isServerVariableDefault(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/server-variable/properties/description}
*/
test("ServerVariableDescription", () => {
const mock = mocks.mockServerVariableDescription();
const valid = validators.isServerVariableDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/components/properties/schemas}
*/
test("Schemas", () => {
const mock = mocks.mockSchemas();
const valid = validators.isSchemas(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/path-item/properties/summary}
*/
test("PathItemSummary", () => {
const mock = mocks.mockPathItemSummary();
const valid = validators.isPathItemSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/path-item/properties/description}
*/
test("PathItemDescription", () => {
const mock = mocks.mockPathItemDescription();
const valid = validators.isPathItemDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/tags}
*/
test("OperationTags", () => {
const mock = mocks.mockOperationTags();
const valid = validators.isOperationTags(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/summary}
*/
test("OperationSummary", () => {
const mock = mocks.mockOperationSummary();
const valid = validators.isOperationSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/description}
*/
test("OperationDescription", () => {
const mock = mocks.mockOperationDescription();
const valid = validators.isOperationDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/operationId}
*/
test("OperationOperationId", () => {
const mock = mocks.mockOperationOperationId();
const valid = validators.isOperationOperationId(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/deprecated}
*/
test("OperationDeprecated", () => {
const mock = mocks.mockOperationDeprecated();
const valid = validators.isOperationDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/security}
*/
test("OperationSecurity", () => {
const mock = mocks.mockOperationSecurity();
const valid = validators.isOperationSecurity(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/external-documentation/properties/description}
*/
test("ExternalDocumentationDescription", () => {
const mock = mocks.mockExternalDocumentationDescription();
const valid = validators.isExternalDocumentationDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/properties/name}
*/
test("ParameterName", () => {
const mock = mocks.mockParameterName();
const valid = validators.isParameterName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/properties/description}
*/
test("ParameterDescription", () => {
const mock = mocks.mockParameterDescription();
const valid = validators.isParameterDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/properties/required}
*/
test("ParameterRequired", () => {
const mock = mocks.mockParameterRequired();
const valid = validators.isParameterRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/properties/deprecated}
*/
test("ParameterDeprecated", () => {
const mock = mocks.mockParameterDeprecated();
const valid = validators.isParameterDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/properties/schema}
*/
test("ParameterSchema", () => {
const mock = mocks.mockParameterSchema();
const valid = validators.isParameterSchema(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/request-body/properties/description}
*/
test("RequestBodyDescription", () => {
const mock = mocks.mockRequestBodyDescription();
const valid = validators.isRequestBodyDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/request-body/properties/required}
*/
test("RequestBodyRequired", () => {
const mock = mocks.mockRequestBodyRequired();
const valid = validators.isRequestBodyRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/media-type/properties/schema}
*/
test("MediaTypeSchema", () => {
const mock = mocks.mockMediaTypeSchema();
const valid = validators.isMediaTypeSchema(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/encoding/properties/explode}
*/
test("EncodingExplode", () => {
const mock = mocks.mockEncodingExplode();
const valid = validators.isEncodingExplode(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/encoding/properties/allowReserved}
*/
test("AllowReserved", () => {
const mock = mocks.mockAllowReserved();
const valid = validators.isAllowReserved(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/response/properties/description}
*/
test("ResponseDescription", () => {
const mock = mocks.mockResponseDescription();
const valid = validators.isResponseDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/example/properties/summary}
*/
test("ExampleSummary", () => {
const mock = mocks.mockExampleSummary();
const valid = validators.isExampleSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/example/properties/description}
*/
test("ExampleDescription", () => {
const mock = mocks.mockExampleDescription();
const valid = validators.isExampleDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/link/properties/operationId}
*/
test("LinkOperationId", () => {
const mock = mocks.mockLinkOperationId();
const valid = validators.isLinkOperationId(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/link/properties/parameters}
*/
test("LinkParameters", () => {
const mock = mocks.mockLinkParameters();
const valid = validators.isLinkParameters(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/link/properties/description}
*/
test("LinkDescription", () => {
const mock = mocks.mockLinkDescription();
const valid = validators.isLinkDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/header/properties/description}
*/
test("HeaderDescription", () => {
const mock = mocks.mockHeaderDescription();
const valid = validators.isHeaderDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/header/properties/required}
*/
test("HeaderRequired", () => {
const mock = mocks.mockHeaderRequired();
const valid = validators.isHeaderRequired(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/header/properties/deprecated}
*/
test("HeaderDeprecated", () => {
const mock = mocks.mockHeaderDeprecated();
const valid = validators.isHeaderDeprecated(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/header/properties/schema}
*/
test("HeaderSchema", () => {
const mock = mocks.mockHeaderSchema();
const valid = validators.isHeaderSchema(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/tag/properties/name}
*/
test("TagName", () => {
const mock = mocks.mockTagName();
const valid = validators.isTagName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/tag/properties/description}
*/
test("TagDescription", () => {
const mock = mocks.mockTagDescription();
const valid = validators.isTagDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/reference/properties/summary}
*/
test("ReferenceSummary", () => {
const mock = mocks.mockReferenceSummary();
const valid = validators.isReferenceSummary(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/reference/properties/description}
*/
test("ReferenceDescription", () => {
const mock = mocks.mockReferenceDescription();
const valid = validators.isReferenceDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-scheme/properties/description}
*/
test("SecuritySchemeDescription", () => {
const mock = mocks.mockSecuritySchemeDescription();
const valid = validators.isSecuritySchemeDescription(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-requirement/additionalProperties}
*/
test("SecurityRequirementAdditionalProperties", () => {
const mock = mocks.mockSecurityRequirementAdditionalProperties();
const valid = validators.isSecurityRequirementAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/map-of-strings/additionalProperties}
*/
test("MapOfStringsAdditionalProperties", () => {
const mock = mocks.mockMapOfStringsAdditionalProperties();
const valid = validators.isMapOfStringsAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/properties/security/items}
*/
test("PropertiesSecurityItems", () => {
const mock = mocks.mockPropertiesSecurityItems();
const valid = validators.isPropertiesSecurityItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/server-variable/properties/enum/items}
*/
test("EnumItems", () => {
const mock = mocks.mockEnumItems();
const valid = validators.isEnumItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/components/properties/schemas/additionalProperties}
*/
test("SchemasAdditionalProperties", () => {
const mock = mocks.mockSchemasAdditionalProperties();
const valid = validators.isSchemasAdditionalProperties(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/tags/items}
*/
test("OperationTagsItems", () => {
const mock = mocks.mockOperationTagsItems();
const valid = validators.isOperationTagsItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/operation/properties/security/items}
*/
test("OperationSecurityItems", () => {
const mock = mocks.mockOperationSecurityItems();
const valid = validators.isOperationSecurityItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/then/properties/allowEmptyValue}
*/
test("AllowEmptyValue", () => {
const mock = mocks.mockAllowEmptyValue();
const valid = validators.isAllowEmptyValue(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/oauth-flows/$defs/implicit/properties/scopes}
*/
test("ImplicitScopes", () => {
const mock = mocks.mockImplicitScopes();
const valid = validators.isImplicitScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/oauth-flows/$defs/password/properties/scopes}
*/
test("PasswordScopes", () => {
const mock = mocks.mockPasswordScopes();
const valid = validators.isPasswordScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/oauth-flows/$defs/client-credentials/properties/scopes}
*/
test("ClientCredentialsScopes", () => {
const mock = mocks.mockClientCredentialsScopes();
const valid = validators.isClientCredentialsScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/oauth-flows/$defs/authorization-code/properties/scopes}
*/
test("AuthorizationCodeScopes", () => {
const mock = mocks.mockAuthorizationCodeScopes();
const valid = validators.isAuthorizationCodeScopes(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-requirement/additionalProperties/items}
*/
test("SecurityRequirementItems", () => {
const mock = mocks.mockSecurityRequirementItems();
const valid = validators.isSecurityRequirementItems(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-scheme/$defs/type-apikey/then/properties/name}
*/
test("TypeApikeyName", () => {
const mock = mocks.mockTypeApikeyName();
const valid = validators.isTypeApikeyName(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-scheme/$defs/type-http/then/properties/scheme}
*/
test("TypeHttpScheme", () => {
const mock = mocks.mockTypeHttpScheme();
const valid = validators.isTypeHttpScheme(mock);
assert.equal(valid, true);
});
/**
* @see {@link https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/security-scheme/$defs/type-http-bearer/then/properties/bearerFormat}
*/
test("BearerFormat", () => {
const mock = mocks.mockBearerFormat();
const valid = validators.isBearerFormat(mock);
assert.equal(valid, true);
});
