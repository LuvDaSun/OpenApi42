// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.8.13                         -- www.JsonSchema42.org
/**
The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0
*/
export type Schema20221007 = (SpecificationExtensions) &
((AnyOf0) |
(AnyOf1) |
(AnyOf2) |
(AnyOf0 & AnyOf1) |
(AnyOf0 & AnyOf2) |
(AnyOf1 & AnyOf2) |
(AnyOf0 & AnyOf1 & AnyOf2)) &
((
{
"openapi": Openapi,
"info": PropertiesInfo,
"jsonSchemaDialect"?: JsonSchemaDialect,
"servers"?: Schema20221007Servers,
"paths"?: PropertiesPaths,
"webhooks"?: Webhooks,
"components"?: PropertiesComponents,
"security"?: Schema20221007Security,
"tags"?: Schema20221007Tags,
"externalDocs"?: Schema20221007ExternalDocs,
}
));
export type DefsInfo = (SpecificationExtensions) &
((
{
"title": Title,
"summary"?: InfoSummary,
"description"?: InfoDescription,
"termsOfService"?: TermsOfService,
"contact"?: PropertiesContact,
"license"?: PropertiesLicense,
"version": Version,
}
));
export type DefsContact = (SpecificationExtensions) &
((
{
"name"?: ContactName,
"url"?: ContactUrl,
"email"?: Email,
}
));
export type DefsLicense = (SpecificationExtensions) &
((
{
"name": LicenseName,
"identifier"?: Identifier,
"url"?: LicenseUrl,
}
));
export type Server = (SpecificationExtensions) &
((
{
"url": ServerUrl,
"description"?: ServerDescription,
"variables"?: Variables,
}
));
export type ServerVariable = (SpecificationExtensions) &
((
{
"enum"?: Enum,
"default": ServerVariableDefault,
"description"?: ServerVariableDescription,
}
));
export type DefsComponents = (SpecificationExtensions) &
((
{
"schemas"?: Schemas,
"responses"?: ComponentsPropertiesResponses,
"parameters"?: ComponentsParameters,
"examples"?: ComponentsPropertiesExamples,
"requestBodies"?: RequestBodies,
"headers"?: ComponentsHeaders,
"securitySchemes"?: SecuritySchemes,
"links"?: ComponentsLinks,
"callbacks"?: ComponentsPropertiesCallbacks,
"pathItems"?: PathItems,
[key: string]: SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItems |
Schemas |
ComponentsPropertiesResponses |
ComponentsParameters |
ComponentsPropertiesExamples |
RequestBodies |
ComponentsHeaders |
SecuritySchemes |
ComponentsLinks |
ComponentsPropertiesCallbacks |
PathItems |
undefined,
}
));
export type DefsPaths = (SpecificationExtensions) &
((
{
[key: string]: PatternProperties,
}
));
export type PathItem = (SpecificationExtensions) &
((
{
"summary"?: PathItemSummary,
"description"?: PathItemDescription,
"servers"?: PathItemServers,
"parameters"?: PathItemParameters,
"get"?: Get,
"put"?: Put,
"post"?: Post,
"delete"?: Delete,
"options"?: Options,
"head"?: Head,
"patch"?: Patch,
"trace"?: Trace,
}
));
export type PathItemOrReference = (PathItemOrReferenceThen |
PathItemOrReferenceElse);
export type Operation = (SpecificationExtensions) &
((
{
"tags"?: OperationTags,
"summary"?: OperationSummary,
"description"?: OperationDescription,
"externalDocs"?: OperationExternalDocs,
"operationId"?: OperationOperationId,
"parameters"?: OperationParameters,
"requestBody"?: OperationPropertiesRequestBody,
"responses"?: OperationPropertiesResponses,
"callbacks"?: OperationPropertiesCallbacks,
"deprecated"?: OperationDeprecated,
"security"?: OperationSecurity,
"servers"?: OperationServers,
}
));
export type ExternalDocumentation = (SpecificationExtensions) &
((
{
"description"?: ExternalDocumentationDescription,
"url": ExternalDocumentationUrl,
}
));
export type Parameter = (SpecificationExtensions) &
(ParameterOneOf0 |
ParameterOneOf1) &
(ParameterThen) &
((
{
"name": ParameterName,
"in": ParameterIn,
"description"?: ParameterDescription,
"required"?: ParameterRequired,
"deprecated"?: ParameterDeprecated,
"schema"?: ParameterPropertiesSchema,
"content"?: ParameterPropertiesContent,
}
));
export type ParameterOrReference = (ParameterOrReferenceThen |
ParameterOrReferenceElse);
export type DefsRequestBody = (SpecificationExtensions) &
((
{
"description"?: RequestBodyDescription,
"content": RequestBodyPropertiesContent,
"required"?: RequestBodyRequired,
}
));
export type RequestBodyOrReference = (RequestBodyOrReferenceThen |
RequestBodyOrReferenceElse);
export type DefsContent = ((
{
[key: ContentPropertyNames]: ContentAdditionalProperties,
}
));
export type MediaType = (MediaTypeAllOf0 &
MediaTypeAllOf1) &
((
{
"schema"?: MediaTypePropertiesSchema,
"encoding"?: PropertiesEncoding,
}
));
export type DefsEncoding = (EncodingAllOf0 &
EncodingAllOf1) &
((
{
"contentType"?: ContentType,
"headers"?: EncodingHeaders,
"style"?: EncodingStyle,
"explode"?: EncodingExplode,
"allowReserved"?: AllowReserved,
}
));
export type DefsResponses = (SpecificationExtensions) &
((
{
"default"?: ResponsesDefault,
[key: string]: PatternProperties15092Xx |
ResponsesDefault |
undefined,
}
));
export type Response = (SpecificationExtensions) &
((
{
"description": ResponseDescription,
"headers"?: ResponseHeaders,
"content"?: ResponsePropertiesContent,
"links"?: ResponseLinks,
}
));
export type ResponseOrReference = (ResponseOrReferenceThen |
ResponseOrReferenceElse);
export type DefsCallbacks = (SpecificationExtensions) &
((
{
[key: string]: DefsCallbacksAdditionalProperties,
}
));
export type CallbacksOrReference = (CallbacksOrReferenceThen |
CallbacksOrReferenceElse);
export type DefsExample = (SpecificationExtensions) &
(Not) &
((
{
"summary"?: ExampleSummary,
"description"?: ExampleDescription,
"value"?: Value,
"externalValue"?: ExternalValue,
}
));
export type ExampleOrReference = (ExampleOrReferenceThen |
ExampleOrReferenceElse);
export type Link = (SpecificationExtensions) &
(LinkOneOf0 |
LinkOneOf1) &
((
{
"operationRef"?: OperationRef,
"operationId"?: LinkOperationId,
"parameters"?: LinkParameters,
"requestBody"?: LinkPropertiesRequestBody,
"description"?: LinkDescription,
"body"?: Body,
}
));
export type LinkOrReference = (LinkOrReferenceThen |
LinkOrReferenceElse);
export type Header = (SpecificationExtensions) &
(HeaderOneOf0 |
HeaderOneOf1) &
((
{
"description"?: HeaderDescription,
"required"?: HeaderRequired,
"deprecated"?: HeaderDeprecated,
"schema"?: HeaderPropertiesSchema,
"content"?: HeaderPropertiesContent,
}
));
export type HeaderOrReference = (HeaderOrReferenceThen |
HeaderOrReferenceElse);
export type Tag = (SpecificationExtensions) &
((
{
"name": TagName,
"description"?: TagDescription,
"externalDocs"?: TagExternalDocs,
}
));
export type Reference = ((
{
"$ref"?: Ref,
"summary"?: ReferenceSummary,
"description"?: ReferenceDescription,
}
));
export type DefsSchema = ((
{
}
) |
(boolean));
export type SecurityScheme = (SecuritySchemeAllOf0 &
SecuritySchemeAllOf1 &
AllOf2 &
AllOf3 &
AllOf4 &
AllOf5) &
((
{
"type": SecuritySchemeType,
"description"?: SecuritySchemeDescription,
}
));
export type SecuritySchemeOrReference = (SecuritySchemeOrReferenceThen |
SecuritySchemeOrReferenceElse);
export type OauthFlows = (SpecificationExtensions) &
((
{
"implicit"?: PropertiesImplicit,
"password"?: PropertiesPassword,
"clientCredentials"?: PropertiesClientCredentials,
"authorizationCode"?: PropertiesAuthorizationCode,
}
));
export type SecurityRequirement = ((
{
[key: string]: SecurityRequirementAdditionalProperties,
}
));
export type SpecificationExtensions = unknown;
export type DefsExamples = ((
{
"example"?: PropertiesExample,
"examples"?: ExamplesPropertiesExamples,
}
));
export type MapOfStrings = ((
{
[key: string]: MapOfStringsAdditionalProperties,
}
));
export type Openapi = ((string));
export type PropertiesInfo = (DefsInfo);
export type JsonSchemaDialect = ((string));
export type Schema20221007Servers = (((Schema20221007ServersItems)[]));
export type PropertiesPaths = (DefsPaths);
export type Webhooks = ((
{
[key: string]: WebhooksAdditionalProperties,
}
));
export type PropertiesComponents = (DefsComponents);
export type Schema20221007Security = (((Schema20221007SecurityItems)[]));
export type Schema20221007Tags = (((Schema20221007TagsItems)[]));
export type Schema20221007ExternalDocs = (ExternalDocumentation);
export type AnyOf0 = ((
{
}
));
export type AnyOf1 = ((
{
}
));
export type AnyOf2 = ((
{
}
));
export type Title = ((string));
export type InfoSummary = ((string));
export type InfoDescription = ((string));
export type TermsOfService = ((string));
export type PropertiesContact = (DefsContact);
export type PropertiesLicense = (DefsLicense);
export type Version = ((string));
export type ContactName = ((string));
export type ContactUrl = ((string));
export type Email = ((string));
export type LicenseName = ((string));
export type Identifier = ((string));
export type LicenseUrl = ((string));
export type ServerUrl = ((string));
export type ServerDescription = ((string));
export type Variables = ((
{
[key: string]: VariablesAdditionalProperties,
}
));
export type Enum = (((EnumItems)[]));
export type ServerVariableDefault = ((string));
export type ServerVariableDescription = ((string));
export type Schemas = ((
{
[key: string]: SchemasAdditionalProperties,
}
));
export type ComponentsPropertiesResponses = ((
{
[key: string]: ResponsesAdditionalProperties,
}
));
export type ComponentsParameters = ((
{
[key: string]: ParametersAdditionalProperties,
}
));
export type ComponentsPropertiesExamples = ((
{
[key: string]: ComponentsExamplesAdditionalProperties,
}
));
export type RequestBodies = ((
{
[key: string]: RequestBodiesAdditionalProperties,
}
));
export type ComponentsHeaders = ((
{
[key: string]: ComponentsHeadersAdditionalProperties,
}
));
export type SecuritySchemes = ((
{
[key: string]: SecuritySchemesAdditionalProperties,
}
));
export type ComponentsLinks = ((
{
[key: string]: ComponentsLinksAdditionalProperties,
}
));
export type ComponentsPropertiesCallbacks = ((
{
[key: string]: ComponentsPropertiesCallbacksAdditionalProperties,
}
));
export type PathItems = ((
{
[key: string]: PathItemsAdditionalProperties,
}
));
export type SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItems = unknown;
export type PatternProperties = (PathItem);
export type PathItemSummary = ((string));
export type PathItemDescription = ((string));
export type PathItemServers = (((PathItemServersItems)[]));
export type PathItemParameters = (((PathItemParametersItems)[]));
export type Get = (Operation);
export type Put = (Operation);
export type Post = (Operation);
export type Delete = (Operation);
export type Options = (Operation);
export type Head = (Operation);
export type Patch = (Operation);
export type Trace = (Operation);
export type PathItemOrReferenceIf = ((
{
}
));
export type PathItemOrReferenceThen = (Reference);
export type PathItemOrReferenceElse = (PathItem);
export type OperationTags = (((OperationTagsItems)[]));
export type OperationSummary = ((string));
export type OperationDescription = ((string));
export type OperationExternalDocs = (ExternalDocumentation);
export type OperationOperationId = ((string));
export type OperationParameters = (((OperationParametersItems)[]));
export type OperationPropertiesRequestBody = (RequestBodyOrReference);
export type OperationPropertiesResponses = (DefsResponses);
export type OperationPropertiesCallbacks = ((
{
[key: string]: OperationPropertiesCallbacksAdditionalProperties,
}
));
export type OperationDeprecated = ((boolean));
export type OperationSecurity = (((OperationSecurityItems)[]));
export type OperationServers = (((OperationServersItems)[]));
export type ExternalDocumentationDescription = ((string));
export type ExternalDocumentationUrl = ((string));
export type ParameterName = ((string));
export type ParameterIn = (("query" |
"header" |
"path" |
"cookie"));
export type ParameterDescription = ((string));
export type ParameterRequired = ((boolean));
export type ParameterDeprecated = ((boolean));
export type ParameterPropertiesSchema = (DefsSchema);
export type ParameterPropertiesContent = (DefsContent) &
((
{
}
));
export type ParameterOneOf0 = ((
{
}
));
export type ParameterOneOf1 = ((
{
}
));
export type ParameterIf = ((
{
"in": IfIn,
}
));
export type ParameterThen = ((
{
"allowEmptyValue"?: AllowEmptyValue,
}
));
export type ParameterOrReferenceIf = ((
{
}
));
export type ParameterOrReferenceThen = (Reference);
export type ParameterOrReferenceElse = (Parameter);
export type RequestBodyDescription = ((string));
export type RequestBodyPropertiesContent = (DefsContent);
export type RequestBodyRequired = ((boolean));
export type RequestBodyOrReferenceIf = ((
{
}
));
export type RequestBodyOrReferenceThen = (Reference);
export type RequestBodyOrReferenceElse = (DefsRequestBody);
export type ContentAdditionalProperties = (MediaType);
export type ContentPropertyNames = ((string));
export type MediaTypePropertiesSchema = (DefsSchema);
export type PropertiesEncoding = ((
{
[key: string]: EncodingAdditionalProperties,
}
));
export type MediaTypeAllOf0 = (SpecificationExtensions);
export type MediaTypeAllOf1 = (DefsExamples);
export type ExplodeDefault = (ExplodeDefaultThen |
ExplodeDefaultElse);
export type ContentType = ((string));
export type EncodingHeaders = ((
{
[key: string]: EncodingHeadersAdditionalProperties,
}
));
export type EncodingStyle = (("form" |
"spaceDelimited" |
"pipeDelimited" |
"deepObject"));
export type EncodingExplode = ((boolean));
export type AllowReserved = ((boolean));
export type EncodingAllOf0 = (SpecificationExtensions);
export type EncodingAllOf1 = (ExplodeDefault);
export type ResponsesDefault = (ResponseOrReference);
export type PatternProperties15092Xx = (ResponseOrReference);
export type ResponseDescription = ((string));
export type ResponseHeaders = ((
{
[key: string]: ResponseHeadersAdditionalProperties,
}
));
export type ResponsePropertiesContent = (DefsContent);
export type ResponseLinks = ((
{
[key: string]: ResponseLinksAdditionalProperties,
}
));
export type ResponseOrReferenceIf = ((
{
}
));
export type ResponseOrReferenceThen = (Reference);
export type ResponseOrReferenceElse = (Response);
export type DefsCallbacksAdditionalProperties = (PathItemOrReference);
export type CallbacksOrReferenceIf = ((
{
}
));
export type CallbacksOrReferenceThen = (Reference);
export type CallbacksOrReferenceElse = (DefsCallbacks);
export type ExampleSummary = ((string));
export type ExampleDescription = ((string));
export type Value = ((any));
export type ExternalValue = ((string));
export type Not = ((
{
}
));
export type ExampleOrReferenceIf = ((
{
}
));
export type ExampleOrReferenceThen = (Reference);
export type ExampleOrReferenceElse = (DefsExample);
export type OperationRef = ((string));
export type LinkOperationId = ((string));
export type LinkParameters = (MapOfStrings);
export type LinkPropertiesRequestBody = ((any));
export type LinkDescription = ((string));
export type Body = (Server);
export type LinkOneOf0 = ((
{
}
));
export type LinkOneOf1 = ((
{
}
));
export type LinkOrReferenceIf = ((
{
}
));
export type LinkOrReferenceThen = (Reference);
export type LinkOrReferenceElse = (Link);
export type HeaderDescription = ((string));
export type HeaderRequired = ((boolean));
export type HeaderDeprecated = ((boolean));
export type HeaderPropertiesSchema = (DefsSchema);
export type HeaderPropertiesContent = (DefsContent) &
((
{
}
));
export type HeaderOneOf0 = ((
{
}
));
export type HeaderOneOf1 = ((
{
}
));
export type HeaderOrReferenceIf = ((
{
}
));
export type HeaderOrReferenceThen = (Reference);
export type HeaderOrReferenceElse = (Header);
export type TagName = ((string));
export type TagDescription = ((string));
export type TagExternalDocs = (ExternalDocumentation);
export type Ref = ((string));
export type ReferenceSummary = ((string));
export type ReferenceDescription = ((string));
export type TypeApikey = (TypeApikeyThen);
export type TypeHttp = (TypeHttpThen);
export type TypeHttpBearer = (TypeHttpBearerThen);
export type TypeOauth2 = (TypeOauth2Then);
export type TypeOidc = (TypeOidcThen);
export type SecuritySchemeType = (("apiKey" |
"http" |
"mutualTLS" |
"oauth2" |
"openIdConnect"));
export type SecuritySchemeDescription = ((string));
export type SecuritySchemeAllOf0 = (SpecificationExtensions);
export type SecuritySchemeAllOf1 = (TypeApikey);
export type AllOf2 = (TypeHttp);
export type AllOf3 = (TypeHttpBearer);
export type AllOf4 = (TypeOauth2);
export type AllOf5 = (TypeOidc);
export type SecuritySchemeOrReferenceIf = ((
{
}
));
export type SecuritySchemeOrReferenceThen = (Reference);
export type SecuritySchemeOrReferenceElse = (SecurityScheme);
export type DefsImplicit = (SpecificationExtensions) &
((
{
"authorizationUrl": ImplicitAuthorizationUrl,
"refreshUrl"?: ImplicitRefreshUrl,
"scopes": ImplicitScopes,
}
));
export type DefsPassword = (SpecificationExtensions) &
((
{
"tokenUrl": PasswordTokenUrl,
"refreshUrl"?: PasswordRefreshUrl,
"scopes": PasswordScopes,
}
));
export type DefsClientCredentials = (SpecificationExtensions) &
((
{
"tokenUrl": ClientCredentialsTokenUrl,
"refreshUrl"?: ClientCredentialsRefreshUrl,
"scopes": ClientCredentialsScopes,
}
));
export type DefsAuthorizationCode = (SpecificationExtensions) &
((
{
"authorizationUrl": AuthorizationCodeAuthorizationUrl,
"tokenUrl": AuthorizationCodeTokenUrl,
"refreshUrl"?: AuthorizationCodeRefreshUrl,
"scopes": AuthorizationCodeScopes,
}
));
export type PropertiesImplicit = (DefsImplicit);
export type PropertiesPassword = (DefsPassword);
export type PropertiesClientCredentials = (DefsClientCredentials);
export type PropertiesAuthorizationCode = (DefsAuthorizationCode);
export type SecurityRequirementAdditionalProperties = (((AdditionalPropertiesItems)[]));
export type X = ((any));
export type PropertiesExample = ((any));
export type ExamplesPropertiesExamples = ((
{
[key: string]: ExamplesExamplesAdditionalProperties,
}
));
export type MapOfStringsAdditionalProperties = ((string));
export type Schema20221007ServersItems = (Server);
export type WebhooksAdditionalProperties = (PathItemOrReference);
export type Schema20221007SecurityItems = (SecurityRequirement);
export type Schema20221007TagsItems = (Tag);
export type VariablesAdditionalProperties = (ServerVariable);
export type EnumItems = ((string));
export type SchemasAdditionalProperties = (DefsSchema);
export type ResponsesAdditionalProperties = (ResponseOrReference);
export type ParametersAdditionalProperties = (ParameterOrReference);
export type ComponentsExamplesAdditionalProperties = (ExampleOrReference);
export type RequestBodiesAdditionalProperties = (RequestBodyOrReference);
export type ComponentsHeadersAdditionalProperties = (HeaderOrReference);
export type SecuritySchemesAdditionalProperties = (SecuritySchemeOrReference);
export type ComponentsLinksAdditionalProperties = (LinkOrReference);
export type ComponentsPropertiesCallbacksAdditionalProperties = (CallbacksOrReference);
export type PathItemsAdditionalProperties = (PathItemOrReference);
export type SchemasResponsesParametersExamplesRequestBodiesHeadersSecuritySchemesLinksCallbacksPathItemsPropertyNames = ((string));
export type PathItemServersItems = (Server);
export type PathItemParametersItems = (ParameterOrReference);
export type OperationTagsItems = ((string));
export type OperationParametersItems = (ParameterOrReference);
export type OperationPropertiesCallbacksAdditionalProperties = (CallbacksOrReference);
export type OperationSecurityItems = (SecurityRequirement);
export type OperationServersItems = (Server);
export type IfIn = (("query"));
export type AllowEmptyValue = ((boolean));
export type EncodingAdditionalProperties = (DefsEncoding);
export type ExplodeDefaultIf = ((
{
"style": IfStyle,
}
));
export type ExplodeDefaultThen = ((
{
"explode"?: ThenExplode,
}
));
export type ExplodeDefaultElse = ((
{
"explode"?: ElseExplode,
}
));
export type EncodingHeadersAdditionalProperties = (HeaderOrReference);
export type ResponseHeadersAdditionalProperties = (HeaderOrReference);
export type ResponseLinksAdditionalProperties = (LinkOrReference);
export type TypeApikeyIf = ((
{
"type": TypeApikeyIfType,
}
));
export type TypeApikeyThen = ((
{
"name": ThenName,
"in": ThenIn,
}
));
export type TypeHttpIf = ((
{
"type": TypeHttpIfType,
}
));
export type TypeHttpThen = ((
{
"scheme": ThenScheme,
}
));
export type TypeHttpBearerIf = ((
{
"type": TypeHttpBearerIfType,
"scheme": IfScheme,
}
));
export type TypeHttpBearerThen = ((
{
"bearerFormat"?: BearerFormat,
}
));
export type TypeOauth2If = ((
{
"type": TypeOauth2IfType,
}
));
export type TypeOauth2Then = ((
{
"flows": Flows,
}
));
export type TypeOidcIf = ((
{
"type": TypeOidcIfType,
}
));
export type TypeOidcThen = ((
{
"openIdConnectUrl": OpenIdConnectUrl,
}
));
export type ImplicitAuthorizationUrl = ((string));
export type ImplicitRefreshUrl = ((string));
export type ImplicitScopes = (MapOfStrings);
export type PasswordTokenUrl = ((string));
export type PasswordRefreshUrl = ((string));
export type PasswordScopes = (MapOfStrings);
export type ClientCredentialsTokenUrl = ((string));
export type ClientCredentialsRefreshUrl = ((string));
export type ClientCredentialsScopes = (MapOfStrings);
export type AuthorizationCodeAuthorizationUrl = ((string));
export type AuthorizationCodeTokenUrl = ((string));
export type AuthorizationCodeRefreshUrl = ((string));
export type AuthorizationCodeScopes = (MapOfStrings);
export type AdditionalPropertiesItems = ((string));
export type ExamplesExamplesAdditionalProperties = (ExampleOrReference);
export type IfStyle = (("form"));
export type ThenExplode = unknown;
export type ElseExplode = unknown;
export type TypeApikeyIfType = (("apiKey"));
export type ThenName = ((string));
export type ThenIn = (("query" |
"header" |
"cookie"));
export type TypeHttpIfType = (("http"));
export type ThenScheme = ((string));
export type TypeHttpBearerIfType = (("http"));
export type IfScheme = ((string));
export type BearerFormat = ((string));
export type TypeOauth2IfType = (("oauth2"));
export type Flows = (OauthFlows);
export type TypeOidcIfType = (("openIdConnect"));
export type OpenIdConnectUrl = ((string));
