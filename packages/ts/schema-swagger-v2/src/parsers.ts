// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
export function parseSchemaJson(value: unknown): unknown {
return _parseMapSchemaJson(value);
}
function _parseMapSchemaJson(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "swagger": {
const propertyValue = parseSwagger(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "info": {
const propertyValue = parsePropertiesInfo(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "host": {
const propertyValue = parseHost(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "basePath": {
const propertyValue = parseBasePath(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schemes": {
const propertyValue = parsePropertiesSchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "consumes": {
const propertyValue = parsePropertiesConsumes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "produces": {
const propertyValue = parsePropertiesProduces(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "paths": {
const propertyValue = parsePropertiesPaths(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "definitions": {
const propertyValue = parsePropertiesDefinitions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parsePropertiesParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parsePropertiesResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parsePropertiesSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "securityDefinitions": {
const propertyValue = parsePropertiesSecurityDefinitions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tags": {
const propertyValue = parsePropertiesTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parsePropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseV2AdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsInfo(value: unknown): unknown {
return _parseMapDefinitionsInfo(value);
}
function _parseMapDefinitionsInfo(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseInfoTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "version": {
const propertyValue = parseVersion(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseInfoDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "termsOfService": {
const propertyValue = parseTermsOfService(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "contact": {
const propertyValue = parseInfoContact(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "license": {
const propertyValue = parseInfoLicense(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseInfoAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsContact(value: unknown): unknown {
return _parseMapDefinitionsContact(value);
}
function _parseMapDefinitionsContact(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseContactName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseContactUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "email": {
const propertyValue = parseEmail(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseContactAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsLicense(value: unknown): unknown {
return _parseMapDefinitionsLicense(value);
}
function _parseMapDefinitionsLicense(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseLicenseName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseLicenseUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseLicenseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsPaths(value: unknown): unknown {
return _parseMapDefinitionsPaths(value);
}
function _parseMapDefinitionsPaths(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePathsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsDefinitions(value: unknown): unknown {
return _parseMapDefinitionsDefinitions(value);
}
function _parseMapDefinitionsDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterDefinitions(value: unknown): unknown {
return _parseMapParameterDefinitions(value);
}
function _parseMapParameterDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseDefinitions(value: unknown): unknown {
return _parseMapResponseDefinitions(value);
}
function _parseMapResponseDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponseDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsExternalDocs(value: unknown): unknown {
return _parseMapDefinitionsExternalDocs(value);
}
function _parseMapDefinitionsExternalDocs(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseExternalDocsDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseExternalDocsUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExternalDocsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsExamples(value: unknown): unknown {
return _parseMapDefinitionsExamples(value);
}
function _parseMapDefinitionsExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMimeType(value: unknown): unknown {
return _parseStringMimeType(value);
}
function _parseStringMimeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperation(value: unknown): unknown {
return _parseMapOperation(value);
}
function _parseMapOperation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tags": {
const propertyValue = parseOperationTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parseSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOperationDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseOperationExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationId": {
const propertyValue = parseOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "produces": {
const propertyValue = parseOperationProduces(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "consumes": {
const propertyValue = parseOperationConsumes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseOperationParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseOperationResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schemes": {
const propertyValue = parseOperationSchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseOperationSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOperationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathItem(value: unknown): unknown {
return _parseMapPathItem(value);
}
function _parseMapPathItem(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parsePathItemRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "get": {
const propertyValue = parseGet(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "put": {
const propertyValue = parsePut(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "post": {
const propertyValue = parsePost(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "delete": {
const propertyValue = parseDelete(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "options": {
const propertyValue = parseOptions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "head": {
const propertyValue = parseHead(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "patch": {
const propertyValue = parsePatch(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parsePathItemParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathItemAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsResponses(value: unknown): unknown {
return _parseMapDefinitionsResponses(value) ?? _parseNotDefinitionsResponses(value);
}
function _parseMapDefinitionsResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponsesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseNotDefinitionsResponses(value: unknown): unknown {
return parseNot(value);
}
export function parseResponseValue(value: unknown): unknown {
return _parseOneOfResponseValue(value);
}
function _parseOneOfResponseValue(value: unknown): unknown {
return parseResponseValue0(value) ?? parseResponseValue1(value);
}
export function parseResponse(value: unknown): unknown {
return _parseMapResponse(value);
}
function _parseMapResponse(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseResponseDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseResponseSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parseResponseHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parseResponseExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsHeaders(value: unknown): unknown {
return _parseMapDefinitionsHeaders(value);
}
function _parseMapDefinitionsHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeadersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeader(value: unknown): unknown {
return _parseMapHeader(value);
}
function _parseMapHeader(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseHeaderType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseHeaderFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseHeaderItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseHeaderCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseHeaderDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseHeaderMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseHeaderExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseHeaderMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseHeaderExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseHeaderMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseHeaderMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseHeaderPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseHeaderMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseHeaderMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseHeaderUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseHeaderEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseHeaderMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHeaderDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseVendorExtension(value: unknown): unknown {
return ;
}
export function parseBodyParameter(value: unknown): unknown {
return _parseMapBodyParameter(value);
}
function _parseMapBodyParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseBodyParameterDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseBodyParameterName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseBodyParameterIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseBodyParameterRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseBodyParameterSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseBodyParameterAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderParameterSubSchema(value: unknown): unknown {
return _parseMapHeaderParameterSubSchema(value);
}
function _parseMapHeaderParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseHeaderParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseHeaderParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHeaderParameterSubSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseHeaderParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseHeaderParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseHeaderParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseHeaderParameterSubSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseHeaderParameterSubSchemaCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseHeaderParameterSubSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseHeaderParameterSubSchemaMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseHeaderParameterSubSchemaExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseHeaderParameterSubSchemaMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseHeaderParameterSubSchemaExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseHeaderParameterSubSchemaMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseHeaderParameterSubSchemaMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseHeaderParameterSubSchemaPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseHeaderParameterSubSchemaMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseHeaderParameterSubSchemaMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseHeaderParameterSubSchemaUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseHeaderParameterSubSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseHeaderParameterSubSchemaMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseQueryParameterSubSchema(value: unknown): unknown {
return _parseMapQueryParameterSubSchema(value);
}
function _parseMapQueryParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseQueryParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseQueryParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseQueryParameterSubSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseQueryParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseQueryParameterSubSchemaAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseQueryParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseQueryParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseQueryParameterSubSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseQueryParameterSubSchemaCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseQueryParameterSubSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseQueryParameterSubSchemaMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseQueryParameterSubSchemaExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseQueryParameterSubSchemaMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseQueryParameterSubSchemaExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseQueryParameterSubSchemaMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseQueryParameterSubSchemaMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseQueryParameterSubSchemaPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseQueryParameterSubSchemaMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseQueryParameterSubSchemaMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseQueryParameterSubSchemaUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseQueryParameterSubSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseQueryParameterSubSchemaMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseQueryParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseFormDataParameterSubSchema(value: unknown): unknown {
return _parseMapFormDataParameterSubSchema(value);
}
function _parseMapFormDataParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseFormDataParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseFormDataParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseFormDataParameterSubSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseFormDataParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseFormDataParameterSubSchemaAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseFormDataParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseFormDataParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseFormDataParameterSubSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseFormDataParameterSubSchemaCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseFormDataParameterSubSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseFormDataParameterSubSchemaMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseFormDataParameterSubSchemaExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseFormDataParameterSubSchemaMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseFormDataParameterSubSchemaExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseFormDataParameterSubSchemaMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseFormDataParameterSubSchemaMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseFormDataParameterSubSchemaPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseFormDataParameterSubSchemaMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseFormDataParameterSubSchemaMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseFormDataParameterSubSchemaUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseFormDataParameterSubSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseFormDataParameterSubSchemaMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseFormDataParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathParameterSubSchema(value: unknown): unknown {
return _parseMapPathParameterSubSchema(value);
}
function _parseMapPathParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parsePathParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parsePathParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parsePathParameterSubSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parsePathParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parsePathParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parsePathParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePathParameterSubSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parsePathParameterSubSchemaCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parsePathParameterSubSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parsePathParameterSubSchemaMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parsePathParameterSubSchemaExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parsePathParameterSubSchemaMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parsePathParameterSubSchemaExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parsePathParameterSubSchemaMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parsePathParameterSubSchemaMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePathParameterSubSchemaPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parsePathParameterSubSchemaMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parsePathParameterSubSchemaMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parsePathParameterSubSchemaUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parsePathParameterSubSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parsePathParameterSubSchemaMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseNonBodyParameter(value: unknown): unknown {
return _parseMapNonBodyParameter(value) ?? _parseOneOfNonBodyParameter(value);
}
function _parseMapNonBodyParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
function _parseOneOfNonBodyParameter(value: unknown): unknown {
return parseNonBodyParameter0(value) ?? parseNonBodyParameter1(value) ?? parseNonBodyParameter2(value) ?? parseNonBodyParameter3(value);
}
export function parseParameter(value: unknown): unknown {
return _parseOneOfParameter(value);
}
function _parseOneOfParameter(value: unknown): unknown {
return parseParameter0(value) ?? parseParameter1(value);
}
export function parseDefinitionsSchema(value: unknown): unknown {
return _parseMapDefinitionsSchema(value);
}
function _parseMapDefinitionsSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parseSchemaRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "title": {
const propertyValue = parseSchemaTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseSchemaMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseSchemaMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseSchemaExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseSchemaMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseSchemaExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseSchemaMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseSchemaMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseSchemaPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseSchemaMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseSchemaMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseSchemaUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxProperties": {
const propertyValue = parseMaxProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minProperties": {
const propertyValue = parseMinProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseSchemaEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "additionalProperties": {
const propertyValue = parsePropertiesSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseSchemaItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allOf": {
const propertyValue = parseAllOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "properties": {
const propertyValue = parseProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "discriminator": {
const propertyValue = parseDiscriminator(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseSchemaReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "xml": {
const propertyValue = parseSchemaXml(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchemaExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseSchemaExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseDefinitionsSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseFileSchema(value: unknown): unknown {
return _parseMapFileSchema(value);
}
function _parseMapFileSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "format": {
const propertyValue = parseFileSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "title": {
const propertyValue = parseFileSchemaTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseFileSchemaDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseFileSchemaDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseFileSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseFileSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseFileSchemaReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseFileSchemaExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseFileSchemaExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseFileSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePrimitivesItems(value: unknown): unknown {
return _parseMapPrimitivesItems(value);
}
function _parseMapPrimitivesItems(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parsePrimitivesItemsType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parsePrimitivesItemsFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePrimitivesItemsItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parsePrimitivesItemsCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parsePrimitivesItemsDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parsePrimitivesItemsMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parsePrimitivesItemsExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parsePrimitivesItemsMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parsePrimitivesItemsExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parsePrimitivesItemsMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parsePrimitivesItemsMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePrimitivesItemsPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parsePrimitivesItemsMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parsePrimitivesItemsMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parsePrimitivesItemsUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parsePrimitivesItemsEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parsePrimitivesItemsMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePrimitivesItemsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSecurity(value: unknown): unknown {
return _parseArrayDefinitionsSecurity(value);
}
function _parseArrayDefinitionsSecurity(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSecurityRequirement(value: unknown): unknown {
return _parseMapSecurityRequirement(value);
}
function _parseMapSecurityRequirement(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityRequirementAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsXml(value: unknown): unknown {
return _parseMapDefinitionsXml(value);
}
function _parseMapDefinitionsXml(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseXmlName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "namespace": {
const propertyValue = parseNamespace(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "prefix": {
const propertyValue = parsePrefix(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "attribute": {
const propertyValue = parseAttribute(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "wrapped": {
const propertyValue = parseWrapped(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseXmlAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseTag(value: unknown): unknown {
return _parseMapTag(value);
}
function _parseMapTag(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseTagName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseTagDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseTagExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseTagAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSecurityDefinitions(value: unknown): unknown {
return _parseMapDefinitionsSecurityDefinitions(value);
}
function _parseMapDefinitionsSecurityDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseBasicAuthenticationSecurity(value: unknown): unknown {
return _parseMapBasicAuthenticationSecurity(value);
}
function _parseMapBasicAuthenticationSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseBasicAuthenticationSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseBasicAuthenticationSecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseBasicAuthenticationSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseApiKeySecurity(value: unknown): unknown {
return _parseMapApiKeySecurity(value);
}
function _parseMapApiKeySecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseApiKeySecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseApiKeySecurityName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseApiKeySecurityIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseApiKeySecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseApiKeySecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2ImplicitSecurity(value: unknown): unknown {
return _parseMapOauth2ImplicitSecurity(value);
}
function _parseMapOauth2ImplicitSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2ImplicitSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2ImplicitSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2ImplicitSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationUrl": {
const propertyValue = parseOauth2ImplicitSecurityAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2ImplicitSecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2ImplicitSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2PasswordSecurity(value: unknown): unknown {
return _parseMapOauth2PasswordSecurity(value);
}
function _parseMapOauth2PasswordSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2PasswordSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2PasswordSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2PasswordSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2PasswordSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2PasswordSecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2PasswordSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2ApplicationSecurity(value: unknown): unknown {
return _parseMapOauth2ApplicationSecurity(value);
}
function _parseMapOauth2ApplicationSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2ApplicationSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2ApplicationSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2ApplicationSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2ApplicationSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2ApplicationSecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2ApplicationSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2AccessCodeSecurity(value: unknown): unknown {
return _parseMapOauth2AccessCodeSecurity(value);
}
function _parseMapOauth2AccessCodeSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2AccessCodeSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2AccessCodeSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2AccessCodeSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationUrl": {
const propertyValue = parseOauth2AccessCodeSecurityAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2AccessCodeSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2AccessCodeSecurityDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2AccessCodeSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2Scopes(value: unknown): unknown {
return _parseMapOauth2Scopes(value);
}
function _parseMapOauth2Scopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseOauth2ScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaTypeList(value: unknown): unknown {
return _parseArrayMediaTypeList(value);
}
function _parseArrayMediaTypeList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseMediaTypeListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseParametersList(value: unknown): unknown {
return _parseArrayParametersList(value);
}
function _parseArrayParametersList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseParametersListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemesList(value: unknown): unknown {
return _parseArraySchemesList(value);
}
function _parseArraySchemesList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchemesListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseDefinitionsCollectionFormat(value: unknown): unknown {
return _parseStringDefinitionsCollectionFormat(value);
}
function _parseStringDefinitionsCollectionFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseCollectionFormatWithMulti(value: unknown): unknown {
return _parseStringCollectionFormatWithMulti(value);
}
function _parseStringCollectionFormatWithMulti(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDefinitionsTitle(value: unknown): unknown {
return _parseReferenceDefinitionsTitle(value);
}
function _parseReferenceDefinitionsTitle(value: unknown): unknown {
return parseDraft04Title(value);
}
export function parseDefinitionsDescription(value: unknown): unknown {
return _parseReferenceDefinitionsDescription(value);
}
function _parseReferenceDefinitionsDescription(value: unknown): unknown {
return parseDraft04Description(value);
}
export function parseDefinitionsDefault(value: unknown): unknown {
return _parseReferenceDefinitionsDefault(value);
}
function _parseReferenceDefinitionsDefault(value: unknown): unknown {
return parseDraft04Default(value);
}
export function parseDefinitionsMultipleOf(value: unknown): unknown {
return _parseReferenceDefinitionsMultipleOf(value);
}
function _parseReferenceDefinitionsMultipleOf(value: unknown): unknown {
return parseDraft04MultipleOf(value);
}
export function parseDefinitionsMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsMaximum(value);
}
function _parseReferenceDefinitionsMaximum(value: unknown): unknown {
return parseDraft04Maximum(value);
}
export function parseDefinitionsExclusiveMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsExclusiveMaximum(value);
}
function _parseReferenceDefinitionsExclusiveMaximum(value: unknown): unknown {
return parseDraft04ExclusiveMaximum(value);
}
export function parseDefinitionsMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsMinimum(value);
}
function _parseReferenceDefinitionsMinimum(value: unknown): unknown {
return parseDraft04Minimum(value);
}
export function parseDefinitionsExclusiveMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsExclusiveMinimum(value);
}
function _parseReferenceDefinitionsExclusiveMinimum(value: unknown): unknown {
return parseDraft04ExclusiveMinimum(value);
}
export function parseDefinitionsMaxLength(value: unknown): unknown {
return _parseReferenceDefinitionsMaxLength(value);
}
function _parseReferenceDefinitionsMaxLength(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseDefinitionsMinLength(value: unknown): unknown {
return _parseReferenceDefinitionsMinLength(value);
}
function _parseReferenceDefinitionsMinLength(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsPattern(value: unknown): unknown {
return _parseReferenceDefinitionsPattern(value);
}
function _parseReferenceDefinitionsPattern(value: unknown): unknown {
return parseDraft04Pattern(value);
}
export function parseDefinitionsMaxItems(value: unknown): unknown {
return _parseReferenceDefinitionsMaxItems(value);
}
function _parseReferenceDefinitionsMaxItems(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseDefinitionsMinItems(value: unknown): unknown {
return _parseReferenceDefinitionsMinItems(value);
}
function _parseReferenceDefinitionsMinItems(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsUniqueItems(value: unknown): unknown {
return _parseReferenceDefinitionsUniqueItems(value);
}
function _parseReferenceDefinitionsUniqueItems(value: unknown): unknown {
return parseDraft04UniqueItems(value);
}
export function parseDefinitionsEnum(value: unknown): unknown {
return _parseReferenceDefinitionsEnum(value);
}
function _parseReferenceDefinitionsEnum(value: unknown): unknown {
return parseDraft04Enum(value);
}
export function parseJsonReference(value: unknown): unknown {
return _parseMapJsonReference(value);
}
function _parseMapJsonReference(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parseJsonReferenceRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseJsonReferenceAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSwagger(value: unknown): unknown {
return _parseStringSwagger(value);
}
function _parseStringSwagger(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesInfo(value: unknown): unknown {
return _parseReferencePropertiesInfo(value);
}
function _parseReferencePropertiesInfo(value: unknown): unknown {
return parseDefinitionsInfo(value);
}
export function parseHost(value: unknown): unknown {
return _parseStringHost(value);
}
function _parseStringHost(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasePath(value: unknown): unknown {
return _parseStringBasePath(value);
}
function _parseStringBasePath(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesSchemes(value: unknown): unknown {
return _parseReferencePropertiesSchemes(value);
}
function _parseReferencePropertiesSchemes(value: unknown): unknown {
return parseSchemesList(value);
}
export function parsePropertiesConsumes(value: unknown): unknown {
return _parseAllOfPropertiesConsumes(value);
}
function _parseAllOfPropertiesConsumes(value: unknown): unknown {
return parsePropertiesAllOfConsumes0(value);
}
export function parsePropertiesProduces(value: unknown): unknown {
return _parseAllOfPropertiesProduces(value);
}
function _parseAllOfPropertiesProduces(value: unknown): unknown {
return parsePropertiesAllOfProduces0(value);
}
export function parsePropertiesPaths(value: unknown): unknown {
return _parseReferencePropertiesPaths(value);
}
function _parseReferencePropertiesPaths(value: unknown): unknown {
return parseDefinitionsPaths(value);
}
export function parsePropertiesDefinitions(value: unknown): unknown {
return _parseReferencePropertiesDefinitions(value);
}
function _parseReferencePropertiesDefinitions(value: unknown): unknown {
return parseDefinitionsDefinitions(value);
}
export function parsePropertiesParameters(value: unknown): unknown {
return _parseReferencePropertiesParameters(value);
}
function _parseReferencePropertiesParameters(value: unknown): unknown {
return parseParameterDefinitions(value);
}
export function parsePropertiesResponses(value: unknown): unknown {
return _parseReferencePropertiesResponses(value);
}
function _parseReferencePropertiesResponses(value: unknown): unknown {
return parseResponseDefinitions(value);
}
export function parsePropertiesSecurity(value: unknown): unknown {
return _parseReferencePropertiesSecurity(value);
}
function _parseReferencePropertiesSecurity(value: unknown): unknown {
return parseDefinitionsSecurity(value);
}
export function parsePropertiesSecurityDefinitions(value: unknown): unknown {
return _parseReferencePropertiesSecurityDefinitions(value);
}
function _parseReferencePropertiesSecurityDefinitions(value: unknown): unknown {
return parseDefinitionsSecurityDefinitions(value);
}
export function parsePropertiesTags(value: unknown): unknown {
return _parseArrayPropertiesTags(value);
}
function _parseArrayPropertiesTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parsePropertiesTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parsePropertiesExternalDocs(value: unknown): unknown {
return _parseReferencePropertiesExternalDocs(value);
}
function _parseReferencePropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseV2AdditionalProperties(value: unknown): unknown {
return _parseNeverV2AdditionalProperties(value);
}
function _parseNeverV2AdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseV2PatternPropertiesX(value: unknown): unknown {
return _parseReferenceV2PatternPropertiesX(value);
}
function _parseReferenceV2PatternPropertiesX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseInfoTitle(value: unknown): unknown {
return _parseStringInfoTitle(value);
}
function _parseStringInfoTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseVersion(value: unknown): unknown {
return _parseStringVersion(value);
}
function _parseStringVersion(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoDescription(value: unknown): unknown {
return _parseStringInfoDescription(value);
}
function _parseStringInfoDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTermsOfService(value: unknown): unknown {
return _parseStringTermsOfService(value);
}
function _parseStringTermsOfService(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoContact(value: unknown): unknown {
return _parseReferenceInfoContact(value);
}
function _parseReferenceInfoContact(value: unknown): unknown {
return parseDefinitionsContact(value);
}
export function parseInfoLicense(value: unknown): unknown {
return _parseReferenceInfoLicense(value);
}
function _parseReferenceInfoLicense(value: unknown): unknown {
return parseDefinitionsLicense(value);
}
export function parseInfoAdditionalProperties(value: unknown): unknown {
return _parseNeverInfoAdditionalProperties(value);
}
function _parseNeverInfoAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseInfoX(value: unknown): unknown {
return _parseReferenceInfoX(value);
}
function _parseReferenceInfoX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseContactName(value: unknown): unknown {
return _parseStringContactName(value);
}
function _parseStringContactName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactUrl(value: unknown): unknown {
return _parseStringContactUrl(value);
}
function _parseStringContactUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEmail(value: unknown): unknown {
return _parseStringEmail(value);
}
function _parseStringEmail(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactAdditionalProperties(value: unknown): unknown {
return _parseNeverContactAdditionalProperties(value);
}
function _parseNeverContactAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseContactX(value: unknown): unknown {
return _parseReferenceContactX(value);
}
function _parseReferenceContactX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseLicenseName(value: unknown): unknown {
return _parseStringLicenseName(value);
}
function _parseStringLicenseName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseUrl(value: unknown): unknown {
return _parseStringLicenseUrl(value);
}
function _parseStringLicenseUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseAdditionalProperties(value: unknown): unknown {
return _parseNeverLicenseAdditionalProperties(value);
}
function _parseNeverLicenseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLicenseX(value: unknown): unknown {
return _parseReferenceLicenseX(value);
}
function _parseReferenceLicenseX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathsAdditionalProperties(value: unknown): unknown {
return _parseNeverPathsAdditionalProperties(value);
}
function _parseNeverPathsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathsX(value: unknown): unknown {
return _parseReferencePathsX(value);
}
function _parseReferencePathsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePatternProperties(value: unknown): unknown {
return _parseReferencePatternProperties(value);
}
function _parseReferencePatternProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parseDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceDefinitionsAdditionalProperties(value);
}
function _parseReferenceDefinitionsAdditionalProperties(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseParameterDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceParameterDefinitionsAdditionalProperties(value);
}
function _parseReferenceParameterDefinitionsAdditionalProperties(value: unknown): unknown {
return parseParameter(value);
}
export function parseResponseDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceResponseDefinitionsAdditionalProperties(value);
}
function _parseReferenceResponseDefinitionsAdditionalProperties(value: unknown): unknown {
return parseResponse(value);
}
export function parseExternalDocsDescription(value: unknown): unknown {
return _parseStringExternalDocsDescription(value);
}
function _parseStringExternalDocsDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocsUrl(value: unknown): unknown {
return _parseStringExternalDocsUrl(value);
}
function _parseStringExternalDocsUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocsAdditionalProperties(value: unknown): unknown {
return _parseNeverExternalDocsAdditionalProperties(value);
}
function _parseNeverExternalDocsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExternalDocsX(value: unknown): unknown {
return _parseReferenceExternalDocsX(value);
}
function _parseReferenceExternalDocsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseExamplesAdditionalProperties(value: unknown): unknown {
return _parseAnyExamplesAdditionalProperties(value);
}
function _parseAnyExamplesAdditionalProperties(value: unknown): unknown {
return value;
}
export function parseOperationTags(value: unknown): unknown {
return _parseArrayOperationTags(value);
}
function _parseArrayOperationTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSummary(value: unknown): unknown {
return _parseStringSummary(value);
}
function _parseStringSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationDescription(value: unknown): unknown {
return _parseStringOperationDescription(value);
}
function _parseStringOperationDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationExternalDocs(value: unknown): unknown {
return _parseReferenceOperationExternalDocs(value);
}
function _parseReferenceOperationExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseOperationId(value: unknown): unknown {
return _parseStringOperationId(value);
}
function _parseStringOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationProduces(value: unknown): unknown {
return _parseAllOfOperationProduces(value);
}
function _parseAllOfOperationProduces(value: unknown): unknown {
return parseOperationAllOfProduces0(value);
}
export function parseOperationConsumes(value: unknown): unknown {
return _parseAllOfOperationConsumes(value);
}
function _parseAllOfOperationConsumes(value: unknown): unknown {
return parseOperationAllOfConsumes0(value);
}
export function parseOperationParameters(value: unknown): unknown {
return _parseReferenceOperationParameters(value);
}
function _parseReferenceOperationParameters(value: unknown): unknown {
return parseParametersList(value);
}
export function parseOperationResponses(value: unknown): unknown {
return _parseReferenceOperationResponses(value);
}
function _parseReferenceOperationResponses(value: unknown): unknown {
return parseDefinitionsResponses(value);
}
export function parseOperationSchemes(value: unknown): unknown {
return _parseReferenceOperationSchemes(value);
}
function _parseReferenceOperationSchemes(value: unknown): unknown {
return parseSchemesList(value);
}
export function parseDeprecated(value: unknown): unknown {
return _parseBooleanDeprecated(value);
}
function _parseBooleanDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOperationSecurity(value: unknown): unknown {
return _parseReferenceOperationSecurity(value);
}
function _parseReferenceOperationSecurity(value: unknown): unknown {
return parseDefinitionsSecurity(value);
}
export function parseOperationAdditionalProperties(value: unknown): unknown {
return _parseNeverOperationAdditionalProperties(value);
}
function _parseNeverOperationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOperationX(value: unknown): unknown {
return _parseReferenceOperationX(value);
}
function _parseReferenceOperationX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathItemRef(value: unknown): unknown {
return _parseStringPathItemRef(value);
}
function _parseStringPathItemRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseGet(value: unknown): unknown {
return _parseReferenceGet(value);
}
function _parseReferenceGet(value: unknown): unknown {
return parseOperation(value);
}
export function parsePut(value: unknown): unknown {
return _parseReferencePut(value);
}
function _parseReferencePut(value: unknown): unknown {
return parseOperation(value);
}
export function parsePost(value: unknown): unknown {
return _parseReferencePost(value);
}
function _parseReferencePost(value: unknown): unknown {
return parseOperation(value);
}
export function parseDelete(value: unknown): unknown {
return _parseReferenceDelete(value);
}
function _parseReferenceDelete(value: unknown): unknown {
return parseOperation(value);
}
export function parseOptions(value: unknown): unknown {
return _parseReferenceOptions(value);
}
function _parseReferenceOptions(value: unknown): unknown {
return parseOperation(value);
}
export function parseHead(value: unknown): unknown {
return _parseReferenceHead(value);
}
function _parseReferenceHead(value: unknown): unknown {
return parseOperation(value);
}
export function parsePatch(value: unknown): unknown {
return _parseReferencePatch(value);
}
function _parseReferencePatch(value: unknown): unknown {
return parseOperation(value);
}
export function parsePathItemParameters(value: unknown): unknown {
return _parseReferencePathItemParameters(value);
}
function _parseReferencePathItemParameters(value: unknown): unknown {
return parseParametersList(value);
}
export function parsePathItemAdditionalProperties(value: unknown): unknown {
return _parseNeverPathItemAdditionalProperties(value);
}
function _parseNeverPathItemAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathItemX(value: unknown): unknown {
return _parseReferencePathItemX(value);
}
function _parseReferencePathItemX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseResponsesAdditionalProperties(value: unknown): unknown {
return _parseNeverResponsesAdditionalProperties(value);
}
function _parseNeverResponsesAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponses093Default(value: unknown): unknown {
return _parseReferenceResponses093Default(value);
}
function _parseReferenceResponses093Default(value: unknown): unknown {
return parseResponseValue(value);
}
export function parseResponsesX(value: unknown): unknown {
return _parseReferenceResponsesX(value);
}
function _parseReferenceResponsesX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseNot(value: unknown): unknown {
return _parseMapNot(value);
}
function _parseMapNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseNotAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseValue0(value: unknown): unknown {
return _parseReferenceResponseValue0(value);
}
function _parseReferenceResponseValue0(value: unknown): unknown {
return parseResponse(value);
}
export function parseResponseValue1(value: unknown): unknown {
return _parseReferenceResponseValue1(value);
}
function _parseReferenceResponseValue1(value: unknown): unknown {
return parseJsonReference(value);
}
export function parseResponseDescription(value: unknown): unknown {
return _parseStringResponseDescription(value);
}
function _parseStringResponseDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseResponseSchema(value: unknown): unknown {
return _parseOneOfResponseSchema(value);
}
function _parseOneOfResponseSchema(value: unknown): unknown {
return parseResponse0(value) ?? parseResponse1(value);
}
export function parseResponseHeaders(value: unknown): unknown {
return _parseReferenceResponseHeaders(value);
}
function _parseReferenceResponseHeaders(value: unknown): unknown {
return parseDefinitionsHeaders(value);
}
export function parseResponseExamples(value: unknown): unknown {
return _parseReferenceResponseExamples(value);
}
function _parseReferenceResponseExamples(value: unknown): unknown {
return parseDefinitionsExamples(value);
}
export function parseResponseAdditionalProperties(value: unknown): unknown {
return _parseNeverResponseAdditionalProperties(value);
}
function _parseNeverResponseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponseX(value: unknown): unknown {
return _parseReferenceResponseX(value);
}
function _parseReferenceResponseX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseHeadersAdditionalProperties(value: unknown): unknown {
return _parseReferenceHeadersAdditionalProperties(value);
}
function _parseReferenceHeadersAdditionalProperties(value: unknown): unknown {
return parseHeader(value);
}
export function parseHeaderType(value: unknown): unknown {
return _parseStringHeaderType(value);
}
function _parseStringHeaderType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderFormat(value: unknown): unknown {
return _parseStringHeaderFormat(value);
}
function _parseStringHeaderFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderItems(value: unknown): unknown {
return _parseReferenceHeaderItems(value);
}
function _parseReferenceHeaderItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseHeaderCollectionFormat(value: unknown): unknown {
return _parseReferenceHeaderCollectionFormat(value);
}
function _parseReferenceHeaderCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parseHeaderDefault(value: unknown): unknown {
return _parseReferenceHeaderDefault(value);
}
function _parseReferenceHeaderDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseHeaderMaximum(value: unknown): unknown {
return _parseReferenceHeaderMaximum(value);
}
function _parseReferenceHeaderMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseHeaderExclusiveMaximum(value: unknown): unknown {
return _parseReferenceHeaderExclusiveMaximum(value);
}
function _parseReferenceHeaderExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseHeaderMinimum(value: unknown): unknown {
return _parseReferenceHeaderMinimum(value);
}
function _parseReferenceHeaderMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseHeaderExclusiveMinimum(value: unknown): unknown {
return _parseReferenceHeaderExclusiveMinimum(value);
}
function _parseReferenceHeaderExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseHeaderMaxLength(value: unknown): unknown {
return _parseReferenceHeaderMaxLength(value);
}
function _parseReferenceHeaderMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseHeaderMinLength(value: unknown): unknown {
return _parseReferenceHeaderMinLength(value);
}
function _parseReferenceHeaderMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseHeaderPattern(value: unknown): unknown {
return _parseReferenceHeaderPattern(value);
}
function _parseReferenceHeaderPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseHeaderMaxItems(value: unknown): unknown {
return _parseReferenceHeaderMaxItems(value);
}
function _parseReferenceHeaderMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseHeaderMinItems(value: unknown): unknown {
return _parseReferenceHeaderMinItems(value);
}
function _parseReferenceHeaderMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseHeaderUniqueItems(value: unknown): unknown {
return _parseReferenceHeaderUniqueItems(value);
}
function _parseReferenceHeaderUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseHeaderEnum(value: unknown): unknown {
return _parseReferenceHeaderEnum(value);
}
function _parseReferenceHeaderEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseHeaderMultipleOf(value: unknown): unknown {
return _parseReferenceHeaderMultipleOf(value);
}
function _parseReferenceHeaderMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseHeaderDescription(value: unknown): unknown {
return _parseStringHeaderDescription(value);
}
function _parseStringHeaderDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderAdditionalProperties(value);
}
function _parseNeverHeaderAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderX(value: unknown): unknown {
return _parseReferenceHeaderX(value);
}
function _parseReferenceHeaderX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseVendorExtensionAdditionalProperties(value: unknown): unknown {
return _parseAnyVendorExtensionAdditionalProperties(value);
}
function _parseAnyVendorExtensionAdditionalProperties(value: unknown): unknown {
return value;
}
export function parseVendorExtensionAdditionalItems(value: unknown): unknown {
return _parseAnyVendorExtensionAdditionalItems(value);
}
function _parseAnyVendorExtensionAdditionalItems(value: unknown): unknown {
return value;
}
export function parseBodyParameterDescription(value: unknown): unknown {
return _parseStringBodyParameterDescription(value);
}
function _parseStringBodyParameterDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterName(value: unknown): unknown {
return _parseStringBodyParameterName(value);
}
function _parseStringBodyParameterName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterIn(value: unknown): unknown {
return _parseStringBodyParameterIn(value);
}
function _parseStringBodyParameterIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterRequired(value: unknown): unknown {
return _parseBooleanBodyParameterRequired(value);
}
function _parseBooleanBodyParameterRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseBodyParameterSchema(value: unknown): unknown {
return _parseReferenceBodyParameterSchema(value);
}
function _parseReferenceBodyParameterSchema(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseBodyParameterAdditionalProperties(value: unknown): unknown {
return _parseNeverBodyParameterAdditionalProperties(value);
}
function _parseNeverBodyParameterAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseBodyParameterX(value: unknown): unknown {
return _parseReferenceBodyParameterX(value);
}
function _parseReferenceBodyParameterX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseHeaderParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanHeaderParameterSubSchemaRequired(value);
}
function _parseBooleanHeaderParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderParameterSubSchemaIn(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaIn(value);
}
function _parseStringHeaderParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaDescription(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaDescription(value);
}
function _parseStringHeaderParameterSubSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaName(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaName(value);
}
function _parseStringHeaderParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaType(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaType(value);
}
function _parseStringHeaderParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaFormat(value);
}
function _parseStringHeaderParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaItems(value);
}
function _parseReferenceHeaderParameterSubSchemaItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseHeaderParameterSubSchemaCollectionFormat(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaCollectionFormat(value);
}
function _parseReferenceHeaderParameterSubSchemaCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parseHeaderParameterSubSchemaDefault(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaDefault(value);
}
function _parseReferenceHeaderParameterSubSchemaDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseHeaderParameterSubSchemaMaximum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMaximum(value);
}
function _parseReferenceHeaderParameterSubSchemaMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseHeaderParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaExclusiveMaximum(value);
}
function _parseReferenceHeaderParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseHeaderParameterSubSchemaMinimum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMinimum(value);
}
function _parseReferenceHeaderParameterSubSchemaMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseHeaderParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaExclusiveMinimum(value);
}
function _parseReferenceHeaderParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseHeaderParameterSubSchemaMaxLength(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMaxLength(value);
}
function _parseReferenceHeaderParameterSubSchemaMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseHeaderParameterSubSchemaMinLength(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMinLength(value);
}
function _parseReferenceHeaderParameterSubSchemaMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseHeaderParameterSubSchemaPattern(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPattern(value);
}
function _parseReferenceHeaderParameterSubSchemaPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseHeaderParameterSubSchemaMaxItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMaxItems(value);
}
function _parseReferenceHeaderParameterSubSchemaMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseHeaderParameterSubSchemaMinItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMinItems(value);
}
function _parseReferenceHeaderParameterSubSchemaMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseHeaderParameterSubSchemaUniqueItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaUniqueItems(value);
}
function _parseReferenceHeaderParameterSubSchemaUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseHeaderParameterSubSchemaEnum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaEnum(value);
}
function _parseReferenceHeaderParameterSubSchemaEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseHeaderParameterSubSchemaMultipleOf(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaMultipleOf(value);
}
function _parseReferenceHeaderParameterSubSchemaMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseHeaderParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverHeaderParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaX(value);
}
function _parseReferenceHeaderParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseQueryParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanQueryParameterSubSchemaRequired(value);
}
function _parseBooleanQueryParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseQueryParameterSubSchemaIn(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaIn(value);
}
function _parseStringQueryParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaDescription(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaDescription(value);
}
function _parseStringQueryParameterSubSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaName(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaName(value);
}
function _parseStringQueryParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
return _parseBooleanQueryParameterSubSchemaAllowEmptyValue(value);
}
function _parseBooleanQueryParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseQueryParameterSubSchemaType(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaType(value);
}
function _parseStringQueryParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaFormat(value);
}
function _parseStringQueryParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaItems(value);
}
function _parseReferenceQueryParameterSubSchemaItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseQueryParameterSubSchemaCollectionFormat(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaCollectionFormat(value);
}
function _parseReferenceQueryParameterSubSchemaCollectionFormat(value: unknown): unknown {
return parseCollectionFormatWithMulti(value);
}
export function parseQueryParameterSubSchemaDefault(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaDefault(value);
}
function _parseReferenceQueryParameterSubSchemaDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseQueryParameterSubSchemaMaximum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMaximum(value);
}
function _parseReferenceQueryParameterSubSchemaMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseQueryParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaExclusiveMaximum(value);
}
function _parseReferenceQueryParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseQueryParameterSubSchemaMinimum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMinimum(value);
}
function _parseReferenceQueryParameterSubSchemaMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseQueryParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaExclusiveMinimum(value);
}
function _parseReferenceQueryParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseQueryParameterSubSchemaMaxLength(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMaxLength(value);
}
function _parseReferenceQueryParameterSubSchemaMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseQueryParameterSubSchemaMinLength(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMinLength(value);
}
function _parseReferenceQueryParameterSubSchemaMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseQueryParameterSubSchemaPattern(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPattern(value);
}
function _parseReferenceQueryParameterSubSchemaPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseQueryParameterSubSchemaMaxItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMaxItems(value);
}
function _parseReferenceQueryParameterSubSchemaMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseQueryParameterSubSchemaMinItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMinItems(value);
}
function _parseReferenceQueryParameterSubSchemaMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseQueryParameterSubSchemaUniqueItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaUniqueItems(value);
}
function _parseReferenceQueryParameterSubSchemaUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseQueryParameterSubSchemaEnum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaEnum(value);
}
function _parseReferenceQueryParameterSubSchemaEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseQueryParameterSubSchemaMultipleOf(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaMultipleOf(value);
}
function _parseReferenceQueryParameterSubSchemaMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseQueryParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverQueryParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverQueryParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseQueryParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaX(value);
}
function _parseReferenceQueryParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseFormDataParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanFormDataParameterSubSchemaRequired(value);
}
function _parseBooleanFormDataParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFormDataParameterSubSchemaIn(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaIn(value);
}
function _parseStringFormDataParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaDescription(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaDescription(value);
}
function _parseStringFormDataParameterSubSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaName(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaName(value);
}
function _parseStringFormDataParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
return _parseBooleanFormDataParameterSubSchemaAllowEmptyValue(value);
}
function _parseBooleanFormDataParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFormDataParameterSubSchemaType(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaType(value);
}
function _parseStringFormDataParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaFormat(value);
}
function _parseStringFormDataParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaItems(value);
}
function _parseReferenceFormDataParameterSubSchemaItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseFormDataParameterSubSchemaCollectionFormat(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaCollectionFormat(value);
}
function _parseReferenceFormDataParameterSubSchemaCollectionFormat(value: unknown): unknown {
return parseCollectionFormatWithMulti(value);
}
export function parseFormDataParameterSubSchemaDefault(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaDefault(value);
}
function _parseReferenceFormDataParameterSubSchemaDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseFormDataParameterSubSchemaMaximum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMaximum(value);
}
function _parseReferenceFormDataParameterSubSchemaMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseFormDataParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaExclusiveMaximum(value);
}
function _parseReferenceFormDataParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseFormDataParameterSubSchemaMinimum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMinimum(value);
}
function _parseReferenceFormDataParameterSubSchemaMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseFormDataParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaExclusiveMinimum(value);
}
function _parseReferenceFormDataParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseFormDataParameterSubSchemaMaxLength(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMaxLength(value);
}
function _parseReferenceFormDataParameterSubSchemaMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseFormDataParameterSubSchemaMinLength(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMinLength(value);
}
function _parseReferenceFormDataParameterSubSchemaMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseFormDataParameterSubSchemaPattern(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPattern(value);
}
function _parseReferenceFormDataParameterSubSchemaPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseFormDataParameterSubSchemaMaxItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMaxItems(value);
}
function _parseReferenceFormDataParameterSubSchemaMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseFormDataParameterSubSchemaMinItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMinItems(value);
}
function _parseReferenceFormDataParameterSubSchemaMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseFormDataParameterSubSchemaUniqueItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaUniqueItems(value);
}
function _parseReferenceFormDataParameterSubSchemaUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseFormDataParameterSubSchemaEnum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaEnum(value);
}
function _parseReferenceFormDataParameterSubSchemaEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseFormDataParameterSubSchemaMultipleOf(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaMultipleOf(value);
}
function _parseReferenceFormDataParameterSubSchemaMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseFormDataParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverFormDataParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverFormDataParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseFormDataParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaX(value);
}
function _parseReferenceFormDataParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanPathParameterSubSchemaRequired(value);
}
function _parseBooleanPathParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePathParameterSubSchemaIn(value: unknown): unknown {
return _parseStringPathParameterSubSchemaIn(value);
}
function _parseStringPathParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaDescription(value: unknown): unknown {
return _parseStringPathParameterSubSchemaDescription(value);
}
function _parseStringPathParameterSubSchemaDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaName(value: unknown): unknown {
return _parseStringPathParameterSubSchemaName(value);
}
function _parseStringPathParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaType(value: unknown): unknown {
return _parseStringPathParameterSubSchemaType(value);
}
function _parseStringPathParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringPathParameterSubSchemaFormat(value);
}
function _parseStringPathParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaItems(value);
}
function _parseReferencePathParameterSubSchemaItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parsePathParameterSubSchemaCollectionFormat(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaCollectionFormat(value);
}
function _parseReferencePathParameterSubSchemaCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parsePathParameterSubSchemaDefault(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaDefault(value);
}
function _parseReferencePathParameterSubSchemaDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parsePathParameterSubSchemaMaximum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMaximum(value);
}
function _parseReferencePathParameterSubSchemaMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parsePathParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaExclusiveMaximum(value);
}
function _parseReferencePathParameterSubSchemaExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parsePathParameterSubSchemaMinimum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMinimum(value);
}
function _parseReferencePathParameterSubSchemaMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parsePathParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaExclusiveMinimum(value);
}
function _parseReferencePathParameterSubSchemaExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parsePathParameterSubSchemaMaxLength(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMaxLength(value);
}
function _parseReferencePathParameterSubSchemaMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parsePathParameterSubSchemaMinLength(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMinLength(value);
}
function _parseReferencePathParameterSubSchemaMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parsePathParameterSubSchemaPattern(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPattern(value);
}
function _parseReferencePathParameterSubSchemaPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parsePathParameterSubSchemaMaxItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMaxItems(value);
}
function _parseReferencePathParameterSubSchemaMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parsePathParameterSubSchemaMinItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMinItems(value);
}
function _parseReferencePathParameterSubSchemaMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parsePathParameterSubSchemaUniqueItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaUniqueItems(value);
}
function _parseReferencePathParameterSubSchemaUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parsePathParameterSubSchemaEnum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaEnum(value);
}
function _parseReferencePathParameterSubSchemaEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parsePathParameterSubSchemaMultipleOf(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaMultipleOf(value);
}
function _parseReferencePathParameterSubSchemaMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parsePathParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverPathParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverPathParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathParameterSubSchemaX(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaX(value);
}
function _parseReferencePathParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseNonBodyParameter0(value: unknown): unknown {
return _parseReferenceNonBodyParameter0(value);
}
function _parseReferenceNonBodyParameter0(value: unknown): unknown {
return parseHeaderParameterSubSchema(value);
}
export function parseNonBodyParameter1(value: unknown): unknown {
return _parseReferenceNonBodyParameter1(value);
}
function _parseReferenceNonBodyParameter1(value: unknown): unknown {
return parseFormDataParameterSubSchema(value);
}
export function parseNonBodyParameter2(value: unknown): unknown {
return _parseReferenceNonBodyParameter2(value);
}
function _parseReferenceNonBodyParameter2(value: unknown): unknown {
return parseQueryParameterSubSchema(value);
}
export function parseNonBodyParameter3(value: unknown): unknown {
return _parseReferenceNonBodyParameter3(value);
}
function _parseReferenceNonBodyParameter3(value: unknown): unknown {
return parsePathParameterSubSchema(value);
}
export function parseParameter0(value: unknown): unknown {
return _parseReferenceParameter0(value);
}
function _parseReferenceParameter0(value: unknown): unknown {
return parseBodyParameter(value);
}
export function parseParameter1(value: unknown): unknown {
return _parseReferenceParameter1(value);
}
function _parseReferenceParameter1(value: unknown): unknown {
return parseNonBodyParameter(value);
}
export function parseSchemaRef(value: unknown): unknown {
return _parseStringSchemaRef(value);
}
function _parseStringSchemaRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaFormat(value: unknown): unknown {
return _parseStringSchemaFormat(value);
}
function _parseStringSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaTitle(value: unknown): unknown {
return _parseReferenceSchemaTitle(value);
}
function _parseReferenceSchemaTitle(value: unknown): unknown {
return parseDraft04Title(value);
}
export function parseSchemaDescription(value: unknown): unknown {
return _parseReferenceSchemaDescription(value);
}
function _parseReferenceSchemaDescription(value: unknown): unknown {
return parseDraft04Description(value);
}
export function parseSchemaDefault(value: unknown): unknown {
return _parseReferenceSchemaDefault(value);
}
function _parseReferenceSchemaDefault(value: unknown): unknown {
return parseDraft04Default(value);
}
export function parseSchemaMultipleOf(value: unknown): unknown {
return _parseReferenceSchemaMultipleOf(value);
}
function _parseReferenceSchemaMultipleOf(value: unknown): unknown {
return parseDraft04MultipleOf(value);
}
export function parseSchemaMaximum(value: unknown): unknown {
return _parseReferenceSchemaMaximum(value);
}
function _parseReferenceSchemaMaximum(value: unknown): unknown {
return parseDraft04Maximum(value);
}
export function parseSchemaExclusiveMaximum(value: unknown): unknown {
return _parseReferenceSchemaExclusiveMaximum(value);
}
function _parseReferenceSchemaExclusiveMaximum(value: unknown): unknown {
return parseDraft04ExclusiveMaximum(value);
}
export function parseSchemaMinimum(value: unknown): unknown {
return _parseReferenceSchemaMinimum(value);
}
function _parseReferenceSchemaMinimum(value: unknown): unknown {
return parseDraft04Minimum(value);
}
export function parseSchemaExclusiveMinimum(value: unknown): unknown {
return _parseReferenceSchemaExclusiveMinimum(value);
}
function _parseReferenceSchemaExclusiveMinimum(value: unknown): unknown {
return parseDraft04ExclusiveMinimum(value);
}
export function parseSchemaMaxLength(value: unknown): unknown {
return _parseReferenceSchemaMaxLength(value);
}
function _parseReferenceSchemaMaxLength(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseSchemaMinLength(value: unknown): unknown {
return _parseReferenceSchemaMinLength(value);
}
function _parseReferenceSchemaMinLength(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseSchemaPattern(value: unknown): unknown {
return _parseReferenceSchemaPattern(value);
}
function _parseReferenceSchemaPattern(value: unknown): unknown {
return parseDraft04Pattern(value);
}
export function parseSchemaMaxItems(value: unknown): unknown {
return _parseReferenceSchemaMaxItems(value);
}
function _parseReferenceSchemaMaxItems(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseSchemaMinItems(value: unknown): unknown {
return _parseReferenceSchemaMinItems(value);
}
function _parseReferenceSchemaMinItems(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseSchemaUniqueItems(value: unknown): unknown {
return _parseReferenceSchemaUniqueItems(value);
}
function _parseReferenceSchemaUniqueItems(value: unknown): unknown {
return parseDraft04UniqueItems(value);
}
export function parseMaxProperties(value: unknown): unknown {
return _parseReferenceMaxProperties(value);
}
function _parseReferenceMaxProperties(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseMinProperties(value: unknown): unknown {
return _parseReferenceMinProperties(value);
}
function _parseReferenceMinProperties(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseSchemaRequired(value: unknown): unknown {
return _parseReferenceSchemaRequired(value);
}
function _parseReferenceSchemaRequired(value: unknown): unknown {
return parseStringArray(value);
}
export function parseSchemaEnum(value: unknown): unknown {
return _parseReferenceSchemaEnum(value);
}
function _parseReferenceSchemaEnum(value: unknown): unknown {
return parseDraft04Enum(value);
}
export function parsePropertiesSchemaAdditionalProperties(value: unknown): unknown {
return _parseAnyOfPropertiesSchemaAdditionalProperties(value);
}
function _parseAnyOfPropertiesSchemaAdditionalProperties(value: unknown): unknown {
return parseAdditionalPropertiesAnyOf0(value) ?? parseAdditionalPropertiesAnyOf1(value);
}
export function parseSchemaType(value: unknown): unknown {
return _parseReferenceSchemaType(value);
}
function _parseReferenceSchemaType(value: unknown): unknown {
return parseDraft04Type(value);
}
export function parseSchemaItems(value: unknown): unknown {
return _parseAnyOfSchemaItems(value);
}
function _parseAnyOfSchemaItems(value: unknown): unknown {
return parseItemsAnyOf0(value) ?? parseItemsAnyOf1(value);
}
export function parseAllOf(value: unknown): unknown {
return _parseArrayAllOf(value);
}
function _parseArrayAllOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAllOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseProperties(value: unknown): unknown {
return _parseMapProperties(value);
}
function _parseMapProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDiscriminator(value: unknown): unknown {
return _parseStringDiscriminator(value);
}
function _parseStringDiscriminator(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaReadOnly(value: unknown): unknown {
return _parseBooleanSchemaReadOnly(value);
}
function _parseBooleanSchemaReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseSchemaXml(value: unknown): unknown {
return _parseReferenceSchemaXml(value);
}
function _parseReferenceSchemaXml(value: unknown): unknown {
return parseDefinitionsXml(value);
}
export function parseSchemaExternalDocs(value: unknown): unknown {
return _parseReferenceSchemaExternalDocs(value);
}
function _parseReferenceSchemaExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseSchemaExample(value: unknown): unknown {
return ;
}
export function parseDefinitionsSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverDefinitionsSchemaAdditionalProperties(value);
}
function _parseNeverDefinitionsSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaPatternPropertiesX(value: unknown): unknown {
return _parseReferenceSchemaPatternPropertiesX(value);
}
function _parseReferenceSchemaPatternPropertiesX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseFileSchemaFormat(value: unknown): unknown {
return _parseStringFileSchemaFormat(value);
}
function _parseStringFileSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFileSchemaTitle(value: unknown): unknown {
return _parseReferenceFileSchemaTitle(value);
}
function _parseReferenceFileSchemaTitle(value: unknown): unknown {
return parseDraft04Title(value);
}
export function parseFileSchemaDescription(value: unknown): unknown {
return _parseReferenceFileSchemaDescription(value);
}
function _parseReferenceFileSchemaDescription(value: unknown): unknown {
return parseDraft04Description(value);
}
export function parseFileSchemaDefault(value: unknown): unknown {
return _parseReferenceFileSchemaDefault(value);
}
function _parseReferenceFileSchemaDefault(value: unknown): unknown {
return parseDraft04Default(value);
}
export function parseFileSchemaRequired(value: unknown): unknown {
return _parseReferenceFileSchemaRequired(value);
}
function _parseReferenceFileSchemaRequired(value: unknown): unknown {
return parseStringArray(value);
}
export function parseFileSchemaType(value: unknown): unknown {
return _parseStringFileSchemaType(value);
}
function _parseStringFileSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFileSchemaReadOnly(value: unknown): unknown {
return _parseBooleanFileSchemaReadOnly(value);
}
function _parseBooleanFileSchemaReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFileSchemaExternalDocs(value: unknown): unknown {
return _parseReferenceFileSchemaExternalDocs(value);
}
function _parseReferenceFileSchemaExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseFileSchemaExample(value: unknown): unknown {
return ;
}
export function parseFileSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverFileSchemaAdditionalProperties(value);
}
function _parseNeverFileSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseFileSchemaX(value: unknown): unknown {
return _parseReferenceFileSchemaX(value);
}
function _parseReferenceFileSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePrimitivesItemsType(value: unknown): unknown {
return _parseStringPrimitivesItemsType(value);
}
function _parseStringPrimitivesItemsType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrimitivesItemsFormat(value: unknown): unknown {
return _parseStringPrimitivesItemsFormat(value);
}
function _parseStringPrimitivesItemsFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrimitivesItemsItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsItems(value);
}
function _parseReferencePrimitivesItemsItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parsePrimitivesItemsCollectionFormat(value: unknown): unknown {
return _parseReferencePrimitivesItemsCollectionFormat(value);
}
function _parseReferencePrimitivesItemsCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parsePrimitivesItemsDefault(value: unknown): unknown {
return _parseReferencePrimitivesItemsDefault(value);
}
function _parseReferencePrimitivesItemsDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parsePrimitivesItemsMaximum(value: unknown): unknown {
return _parseReferencePrimitivesItemsMaximum(value);
}
function _parseReferencePrimitivesItemsMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parsePrimitivesItemsExclusiveMaximum(value: unknown): unknown {
return _parseReferencePrimitivesItemsExclusiveMaximum(value);
}
function _parseReferencePrimitivesItemsExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parsePrimitivesItemsMinimum(value: unknown): unknown {
return _parseReferencePrimitivesItemsMinimum(value);
}
function _parseReferencePrimitivesItemsMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parsePrimitivesItemsExclusiveMinimum(value: unknown): unknown {
return _parseReferencePrimitivesItemsExclusiveMinimum(value);
}
function _parseReferencePrimitivesItemsExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parsePrimitivesItemsMaxLength(value: unknown): unknown {
return _parseReferencePrimitivesItemsMaxLength(value);
}
function _parseReferencePrimitivesItemsMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parsePrimitivesItemsMinLength(value: unknown): unknown {
return _parseReferencePrimitivesItemsMinLength(value);
}
function _parseReferencePrimitivesItemsMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parsePrimitivesItemsPattern(value: unknown): unknown {
return _parseReferencePrimitivesItemsPattern(value);
}
function _parseReferencePrimitivesItemsPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parsePrimitivesItemsMaxItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsMaxItems(value);
}
function _parseReferencePrimitivesItemsMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parsePrimitivesItemsMinItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsMinItems(value);
}
function _parseReferencePrimitivesItemsMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parsePrimitivesItemsUniqueItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsUniqueItems(value);
}
function _parseReferencePrimitivesItemsUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parsePrimitivesItemsEnum(value: unknown): unknown {
return _parseReferencePrimitivesItemsEnum(value);
}
function _parseReferencePrimitivesItemsEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parsePrimitivesItemsMultipleOf(value: unknown): unknown {
return _parseReferencePrimitivesItemsMultipleOf(value);
}
function _parseReferencePrimitivesItemsMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parsePrimitivesItemsAdditionalProperties(value: unknown): unknown {
return _parseNeverPrimitivesItemsAdditionalProperties(value);
}
function _parseNeverPrimitivesItemsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePrimitivesItemsX(value: unknown): unknown {
return _parseReferencePrimitivesItemsX(value);
}
function _parseReferencePrimitivesItemsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseSecurityItems(value: unknown): unknown {
return _parseReferenceSecurityItems(value);
}
function _parseReferenceSecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parseSecurityRequirementAdditionalProperties(value: unknown): unknown {
return _parseArraySecurityRequirementAdditionalProperties(value);
}
function _parseArraySecurityRequirementAdditionalProperties(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSecurityRequirementItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseXmlName(value: unknown): unknown {
return _parseStringXmlName(value);
}
function _parseStringXmlName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseNamespace(value: unknown): unknown {
return _parseStringNamespace(value);
}
function _parseStringNamespace(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrefix(value: unknown): unknown {
return _parseStringPrefix(value);
}
function _parseStringPrefix(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAttribute(value: unknown): unknown {
return _parseBooleanAttribute(value);
}
function _parseBooleanAttribute(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWrapped(value: unknown): unknown {
return _parseBooleanWrapped(value);
}
function _parseBooleanWrapped(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseXmlAdditionalProperties(value: unknown): unknown {
return _parseNeverXmlAdditionalProperties(value);
}
function _parseNeverXmlAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseXmlX(value: unknown): unknown {
return _parseReferenceXmlX(value);
}
function _parseReferenceXmlX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseTagName(value: unknown): unknown {
return _parseStringTagName(value);
}
function _parseStringTagName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagDescription(value: unknown): unknown {
return _parseStringTagDescription(value);
}
function _parseStringTagDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagExternalDocs(value: unknown): unknown {
return _parseReferenceTagExternalDocs(value);
}
function _parseReferenceTagExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseTagAdditionalProperties(value: unknown): unknown {
return _parseNeverTagAdditionalProperties(value);
}
function _parseNeverTagAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseTagX(value: unknown): unknown {
return _parseReferenceTagX(value);
}
function _parseReferenceTagX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseSecurityDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseOneOfSecurityDefinitionsAdditionalProperties(value);
}
function _parseOneOfSecurityDefinitionsAdditionalProperties(value: unknown): unknown {
return parseSecurityDefinitions0(value) ?? parseSecurityDefinitions1(value) ?? parseSecurityDefinitions2(value) ?? parseSecurityDefinitions3(value) ?? parseSecurityDefinitions4(value) ?? parseSecurityDefinitions5(value);
}
export function parseBasicAuthenticationSecurityType(value: unknown): unknown {
return _parseStringBasicAuthenticationSecurityType(value);
}
function _parseStringBasicAuthenticationSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasicAuthenticationSecurityDescription(value: unknown): unknown {
return _parseStringBasicAuthenticationSecurityDescription(value);
}
function _parseStringBasicAuthenticationSecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasicAuthenticationSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverBasicAuthenticationSecurityAdditionalProperties(value);
}
function _parseNeverBasicAuthenticationSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseBasicAuthenticationSecurityX(value: unknown): unknown {
return _parseReferenceBasicAuthenticationSecurityX(value);
}
function _parseReferenceBasicAuthenticationSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseApiKeySecurityType(value: unknown): unknown {
return _parseStringApiKeySecurityType(value);
}
function _parseStringApiKeySecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityName(value: unknown): unknown {
return _parseStringApiKeySecurityName(value);
}
function _parseStringApiKeySecurityName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityIn(value: unknown): unknown {
return _parseStringApiKeySecurityIn(value);
}
function _parseStringApiKeySecurityIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityDescription(value: unknown): unknown {
return _parseStringApiKeySecurityDescription(value);
}
function _parseStringApiKeySecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverApiKeySecurityAdditionalProperties(value);
}
function _parseNeverApiKeySecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseApiKeySecurityX(value: unknown): unknown {
return _parseReferenceApiKeySecurityX(value);
}
function _parseReferenceApiKeySecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ImplicitSecurityType(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityType(value);
}
function _parseStringOauth2ImplicitSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityFlow(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityFlow(value);
}
function _parseStringOauth2ImplicitSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2ImplicitSecurityScopes(value);
}
function _parseReferenceOauth2ImplicitSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2ImplicitSecurityAuthorizationUrl(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityAuthorizationUrl(value);
}
function _parseStringOauth2ImplicitSecurityAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityDescription(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityDescription(value);
}
function _parseStringOauth2ImplicitSecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2ImplicitSecurityAdditionalProperties(value);
}
function _parseNeverOauth2ImplicitSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2ImplicitSecurityX(value: unknown): unknown {
return _parseReferenceOauth2ImplicitSecurityX(value);
}
function _parseReferenceOauth2ImplicitSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2PasswordSecurityType(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityType(value);
}
function _parseStringOauth2PasswordSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityFlow(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityFlow(value);
}
function _parseStringOauth2PasswordSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2PasswordSecurityScopes(value);
}
function _parseReferenceOauth2PasswordSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2PasswordSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityTokenUrl(value);
}
function _parseStringOauth2PasswordSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityDescription(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityDescription(value);
}
function _parseStringOauth2PasswordSecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2PasswordSecurityAdditionalProperties(value);
}
function _parseNeverOauth2PasswordSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2PasswordSecurityX(value: unknown): unknown {
return _parseReferenceOauth2PasswordSecurityX(value);
}
function _parseReferenceOauth2PasswordSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ApplicationSecurityType(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityType(value);
}
function _parseStringOauth2ApplicationSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityFlow(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityFlow(value);
}
function _parseStringOauth2ApplicationSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2ApplicationSecurityScopes(value);
}
function _parseReferenceOauth2ApplicationSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2ApplicationSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityTokenUrl(value);
}
function _parseStringOauth2ApplicationSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityDescription(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityDescription(value);
}
function _parseStringOauth2ApplicationSecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2ApplicationSecurityAdditionalProperties(value);
}
function _parseNeverOauth2ApplicationSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2ApplicationSecurityX(value: unknown): unknown {
return _parseReferenceOauth2ApplicationSecurityX(value);
}
function _parseReferenceOauth2ApplicationSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2AccessCodeSecurityType(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityType(value);
}
function _parseStringOauth2AccessCodeSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityFlow(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityFlow(value);
}
function _parseStringOauth2AccessCodeSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2AccessCodeSecurityScopes(value);
}
function _parseReferenceOauth2AccessCodeSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityAuthorizationUrl(value);
}
function _parseStringOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityTokenUrl(value);
}
function _parseStringOauth2AccessCodeSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityDescription(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityDescription(value);
}
function _parseStringOauth2AccessCodeSecurityDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2AccessCodeSecurityAdditionalProperties(value);
}
function _parseNeverOauth2AccessCodeSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2AccessCodeSecurityX(value: unknown): unknown {
return _parseReferenceOauth2AccessCodeSecurityX(value);
}
function _parseReferenceOauth2AccessCodeSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ScopesAdditionalProperties(value: unknown): unknown {
return _parseStringOauth2ScopesAdditionalProperties(value);
}
function _parseStringOauth2ScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMediaTypeListItems(value: unknown): unknown {
return _parseReferenceMediaTypeListItems(value);
}
function _parseReferenceMediaTypeListItems(value: unknown): unknown {
return parseMimeType(value);
}
export function parseParametersListItems(value: unknown): unknown {
return _parseOneOfParametersListItems(value);
}
function _parseOneOfParametersListItems(value: unknown): unknown {
return parseParametersList0(value) ?? parseParametersList1(value);
}
export function parseParametersListAdditionalItems(value: unknown): unknown {
return _parseNeverParametersListAdditionalItems(value);
}
function _parseNeverParametersListAdditionalItems(value: unknown): unknown {
return undefined;
}
export function parseSchemesListItems(value: unknown): unknown {
return _parseStringSchemesListItems(value);
}
function _parseStringSchemesListItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseJsonReferenceRef(value: unknown): unknown {
return _parseStringJsonReferenceRef(value);
}
function _parseStringJsonReferenceRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseJsonReferenceAdditionalProperties(value: unknown): unknown {
return _parseNeverJsonReferenceAdditionalProperties(value);
}
function _parseNeverJsonReferenceAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePropertiesAllOfConsumes0(value: unknown): unknown {
return _parseReferencePropertiesAllOfConsumes0(value);
}
function _parseReferencePropertiesAllOfConsumes0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parsePropertiesAllOfProduces0(value: unknown): unknown {
return _parseReferencePropertiesAllOfProduces0(value);
}
function _parseReferencePropertiesAllOfProduces0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parsePropertiesTagsItems(value: unknown): unknown {
return _parseReferencePropertiesTagsItems(value);
}
function _parseReferencePropertiesTagsItems(value: unknown): unknown {
return parseTag(value);
}
export function parseOperationTagsItems(value: unknown): unknown {
return _parseStringOperationTagsItems(value);
}
function _parseStringOperationTagsItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationAllOfProduces0(value: unknown): unknown {
return _parseReferenceOperationAllOfProduces0(value);
}
function _parseReferenceOperationAllOfProduces0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseOperationAllOfConsumes0(value: unknown): unknown {
return _parseReferenceOperationAllOfConsumes0(value);
}
function _parseReferenceOperationAllOfConsumes0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseNotAdditionalProperties(value: unknown): unknown {
return _parseNeverNotAdditionalProperties(value);
}
function _parseNeverNotAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseNotX(value: unknown): unknown {
return _parseReferenceNotX(value);
}
function _parseReferenceNotX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseResponse0(value: unknown): unknown {
return _parseReferenceResponse0(value);
}
function _parseReferenceResponse0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseResponse1(value: unknown): unknown {
return _parseReferenceResponse1(value);
}
function _parseReferenceResponse1(value: unknown): unknown {
return parseFileSchema(value);
}
export function parseAdditionalPropertiesAnyOf0(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesAnyOf0(value);
}
function _parseReferenceAdditionalPropertiesAnyOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAdditionalPropertiesAnyOf1(value: unknown): unknown {
return _parseBooleanAdditionalPropertiesAnyOf1(value);
}
function _parseBooleanAdditionalPropertiesAnyOf1(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseItemsAnyOf0(value: unknown): unknown {
return _parseReferenceItemsAnyOf0(value);
}
function _parseReferenceItemsAnyOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseItemsAnyOf1(value: unknown): unknown {
return _parseArrayItemsAnyOf1(value);
}
function _parseArrayItemsAnyOf1(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseItems1AnyOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAllOfItems(value: unknown): unknown {
return _parseReferenceAllOfItems(value);
}
function _parseReferenceAllOfItems(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parsePropertiesAdditionalProperties(value: unknown): unknown {
return _parseReferencePropertiesAdditionalProperties(value);
}
function _parseReferencePropertiesAdditionalProperties(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSecurityRequirementItems(value: unknown): unknown {
return _parseStringSecurityRequirementItems(value);
}
function _parseStringSecurityRequirementItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSecurityDefinitions0(value: unknown): unknown {
return _parseReferenceSecurityDefinitions0(value);
}
function _parseReferenceSecurityDefinitions0(value: unknown): unknown {
return parseBasicAuthenticationSecurity(value);
}
export function parseSecurityDefinitions1(value: unknown): unknown {
return _parseReferenceSecurityDefinitions1(value);
}
function _parseReferenceSecurityDefinitions1(value: unknown): unknown {
return parseApiKeySecurity(value);
}
export function parseSecurityDefinitions2(value: unknown): unknown {
return _parseReferenceSecurityDefinitions2(value);
}
function _parseReferenceSecurityDefinitions2(value: unknown): unknown {
return parseOauth2ImplicitSecurity(value);
}
export function parseSecurityDefinitions3(value: unknown): unknown {
return _parseReferenceSecurityDefinitions3(value);
}
function _parseReferenceSecurityDefinitions3(value: unknown): unknown {
return parseOauth2PasswordSecurity(value);
}
export function parseSecurityDefinitions4(value: unknown): unknown {
return _parseReferenceSecurityDefinitions4(value);
}
function _parseReferenceSecurityDefinitions4(value: unknown): unknown {
return parseOauth2ApplicationSecurity(value);
}
export function parseSecurityDefinitions5(value: unknown): unknown {
return _parseReferenceSecurityDefinitions5(value);
}
function _parseReferenceSecurityDefinitions5(value: unknown): unknown {
return parseOauth2AccessCodeSecurity(value);
}
export function parseParametersList0(value: unknown): unknown {
return _parseReferenceParametersList0(value);
}
function _parseReferenceParametersList0(value: unknown): unknown {
return parseParameter(value);
}
export function parseParametersList1(value: unknown): unknown {
return _parseReferenceParametersList1(value);
}
function _parseReferenceParametersList1(value: unknown): unknown {
return parseJsonReference(value);
}
export function parseItems1AnyOfItems(value: unknown): unknown {
return _parseReferenceItems1AnyOfItems(value);
}
function _parseReferenceItems1AnyOfItems(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseDraft04Title(value: unknown): unknown {
return _parseStringDraft04Title(value);
}
function _parseStringDraft04Title(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04Description(value: unknown): unknown {
return _parseStringDraft04Description(value);
}
function _parseStringDraft04Description(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04Default(value: unknown): unknown {
return ;
}
export function parseDraft04MultipleOf(value: unknown): unknown {
return _parseNumberDraft04MultipleOf(value);
}
function _parseNumberDraft04MultipleOf(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04Maximum(value: unknown): unknown {
return _parseNumberDraft04Maximum(value);
}
function _parseNumberDraft04Maximum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04ExclusiveMaximum(value: unknown): unknown {
return _parseBooleanDraft04ExclusiveMaximum(value);
}
function _parseBooleanDraft04ExclusiveMaximum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDraft04Minimum(value: unknown): unknown {
return _parseNumberDraft04Minimum(value);
}
function _parseNumberDraft04Minimum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04ExclusiveMinimum(value: unknown): unknown {
return _parseBooleanDraft04ExclusiveMinimum(value);
}
function _parseBooleanDraft04ExclusiveMinimum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePositiveInteger(value: unknown): unknown {
return _parseIntegerPositiveInteger(value);
}
function _parseIntegerPositiveInteger(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parsePositiveIntegerDefault0(value: unknown): unknown {
return _parseAllOfPositiveIntegerDefault0(value);
}
function _parseAllOfPositiveIntegerDefault0(value: unknown): unknown {
return parsePositiveIntegerDefault00(value) ?? parsePositiveIntegerDefault01(value);
}
export function parsePositiveIntegerDefault00(value: unknown): unknown {
return _parseReferencePositiveIntegerDefault00(value);
}
function _parseReferencePositiveIntegerDefault00(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parsePositiveIntegerDefault01(value: unknown): unknown {
return ;
}
export function parseDraft04Pattern(value: unknown): unknown {
return _parseStringDraft04Pattern(value);
}
function _parseStringDraft04Pattern(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04UniqueItems(value: unknown): unknown {
return _parseBooleanDraft04UniqueItems(value);
}
function _parseBooleanDraft04UniqueItems(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDraft04Enum(value: unknown): unknown {
return _parseArrayDraft04Enum(value);
}
function _parseArrayDraft04Enum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = value[elementIndex];
}
return result;
}
return undefined;
}
export function parseStringArray(value: unknown): unknown {
return _parseArrayStringArray(value);
}
function _parseArrayStringArray(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseStringArrayItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseStringArrayItems(value: unknown): unknown {
return _parseStringStringArrayItems(value);
}
function _parseStringStringArrayItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04Type(value: unknown): unknown {
return _parseAnyOfDraft04Type(value);
}
function _parseAnyOfDraft04Type(value: unknown): unknown {
return parseTypeAnyOf0(value) ?? parseTypeAnyOf1(value);
}
export function parseTypeAnyOf0(value: unknown): unknown {
return _parseReferenceTypeAnyOf0(value);
}
function _parseReferenceTypeAnyOf0(value: unknown): unknown {
return parseSimpleTypes(value);
}
export function parseTypeAnyOf1(value: unknown): unknown {
return _parseArrayTypeAnyOf1(value);
}
function _parseArrayTypeAnyOf1(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseType1AnyOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseType1AnyOfItems(value: unknown): unknown {
return _parseReferenceType1AnyOfItems(value);
}
function _parseReferenceType1AnyOfItems(value: unknown): unknown {
return parseSimpleTypes(value);
}
export function parseSimpleTypes(value: unknown): unknown {
return _parseStringSimpleTypes(value);
}
function _parseStringSimpleTypes(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
