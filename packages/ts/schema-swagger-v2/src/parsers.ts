// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.9                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
export interface ParserGeneratorOptions {
trueStringValues?: string[];
falseStringValues?: string[];
}
const defaultParserGeneratorOptions = {
trueStringValues: ["", "true", "yes", "on", "1"],
falseStringValues: ["false", "no", "off", "0"],
}
/**
* @summary A JSON Schema for Swagger 2.0 API.
* @see {@link http://swagger.io/v2/schema.json#}
*/
export function parseSchemaJson(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "swagger":
return [
name,
parseSwagger(value, configuration),
]
case "info":
return [
name,
parsePropertiesInfo(value, configuration),
]
case "host":
return [
name,
parseHost(value, configuration),
]
case "basePath":
return [
name,
parseBasePath(value, configuration),
]
case "schemes":
return [
name,
parsePropertiesSchemes(value, configuration),
]
case "consumes":
return [
name,
parsePropertiesConsumes(value, configuration),
]
case "produces":
return [
name,
parsePropertiesProduces(value, configuration),
]
case "paths":
return [
name,
parsePropertiesPaths(value, configuration),
]
case "definitions":
return [
name,
parsePropertiesDefinitions(value, configuration),
]
case "parameters":
return [
name,
parsePropertiesParameters(value, configuration),
]
case "responses":
return [
name,
parsePropertiesResponses(value, configuration),
]
case "security":
return [
name,
parsePropertiesSecurity(value, configuration),
]
case "securityDefinitions":
return [
name,
parsePropertiesSecurityDefinitions(value, configuration),
]
case "tags":
return [
name,
parsePropertiesTags(value, configuration),
]
case "externalDocs":
return [
name,
parsePropertiesExternalDocs(value, configuration),
]
default:
return [
name,
(parseV2AdditionalProperties(value, configuration) ??
parseV2PatternPropertiesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description General information about the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info}
*/
export function parseDefinitionsInfo(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "title":
return [
name,
parseInfoTitle(value, configuration),
]
case "version":
return [
name,
parseVersion(value, configuration),
]
case "description":
return [
name,
parseInfoDescription(value, configuration),
]
case "termsOfService":
return [
name,
parseTermsOfService(value, configuration),
]
case "contact":
return [
name,
parseInfoContact(value, configuration),
]
case "license":
return [
name,
parseInfoLicense(value, configuration),
]
default:
return [
name,
(parseInfoAdditionalProperties(value, configuration) ??
parseInfoX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description Contact information for the owners of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact}
*/
export function parseDefinitionsContact(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseContactName(value, configuration),
]
case "url":
return [
name,
parseContactUrl(value, configuration),
]
case "email":
return [
name,
parseEmail(value, configuration),
]
default:
return [
name,
(parseContactAdditionalProperties(value, configuration) ??
parseContactX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license}
*/
export function parseDefinitionsLicense(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseLicenseName(value, configuration),
]
case "url":
return [
name,
parseLicenseUrl(value, configuration),
]
default:
return [
name,
(parseLicenseAdditionalProperties(value, configuration) ??
parseLicenseX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description Relative paths to the individual endpoints. They must be relative to the &apos;basePath&apos;.
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths}
*/
export function parseDefinitionsPaths(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parsePathsAdditionalProperties(value, configuration) ??
parsePathsX(value, configuration) ??
parsePatternProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description One or more JSON objects describing the schemas being consumed and produced by the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/definitions}
*/
export function parseDefinitionsDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseDefinitionsAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description One or more JSON representations for parameters
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameterDefinitions}
*/
export function parseParameterDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseParameterDefinitionsAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description One or more JSON representations for parameters
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseDefinitions}
*/
export function parseResponseDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseResponseDefinitionsAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description information about external documentation
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs}
*/
export function parseDefinitionsExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseExternalDocsDescription(value, configuration),
]
case "url":
return [
name,
parseExternalDocsUrl(value, configuration),
]
default:
return [
name,
(parseExternalDocsAdditionalProperties(value, configuration) ??
parseExternalDocsX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/examples}
*/
export function parseDefinitionsExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseExamplesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description The MIME type of the HTTP message.
* @see {@link http://swagger.io/v2/schema.json#/definitions/mimeType}
*/
export function parseMimeType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation}
*/
export function parseOperation(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "tags":
return [
name,
parseOperationTags(value, configuration),
]
case "summary":
return [
name,
parseSummary(value, configuration),
]
case "description":
return [
name,
parseOperationDescription(value, configuration),
]
case "externalDocs":
return [
name,
parseOperationExternalDocs(value, configuration),
]
case "operationId":
return [
name,
parseOperationId(value, configuration),
]
case "produces":
return [
name,
parseOperationProduces(value, configuration),
]
case "consumes":
return [
name,
parseOperationConsumes(value, configuration),
]
case "parameters":
return [
name,
parseOperationParameters(value, configuration),
]
case "responses":
return [
name,
parseOperationResponses(value, configuration),
]
case "schemes":
return [
name,
parseOperationSchemes(value, configuration),
]
case "deprecated":
return [
name,
parseDeprecated(value, configuration),
]
case "security":
return [
name,
parseOperationSecurity(value, configuration),
]
default:
return [
name,
(parseOperationAdditionalProperties(value, configuration) ??
parseOperationX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem}
*/
export function parsePathItem(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "$ref":
return [
name,
parsePathItemRef(value, configuration),
]
case "get":
return [
name,
parseGet(value, configuration),
]
case "put":
return [
name,
parsePut(value, configuration),
]
case "post":
return [
name,
parsePost(value, configuration),
]
case "delete":
return [
name,
parseDelete(value, configuration),
]
case "options":
return [
name,
parseOptions(value, configuration),
]
case "head":
return [
name,
parseHead(value, configuration),
]
case "patch":
return [
name,
parsePatch(value, configuration),
]
case "parameters":
return [
name,
parsePathItemParameters(value, configuration),
]
default:
return [
name,
(parsePathItemAdditionalProperties(value, configuration) ??
parsePathItemX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description Response objects names can either be any valid HTTP status code or &apos;default&apos;.
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses}
*/
export function parseDefinitionsResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseResponsesAdditionalProperties(value, configuration) ??
parseResponses093Default(value, configuration) ??
parseResponsesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue}
*/
export function parseResponseValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseResponseValue0(value, configuration)
??
parseResponseValue1(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response}
*/
export function parseResponse(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseResponseDescription(value, configuration),
]
case "schema":
return [
name,
parseResponseSchema(value, configuration),
]
case "headers":
return [
name,
parseResponseHeaders(value, configuration),
]
case "examples":
return [
name,
parseResponseExamples(value, configuration),
]
default:
return [
name,
(parseResponseAdditionalProperties(value, configuration) ??
parseResponseX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headers}
*/
export function parseDefinitionsHeaders(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseHeadersAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header}
*/
export function parseHeader(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseHeaderType(value, configuration),
]
case "format":
return [
name,
parseHeaderFormat(value, configuration),
]
case "items":
return [
name,
parseHeaderItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseHeaderCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseHeaderDefault(value, configuration),
]
case "maximum":
return [
name,
parseHeaderMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseHeaderExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseHeaderMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseHeaderExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseHeaderMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseHeaderMinLength(value, configuration),
]
case "pattern":
return [
name,
parseHeaderPattern(value, configuration),
]
case "maxItems":
return [
name,
parseHeaderMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseHeaderMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseHeaderUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseHeaderEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseHeaderMultipleOf(value, configuration),
]
case "description":
return [
name,
parseHeaderDescription(value, configuration),
]
default:
return [
name,
(parseHeaderAdditionalProperties(value, configuration) ??
parseHeaderX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description Any property starting with x- is valid.
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension}
*/
export function parseVendorExtension(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter}
*/
export function parseBodyParameter(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "description":
return [
name,
parseBodyParameterDescription(value, configuration),
]
case "name":
return [
name,
parseBodyParameterName(value, configuration),
]
case "in":
return [
name,
parseBodyParameterIn(value, configuration),
]
case "required":
return [
name,
parseBodyParameterRequired(value, configuration),
]
case "schema":
return [
name,
parseBodyParameterSchema(value, configuration),
]
default:
return [
name,
(parseBodyParameterAdditionalProperties(value, configuration) ??
parseBodyParameterX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema}
*/
export function parseHeaderParameterSubSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema}
*/
export function parseQueryParameterSubSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema}
*/
export function parseFormDataParameterSubSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema}
*/
export function parsePathParameterSubSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter}
*/
export function parseNonBodyParameter(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseHeaderParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseHeaderParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseHeaderParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseHeaderParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parseHeaderParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseHeaderParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseHeaderParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseHeaderParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseHeaderParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseHeaderParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseHeaderParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseHeaderParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseHeaderParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseHeaderParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseHeaderParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseHeaderParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseHeaderParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseHeaderParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseHeaderParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseHeaderParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseFormDataParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseFormDataParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseFormDataParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseFormDataParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseFormDataParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseFormDataParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseFormDataParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseFormDataParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseFormDataParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseFormDataParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseFormDataParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseFormDataParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseFormDataParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseFormDataParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseFormDataParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseFormDataParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseFormDataParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseFormDataParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseFormDataParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseFormDataParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseFormDataParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseQueryParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseQueryParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseQueryParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseQueryParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseQueryParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseQueryParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseQueryParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseQueryParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseQueryParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseQueryParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseQueryParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseQueryParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseQueryParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseQueryParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseQueryParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseQueryParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseQueryParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseQueryParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseQueryParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseQueryParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseQueryParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseQueryParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseQueryParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parsePathParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parsePathParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parsePathParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parsePathParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parsePathParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parsePathParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parsePathParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parsePathParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parsePathParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parsePathParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parsePathParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parsePathParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parsePathParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parsePathParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parsePathParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parsePathParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parsePathParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parsePathParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parsePathParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parsePathParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parsePathParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parsePathParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter}
*/
export function parseParameter(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseParameter0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseHeaderParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseHeaderParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseHeaderParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseHeaderParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parseHeaderParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseHeaderParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseHeaderParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseHeaderParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseHeaderParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseHeaderParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseHeaderParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseHeaderParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseHeaderParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseHeaderParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseHeaderParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseHeaderParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseHeaderParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseHeaderParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseHeaderParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseHeaderParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseFormDataParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseFormDataParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseFormDataParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseFormDataParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseFormDataParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseFormDataParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseFormDataParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseFormDataParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseFormDataParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseFormDataParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseFormDataParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseFormDataParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseFormDataParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseFormDataParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseFormDataParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseFormDataParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseFormDataParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseFormDataParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseFormDataParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseFormDataParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseFormDataParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseQueryParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseQueryParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseQueryParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseQueryParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseQueryParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseQueryParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseQueryParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseQueryParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseQueryParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseQueryParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseQueryParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseQueryParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseQueryParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseQueryParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseQueryParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseQueryParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseQueryParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseQueryParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseQueryParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseQueryParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseQueryParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseQueryParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseQueryParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parsePathParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parsePathParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parsePathParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parsePathParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parsePathParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parsePathParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parsePathParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parsePathParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parsePathParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parsePathParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parsePathParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parsePathParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parsePathParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parsePathParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parsePathParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parsePathParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parsePathParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parsePathParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parsePathParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parsePathParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parsePathParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parsePathParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
);
}
/**
* @description A deterministic version of a JSON Schema object.
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema}
*/
export function parseDefinitionsSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "$ref":
return [
name,
parseSchemaRef(value, configuration),
]
case "format":
return [
name,
parseSchemaFormat(value, configuration),
]
case "title":
return [
name,
parseSchemaTitle(value, configuration),
]
case "description":
return [
name,
parseSchemaDescription(value, configuration),
]
case "default":
return [
name,
parseSchemaDefault(value, configuration),
]
case "multipleOf":
return [
name,
parseSchemaMultipleOf(value, configuration),
]
case "maximum":
return [
name,
parseSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseSchemaUniqueItems(value, configuration),
]
case "maxProperties":
return [
name,
parseMaxProperties(value, configuration),
]
case "minProperties":
return [
name,
parseMinProperties(value, configuration),
]
case "required":
return [
name,
parseSchemaRequired(value, configuration),
]
case "enum":
return [
name,
parseSchemaEnum(value, configuration),
]
case "additionalProperties":
return [
name,
parsePropertiesSchemaAdditionalProperties(value, configuration),
]
case "type":
return [
name,
parseSchemaType(value, configuration),
]
case "items":
return [
name,
parseSchemaItems(value, configuration),
]
case "allOf":
return [
name,
parseAllOf(value, configuration),
]
case "properties":
return [
name,
parseProperties(value, configuration),
]
case "discriminator":
return [
name,
parseDiscriminator(value, configuration),
]
case "readOnly":
return [
name,
parseSchemaReadOnly(value, configuration),
]
case "xml":
return [
name,
parseSchemaXml(value, configuration),
]
case "externalDocs":
return [
name,
parseSchemaExternalDocs(value, configuration),
]
case "example":
return [
name,
parseSchemaExample(value, configuration),
]
default:
return [
name,
(parseDefinitionsSchemaAdditionalProperties(value, configuration) ??
parseSchemaPatternPropertiesX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description A deterministic version of a JSON Schema object.
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema}
*/
export function parseFileSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "format":
return [
name,
parseFileSchemaFormat(value, configuration),
]
case "title":
return [
name,
parseFileSchemaTitle(value, configuration),
]
case "description":
return [
name,
parseFileSchemaDescription(value, configuration),
]
case "default":
return [
name,
parseFileSchemaDefault(value, configuration),
]
case "required":
return [
name,
parseFileSchemaRequired(value, configuration),
]
case "type":
return [
name,
parseFileSchemaType(value, configuration),
]
case "readOnly":
return [
name,
parseFileSchemaReadOnly(value, configuration),
]
case "externalDocs":
return [
name,
parseFileSchemaExternalDocs(value, configuration),
]
case "example":
return [
name,
parseFileSchemaExample(value, configuration),
]
default:
return [
name,
(parseFileSchemaAdditionalProperties(value, configuration) ??
parseFileSchemaX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems}
*/
export function parsePrimitivesItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parsePrimitivesItemsType(value, configuration),
]
case "format":
return [
name,
parsePrimitivesItemsFormat(value, configuration),
]
case "items":
return [
name,
parsePrimitivesItemsItems(value, configuration),
]
case "collectionFormat":
return [
name,
parsePrimitivesItemsCollectionFormat(value, configuration),
]
case "default":
return [
name,
parsePrimitivesItemsDefault(value, configuration),
]
case "maximum":
return [
name,
parsePrimitivesItemsMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parsePrimitivesItemsExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parsePrimitivesItemsMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parsePrimitivesItemsExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parsePrimitivesItemsMaxLength(value, configuration),
]
case "minLength":
return [
name,
parsePrimitivesItemsMinLength(value, configuration),
]
case "pattern":
return [
name,
parsePrimitivesItemsPattern(value, configuration),
]
case "maxItems":
return [
name,
parsePrimitivesItemsMaxItems(value, configuration),
]
case "minItems":
return [
name,
parsePrimitivesItemsMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parsePrimitivesItemsUniqueItems(value, configuration),
]
case "enum":
return [
name,
parsePrimitivesItemsEnum(value, configuration),
]
case "multipleOf":
return [
name,
parsePrimitivesItemsMultipleOf(value, configuration),
]
default:
return [
name,
(parsePrimitivesItemsAdditionalProperties(value, configuration) ??
parsePrimitivesItemsX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/security}
*/
export function parseDefinitionsSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseSecurityItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement}
*/
export function parseSecurityRequirement(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseSecurityRequirementAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml}
*/
export function parseDefinitionsXml(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseXmlName(value, configuration),
]
case "namespace":
return [
name,
parseNamespace(value, configuration),
]
case "prefix":
return [
name,
parsePrefix(value, configuration),
]
case "attribute":
return [
name,
parseAttribute(value, configuration),
]
case "wrapped":
return [
name,
parseWrapped(value, configuration),
]
default:
return [
name,
(parseXmlAdditionalProperties(value, configuration) ??
parseXmlX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag}
*/
export function parseTag(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "name":
return [
name,
parseTagName(value, configuration),
]
case "description":
return [
name,
parseTagDescription(value, configuration),
]
case "externalDocs":
return [
name,
parseTagExternalDocs(value, configuration),
]
default:
return [
name,
(parseTagAdditionalProperties(value, configuration) ??
parseTagX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions}
*/
export function parseDefinitionsSecurityDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseSecurityDefinitionsAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity}
*/
export function parseBasicAuthenticationSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseBasicAuthenticationSecurityType(value, configuration),
]
case "description":
return [
name,
parseBasicAuthenticationSecurityDescription(value, configuration),
]
default:
return [
name,
(parseBasicAuthenticationSecurityAdditionalProperties(value, configuration) ??
parseBasicAuthenticationSecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity}
*/
export function parseApiKeySecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseApiKeySecurityType(value, configuration),
]
case "name":
return [
name,
parseApiKeySecurityName(value, configuration),
]
case "in":
return [
name,
parseApiKeySecurityIn(value, configuration),
]
case "description":
return [
name,
parseApiKeySecurityDescription(value, configuration),
]
default:
return [
name,
(parseApiKeySecurityAdditionalProperties(value, configuration) ??
parseApiKeySecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity}
*/
export function parseOauth2ImplicitSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOauth2ImplicitSecurityType(value, configuration),
]
case "flow":
return [
name,
parseOauth2ImplicitSecurityFlow(value, configuration),
]
case "scopes":
return [
name,
parseOauth2ImplicitSecurityScopes(value, configuration),
]
case "authorizationUrl":
return [
name,
parseOauth2ImplicitSecurityAuthorizationUrl(value, configuration),
]
case "description":
return [
name,
parseOauth2ImplicitSecurityDescription(value, configuration),
]
default:
return [
name,
(parseOauth2ImplicitSecurityAdditionalProperties(value, configuration) ??
parseOauth2ImplicitSecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity}
*/
export function parseOauth2PasswordSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOauth2PasswordSecurityType(value, configuration),
]
case "flow":
return [
name,
parseOauth2PasswordSecurityFlow(value, configuration),
]
case "scopes":
return [
name,
parseOauth2PasswordSecurityScopes(value, configuration),
]
case "tokenUrl":
return [
name,
parseOauth2PasswordSecurityTokenUrl(value, configuration),
]
case "description":
return [
name,
parseOauth2PasswordSecurityDescription(value, configuration),
]
default:
return [
name,
(parseOauth2PasswordSecurityAdditionalProperties(value, configuration) ??
parseOauth2PasswordSecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity}
*/
export function parseOauth2ApplicationSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOauth2ApplicationSecurityType(value, configuration),
]
case "flow":
return [
name,
parseOauth2ApplicationSecurityFlow(value, configuration),
]
case "scopes":
return [
name,
parseOauth2ApplicationSecurityScopes(value, configuration),
]
case "tokenUrl":
return [
name,
parseOauth2ApplicationSecurityTokenUrl(value, configuration),
]
case "description":
return [
name,
parseOauth2ApplicationSecurityDescription(value, configuration),
]
default:
return [
name,
(parseOauth2ApplicationSecurityAdditionalProperties(value, configuration) ??
parseOauth2ApplicationSecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity}
*/
export function parseOauth2AccessCodeSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "type":
return [
name,
parseOauth2AccessCodeSecurityType(value, configuration),
]
case "flow":
return [
name,
parseOauth2AccessCodeSecurityFlow(value, configuration),
]
case "scopes":
return [
name,
parseOauth2AccessCodeSecurityScopes(value, configuration),
]
case "authorizationUrl":
return [
name,
parseOauth2AccessCodeSecurityAuthorizationUrl(value, configuration),
]
case "tokenUrl":
return [
name,
parseOauth2AccessCodeSecurityTokenUrl(value, configuration),
]
case "description":
return [
name,
parseOauth2AccessCodeSecurityDescription(value, configuration),
]
default:
return [
name,
(parseOauth2AccessCodeSecurityAdditionalProperties(value, configuration) ??
parseOauth2AccessCodeSecurityX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes}
*/
export function parseOauth2Scopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parseOauth2ScopesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/mediaTypeList}
*/
export function parseMediaTypeList(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseMediaTypeListItems(value, configuration)
}
}) :
undefined
);
}
/**
* @description The parameters needed to send a valid API call.
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList}
*/
export function parseParametersList(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseParametersListItems(value, configuration)
}
}) :
undefined
);
}
/**
* @description The transfer protocol of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/schemesList}
*/
export function parseSchemesList(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseSchemesListItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormat}
*/
export function parseDefinitionsCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormatWithMulti}
*/
export function parseCollectionFormatWithMulti(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/title}
*/
export function parseDefinitionsTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Title(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/description}
*/
export function parseDefinitionsDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Description(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/default}
*/
export function parseDefinitionsDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Default(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/multipleOf}
*/
export function parseDefinitionsMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04MultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maximum}
*/
export function parseDefinitionsMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Maximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMaximum}
*/
export function parseDefinitionsExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04ExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minimum}
*/
export function parseDefinitionsMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Minimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMinimum}
*/
export function parseDefinitionsExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04ExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxLength}
*/
export function parseDefinitionsMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minLength}
*/
export function parseDefinitionsMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveIntegerDefault0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pattern}
*/
export function parseDefinitionsPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Pattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxItems}
*/
export function parseDefinitionsMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minItems}
*/
export function parseDefinitionsMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveIntegerDefault0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/uniqueItems}
*/
export function parseDefinitionsUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04UniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/enum}
*/
export function parseDefinitionsEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Enum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference}
*/
export function parseJsonReference(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "$ref":
return [
name,
parseJsonReferenceRef(value, configuration),
]
default:
return [
name,
(parseJsonReferenceAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @description The Swagger version of this document.
* @see {@link http://swagger.io/v2/schema.json#/properties/swagger}
*/
export function parseSwagger(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/info}
*/
export function parsePropertiesInfo(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsInfo(value, configuration));
}
/**
* @description The host (name or ip) of the API. Example: &apos;swagger.io&apos;
* @see {@link http://swagger.io/v2/schema.json#/properties/host}
*/
export function parseHost(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The base path to the API. Example: &apos;/api&apos;.
* @see {@link http://swagger.io/v2/schema.json#/properties/basePath}
*/
export function parseBasePath(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/schemes}
*/
export function parsePropertiesSchemes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSchemesList(value, configuration));
}
/**
* @description A list of MIME types accepted by the API.
* @see {@link http://swagger.io/v2/schema.json#/properties/consumes}
*/
export function parsePropertiesConsumes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePropertiesAllOfConsumes0(value, configuration));
}
/**
* @description A list of MIME types the API can produce.
* @see {@link http://swagger.io/v2/schema.json#/properties/produces}
*/
export function parsePropertiesProduces(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePropertiesAllOfProduces0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/paths}
*/
export function parsePropertiesPaths(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPaths(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/definitions}
*/
export function parsePropertiesDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefinitions(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/parameters}
*/
export function parsePropertiesParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameterDefinitions(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/responses}
*/
export function parsePropertiesResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponseDefinitions(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/security}
*/
export function parsePropertiesSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/securityDefinitions}
*/
export function parsePropertiesSecurityDefinitions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSecurityDefinitions(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/tags}
*/
export function parsePropertiesTags(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parsePropertiesTagsItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/externalDocs}
*/
export function parsePropertiesExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExternalDocs(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/additionalProperties}
*/
export function parseV2AdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/patternProperties/^x-}
*/
export function parseV2PatternPropertiesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description A unique and precise title of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/title}
*/
export function parseInfoTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A semantic version number of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/version}
*/
export function parseVersion(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/description}
*/
export function parseInfoDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The terms of service for the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/termsOfService}
*/
export function parseTermsOfService(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/contact}
*/
export function parseInfoContact(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsContact(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/license}
*/
export function parseInfoLicense(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsLicense(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/additionalProperties}
*/
export function parseInfoAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/patternProperties/^x-}
*/
export function parseInfoX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description The identifying name of the contact person/organization.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/name}
*/
export function parseContactName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The URL pointing to the contact information.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/url}
*/
export function parseContactUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The email address of the contact person/organization.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/email}
*/
export function parseEmail(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/additionalProperties}
*/
export function parseContactAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/patternProperties/^x-}
*/
export function parseContactX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description The name of the license type. It&apos;s encouraged to use an OSI compatible license.
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/properties/name}
*/
export function parseLicenseName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The URL pointing to the license.
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/properties/url}
*/
export function parseLicenseUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/additionalProperties}
*/
export function parseLicenseAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/patternProperties/^x-}
*/
export function parseLicenseX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/additionalProperties}
*/
export function parsePathsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^x-}
*/
export function parsePathsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^/}
*/
export function parsePatternProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePathItem(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/definitions/additionalProperties}
*/
export function parseDefinitionsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameterDefinitions/additionalProperties}
*/
export function parseParameterDefinitionsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameter(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseDefinitions/additionalProperties}
*/
export function parseResponseDefinitionsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponse(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/description}
*/
export function parseExternalDocsDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/url}
*/
export function parseExternalDocsUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/additionalProperties}
*/
export function parseExternalDocsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/patternProperties/^x-}
*/
export function parseExternalDocsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/examples/additionalProperties}
*/
export function parseExamplesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/tags}
*/
export function parseOperationTags(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseOperationTagsItems(value, configuration)
}
}) :
undefined
);
}
/**
* @description A brief summary of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/summary}
*/
export function parseSummary(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A longer description of the operation, GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/description}
*/
export function parseOperationDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/externalDocs}
*/
export function parseOperationExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExternalDocs(value, configuration));
}
/**
* @description A unique identifier of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/operationId}
*/
export function parseOperationId(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A list of MIME types the API can produce.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/produces}
*/
export function parseOperationProduces(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperationAllOfProduces0(value, configuration));
}
/**
* @description A list of MIME types the API can consume.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes}
*/
export function parseOperationConsumes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperationAllOfConsumes0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/parameters}
*/
export function parseOperationParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParametersList(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/responses}
*/
export function parseOperationResponses(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsResponses(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/schemes}
*/
export function parseOperationSchemes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSchemesList(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/deprecated}
*/
export function parseDeprecated(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/security}
*/
export function parseOperationSecurity(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/additionalProperties}
*/
export function parseOperationAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/patternProperties/^x-}
*/
export function parseOperationX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/$ref}
*/
export function parsePathItemRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/get}
*/
export function parseGet(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/put}
*/
export function parsePut(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/post}
*/
export function parsePost(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/delete}
*/
export function parseDelete(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/options}
*/
export function parseOptions(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/head}
*/
export function parseHead(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/patch}
*/
export function parsePatch(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOperation(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/parameters}
*/
export function parsePathItemParameters(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParametersList(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/additionalProperties}
*/
export function parsePathItemAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/patternProperties/^x-}
*/
export function parsePathItemX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/additionalProperties}
*/
export function parseResponsesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^([0-9]{3})$|^(default)$}
*/
export function parseResponses093Default(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponseValue(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^x-}
*/
export function parseResponsesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not}
*/
export function parseNot(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
((value) ??
parseNotX(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/0}
*/
export function parseResponseValue0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseResponse(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/1}
*/
export function parseResponseValue1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseJsonReference(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/description}
*/
export function parseResponseDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema}
*/
export function parseResponseSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseResponse0(value, configuration)
??
parseResponse1(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/headers}
*/
export function parseResponseHeaders(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsHeaders(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/examples}
*/
export function parseResponseExamples(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExamples(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/additionalProperties}
*/
export function parseResponseAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/patternProperties/^x-}
*/
export function parseResponseX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headers/additionalProperties}
*/
export function parseHeadersAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHeader(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/type}
*/
export function parseHeaderType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/format}
*/
export function parseHeaderFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/items}
*/
export function parseHeaderItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/collectionFormat}
*/
export function parseHeaderCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsCollectionFormat(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/default}
*/
export function parseHeaderDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maximum}
*/
export function parseHeaderMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMaximum}
*/
export function parseHeaderExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minimum}
*/
export function parseHeaderMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMinimum}
*/
export function parseHeaderExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxLength}
*/
export function parseHeaderMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minLength}
*/
export function parseHeaderMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/pattern}
*/
export function parseHeaderPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxItems}
*/
export function parseHeaderMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minItems}
*/
export function parseHeaderMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/uniqueItems}
*/
export function parseHeaderUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/enum}
*/
export function parseHeaderEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/multipleOf}
*/
export function parseHeaderMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/description}
*/
export function parseHeaderDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/additionalProperties}
*/
export function parseHeaderAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/patternProperties/^x-}
*/
export function parseHeaderX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalProperties}
*/
export function parseVendorExtensionAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalItems}
*/
export function parseVendorExtensionAdditionalItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/description}
*/
export function parseBodyParameterDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/name}
*/
export function parseBodyParameterName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/in}
*/
export function parseBodyParameterIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/required}
*/
export function parseBodyParameterRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/schema}
*/
export function parseBodyParameterSchema(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/additionalProperties}
*/
export function parseBodyParameterAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/patternProperties/^x-}
*/
export function parseBodyParameterX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/required}
*/
export function parseHeaderParameterSubSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/in}
*/
export function parseHeaderParameterSubSchemaIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/description}
*/
export function parseHeaderParameterSubSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/name}
*/
export function parseHeaderParameterSubSchemaName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/type}
*/
export function parseHeaderParameterSubSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/format}
*/
export function parseHeaderParameterSubSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/items}
*/
export function parseHeaderParameterSubSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/collectionFormat}
*/
export function parseHeaderParameterSubSchemaCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsCollectionFormat(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/default}
*/
export function parseHeaderParameterSubSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maximum}
*/
export function parseHeaderParameterSubSchemaMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMaximum}
*/
export function parseHeaderParameterSubSchemaExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minimum}
*/
export function parseHeaderParameterSubSchemaMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMinimum}
*/
export function parseHeaderParameterSubSchemaExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxLength}
*/
export function parseHeaderParameterSubSchemaMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minLength}
*/
export function parseHeaderParameterSubSchemaMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/pattern}
*/
export function parseHeaderParameterSubSchemaPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxItems}
*/
export function parseHeaderParameterSubSchemaMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minItems}
*/
export function parseHeaderParameterSubSchemaMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/uniqueItems}
*/
export function parseHeaderParameterSubSchemaUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/enum}
*/
export function parseHeaderParameterSubSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/multipleOf}
*/
export function parseHeaderParameterSubSchemaMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/additionalProperties}
*/
export function parseHeaderParameterSubSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/patternProperties/^x-}
*/
export function parseHeaderParameterSubSchemaX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/required}
*/
export function parseQueryParameterSubSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/in}
*/
export function parseQueryParameterSubSchemaIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/description}
*/
export function parseQueryParameterSubSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/name}
*/
export function parseQueryParameterSubSchemaName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/allowEmptyValue}
*/
export function parseQueryParameterSubSchemaAllowEmptyValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/type}
*/
export function parseQueryParameterSubSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/format}
*/
export function parseQueryParameterSubSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/items}
*/
export function parseQueryParameterSubSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/collectionFormat}
*/
export function parseQueryParameterSubSchemaCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseCollectionFormatWithMulti(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/default}
*/
export function parseQueryParameterSubSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maximum}
*/
export function parseQueryParameterSubSchemaMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMaximum}
*/
export function parseQueryParameterSubSchemaExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minimum}
*/
export function parseQueryParameterSubSchemaMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMinimum}
*/
export function parseQueryParameterSubSchemaExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxLength}
*/
export function parseQueryParameterSubSchemaMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minLength}
*/
export function parseQueryParameterSubSchemaMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/pattern}
*/
export function parseQueryParameterSubSchemaPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxItems}
*/
export function parseQueryParameterSubSchemaMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minItems}
*/
export function parseQueryParameterSubSchemaMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/uniqueItems}
*/
export function parseQueryParameterSubSchemaUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/enum}
*/
export function parseQueryParameterSubSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/multipleOf}
*/
export function parseQueryParameterSubSchemaMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/additionalProperties}
*/
export function parseQueryParameterSubSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/patternProperties/^x-}
*/
export function parseQueryParameterSubSchemaX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/required}
*/
export function parseFormDataParameterSubSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/in}
*/
export function parseFormDataParameterSubSchemaIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/description}
*/
export function parseFormDataParameterSubSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/name}
*/
export function parseFormDataParameterSubSchemaName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/allowEmptyValue}
*/
export function parseFormDataParameterSubSchemaAllowEmptyValue(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/type}
*/
export function parseFormDataParameterSubSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/format}
*/
export function parseFormDataParameterSubSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/items}
*/
export function parseFormDataParameterSubSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/collectionFormat}
*/
export function parseFormDataParameterSubSchemaCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseCollectionFormatWithMulti(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/default}
*/
export function parseFormDataParameterSubSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maximum}
*/
export function parseFormDataParameterSubSchemaMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMaximum}
*/
export function parseFormDataParameterSubSchemaExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minimum}
*/
export function parseFormDataParameterSubSchemaMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMinimum}
*/
export function parseFormDataParameterSubSchemaExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxLength}
*/
export function parseFormDataParameterSubSchemaMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minLength}
*/
export function parseFormDataParameterSubSchemaMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/pattern}
*/
export function parseFormDataParameterSubSchemaPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxItems}
*/
export function parseFormDataParameterSubSchemaMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minItems}
*/
export function parseFormDataParameterSubSchemaMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/uniqueItems}
*/
export function parseFormDataParameterSubSchemaUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/enum}
*/
export function parseFormDataParameterSubSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/multipleOf}
*/
export function parseFormDataParameterSubSchemaMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/additionalProperties}
*/
export function parseFormDataParameterSubSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/patternProperties/^x-}
*/
export function parseFormDataParameterSubSchemaX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/required}
*/
export function parsePathParameterSubSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/in}
*/
export function parsePathParameterSubSchemaIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/description}
*/
export function parsePathParameterSubSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/name}
*/
export function parsePathParameterSubSchemaName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/type}
*/
export function parsePathParameterSubSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/format}
*/
export function parsePathParameterSubSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/items}
*/
export function parsePathParameterSubSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/collectionFormat}
*/
export function parsePathParameterSubSchemaCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsCollectionFormat(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/default}
*/
export function parsePathParameterSubSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maximum}
*/
export function parsePathParameterSubSchemaMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMaximum}
*/
export function parsePathParameterSubSchemaExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minimum}
*/
export function parsePathParameterSubSchemaMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMinimum}
*/
export function parsePathParameterSubSchemaExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxLength}
*/
export function parsePathParameterSubSchemaMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minLength}
*/
export function parsePathParameterSubSchemaMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/pattern}
*/
export function parsePathParameterSubSchemaPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxItems}
*/
export function parsePathParameterSubSchemaMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minItems}
*/
export function parsePathParameterSubSchemaMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/uniqueItems}
*/
export function parsePathParameterSubSchemaUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/enum}
*/
export function parsePathParameterSubSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/multipleOf}
*/
export function parsePathParameterSubSchemaMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/additionalProperties}
*/
export function parsePathParameterSubSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/patternProperties/^x-}
*/
export function parsePathParameterSubSchemaX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/0}
*/
export function parseNonBodyParameter0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseHeaderParameterSubSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/1}
*/
export function parseNonBodyParameter1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseFormDataParameterSubSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/2}
*/
export function parseNonBodyParameter2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseQueryParameterSubSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/3}
*/
export function parseNonBodyParameter3(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePathParameterSubSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/0}
*/
export function parseParameter0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseBodyParameter(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/1}
*/
export function parseParameter1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseNonBodyParameter(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/$ref}
*/
export function parseSchemaRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/format}
*/
export function parseSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/title}
*/
export function parseSchemaTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Title(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/description}
*/
export function parseSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Description(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/default}
*/
export function parseSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Default(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/multipleOf}
*/
export function parseSchemaMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04MultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maximum}
*/
export function parseSchemaMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Maximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMaximum}
*/
export function parseSchemaExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04ExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minimum}
*/
export function parseSchemaMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Minimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMinimum}
*/
export function parseSchemaExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04ExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxLength}
*/
export function parseSchemaMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minLength}
*/
export function parseSchemaMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveIntegerDefault0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/pattern}
*/
export function parseSchemaPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Pattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxItems}
*/
export function parseSchemaMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minItems}
*/
export function parseSchemaMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveIntegerDefault0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/uniqueItems}
*/
export function parseSchemaUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04UniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxProperties}
*/
export function parseMaxProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minProperties}
*/
export function parseMinProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveIntegerDefault0(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/required}
*/
export function parseSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseStringArray(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/enum}
*/
export function parseSchemaEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Enum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties}
*/
export function parsePropertiesSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseAdditionalPropertiesAnyOf0(value, configuration)
??
parseAdditionalPropertiesAnyOf1(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/type}
*/
export function parseSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Type(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items}
*/
export function parseSchemaItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseItemsAnyOf0(value, configuration)
??
parseItemsAnyOf1(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf}
*/
export function parseAllOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseAllOfItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/properties}
*/
export function parseProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
default:
return [
name,
(parsePropertiesAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/discriminator}
*/
export function parseDiscriminator(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/readOnly}
*/
export function parseSchemaReadOnly(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/xml}
*/
export function parseSchemaXml(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsXml(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/externalDocs}
*/
export function parseSchemaExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExternalDocs(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/example}
*/
export function parseSchemaExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/additionalProperties}
*/
export function parseDefinitionsSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/patternProperties/^x-}
*/
export function parseSchemaPatternPropertiesX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/format}
*/
export function parseFileSchemaFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/title}
*/
export function parseFileSchemaTitle(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Title(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/description}
*/
export function parseFileSchemaDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Description(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/default}
*/
export function parseFileSchemaDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDraft04Default(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/required}
*/
export function parseFileSchemaRequired(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseStringArray(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/type}
*/
export function parseFileSchemaType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/readOnly}
*/
export function parseFileSchemaReadOnly(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/externalDocs}
*/
export function parseFileSchemaExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExternalDocs(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/example}
*/
export function parseFileSchemaExample(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/additionalProperties}
*/
export function parseFileSchemaAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/patternProperties/^x-}
*/
export function parseFileSchemaX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/type}
*/
export function parsePrimitivesItemsType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/format}
*/
export function parsePrimitivesItemsFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/items}
*/
export function parsePrimitivesItemsItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePrimitivesItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/collectionFormat}
*/
export function parsePrimitivesItemsCollectionFormat(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsCollectionFormat(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/default}
*/
export function parsePrimitivesItemsDefault(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsDefault(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maximum}
*/
export function parsePrimitivesItemsMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMaximum}
*/
export function parsePrimitivesItemsExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMaximum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minimum}
*/
export function parsePrimitivesItemsMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMinimum}
*/
export function parsePrimitivesItemsExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExclusiveMinimum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxLength}
*/
export function parsePrimitivesItemsMaxLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minLength}
*/
export function parsePrimitivesItemsMinLength(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinLength(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/pattern}
*/
export function parsePrimitivesItemsPattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsPattern(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxItems}
*/
export function parsePrimitivesItemsMaxItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMaxItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minItems}
*/
export function parsePrimitivesItemsMinItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMinItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/uniqueItems}
*/
export function parsePrimitivesItemsUniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsUniqueItems(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/enum}
*/
export function parsePrimitivesItemsEnum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsEnum(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/multipleOf}
*/
export function parsePrimitivesItemsMultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsMultipleOf(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/additionalProperties}
*/
export function parsePrimitivesItemsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/patternProperties/^x-}
*/
export function parsePrimitivesItemsX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/security/items}
*/
export function parseSecurityItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSecurityRequirement(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties}
*/
export function parseSecurityRequirementAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseSecurityRequirementItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/name}
*/
export function parseXmlName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/namespace}
*/
export function parseNamespace(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/prefix}
*/
export function parsePrefix(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/attribute}
*/
export function parseAttribute(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/wrapped}
*/
export function parseWrapped(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/additionalProperties}
*/
export function parseXmlAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/patternProperties/^x-}
*/
export function parseXmlX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/name}
*/
export function parseTagName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/description}
*/
export function parseTagDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/externalDocs}
*/
export function parseTagExternalDocs(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsExternalDocs(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/additionalProperties}
*/
export function parseTagAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/patternProperties/^x-}
*/
export function parseTagX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties}
*/
export function parseSecurityDefinitionsAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseSecurityDefinitions0(value, configuration)
??
parseSecurityDefinitions1(value, configuration)
??
parseSecurityDefinitions2(value, configuration)
??
parseSecurityDefinitions3(value, configuration)
??
parseSecurityDefinitions4(value, configuration)
??
parseSecurityDefinitions5(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/type}
*/
export function parseBasicAuthenticationSecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/description}
*/
export function parseBasicAuthenticationSecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/additionalProperties}
*/
export function parseBasicAuthenticationSecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/patternProperties/^x-}
*/
export function parseBasicAuthenticationSecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/type}
*/
export function parseApiKeySecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/name}
*/
export function parseApiKeySecurityName(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/in}
*/
export function parseApiKeySecurityIn(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/description}
*/
export function parseApiKeySecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/additionalProperties}
*/
export function parseApiKeySecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/patternProperties/^x-}
*/
export function parseApiKeySecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/type}
*/
export function parseOauth2ImplicitSecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/flow}
*/
export function parseOauth2ImplicitSecurityFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/scopes}
*/
export function parseOauth2ImplicitSecurityScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2Scopes(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/authorizationUrl}
*/
export function parseOauth2ImplicitSecurityAuthorizationUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/description}
*/
export function parseOauth2ImplicitSecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/additionalProperties}
*/
export function parseOauth2ImplicitSecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/patternProperties/^x-}
*/
export function parseOauth2ImplicitSecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/type}
*/
export function parseOauth2PasswordSecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/flow}
*/
export function parseOauth2PasswordSecurityFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/scopes}
*/
export function parseOauth2PasswordSecurityScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2Scopes(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/tokenUrl}
*/
export function parseOauth2PasswordSecurityTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/description}
*/
export function parseOauth2PasswordSecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/additionalProperties}
*/
export function parseOauth2PasswordSecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/patternProperties/^x-}
*/
export function parseOauth2PasswordSecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/type}
*/
export function parseOauth2ApplicationSecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/flow}
*/
export function parseOauth2ApplicationSecurityFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/scopes}
*/
export function parseOauth2ApplicationSecurityScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2Scopes(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/tokenUrl}
*/
export function parseOauth2ApplicationSecurityTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/description}
*/
export function parseOauth2ApplicationSecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/additionalProperties}
*/
export function parseOauth2ApplicationSecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/patternProperties/^x-}
*/
export function parseOauth2ApplicationSecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/type}
*/
export function parseOauth2AccessCodeSecurityType(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/flow}
*/
export function parseOauth2AccessCodeSecurityFlow(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/scopes}
*/
export function parseOauth2AccessCodeSecurityScopes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2Scopes(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/authorizationUrl}
*/
export function parseOauth2AccessCodeSecurityAuthorizationUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/tokenUrl}
*/
export function parseOauth2AccessCodeSecurityTokenUrl(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/description}
*/
export function parseOauth2AccessCodeSecurityDescription(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/additionalProperties}
*/
export function parseOauth2AccessCodeSecurityAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/patternProperties/^x-}
*/
export function parseOauth2AccessCodeSecurityX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes/additionalProperties}
*/
export function parseOauth2ScopesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/mediaTypeList/items}
*/
export function parseMediaTypeListItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseMimeType(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items}
*/
export function parseParametersListItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
parseParameter0(value, configuration)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseHeaderParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseHeaderParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseHeaderParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseHeaderParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parseHeaderParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseHeaderParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseHeaderParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseHeaderParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseHeaderParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseHeaderParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseHeaderParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseHeaderParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseHeaderParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseHeaderParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseHeaderParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseHeaderParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseHeaderParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseHeaderParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseHeaderParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseHeaderParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseHeaderParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseFormDataParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseFormDataParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseFormDataParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseFormDataParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseFormDataParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseFormDataParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseFormDataParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseFormDataParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseFormDataParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseFormDataParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseFormDataParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseFormDataParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseFormDataParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseFormDataParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseFormDataParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseFormDataParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseFormDataParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseFormDataParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseFormDataParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseFormDataParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseFormDataParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseFormDataParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parseQueryParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parseQueryParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parseQueryParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parseQueryParameterSubSchemaName(value, configuration),
]
case "allowEmptyValue":
return [
name,
parseQueryParameterSubSchemaAllowEmptyValue(value, configuration),
]
case "type":
return [
name,
parseQueryParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parseQueryParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parseQueryParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parseQueryParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parseQueryParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parseQueryParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parseQueryParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parseQueryParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parseQueryParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parseQueryParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parseQueryParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parseQueryParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parseQueryParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parseQueryParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parseQueryParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parseQueryParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parseQueryParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parseQueryParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
(
(typeof value === "object" && value !== null && !Array.isArray(value)) ?
Object.fromEntries(
Object.entries(value).map(([name, value]) => {
switch(name) {
case "required":
return [
name,
parsePathParameterSubSchemaRequired(value, configuration),
]
case "in":
return [
name,
parsePathParameterSubSchemaIn(value, configuration),
]
case "description":
return [
name,
parsePathParameterSubSchemaDescription(value, configuration),
]
case "name":
return [
name,
parsePathParameterSubSchemaName(value, configuration),
]
case "type":
return [
name,
parsePathParameterSubSchemaType(value, configuration),
]
case "format":
return [
name,
parsePathParameterSubSchemaFormat(value, configuration),
]
case "items":
return [
name,
parsePathParameterSubSchemaItems(value, configuration),
]
case "collectionFormat":
return [
name,
parsePathParameterSubSchemaCollectionFormat(value, configuration),
]
case "default":
return [
name,
parsePathParameterSubSchemaDefault(value, configuration),
]
case "maximum":
return [
name,
parsePathParameterSubSchemaMaximum(value, configuration),
]
case "exclusiveMaximum":
return [
name,
parsePathParameterSubSchemaExclusiveMaximum(value, configuration),
]
case "minimum":
return [
name,
parsePathParameterSubSchemaMinimum(value, configuration),
]
case "exclusiveMinimum":
return [
name,
parsePathParameterSubSchemaExclusiveMinimum(value, configuration),
]
case "maxLength":
return [
name,
parsePathParameterSubSchemaMaxLength(value, configuration),
]
case "minLength":
return [
name,
parsePathParameterSubSchemaMinLength(value, configuration),
]
case "pattern":
return [
name,
parsePathParameterSubSchemaPattern(value, configuration),
]
case "maxItems":
return [
name,
parsePathParameterSubSchemaMaxItems(value, configuration),
]
case "minItems":
return [
name,
parsePathParameterSubSchemaMinItems(value, configuration),
]
case "uniqueItems":
return [
name,
parsePathParameterSubSchemaUniqueItems(value, configuration),
]
case "enum":
return [
name,
parsePathParameterSubSchemaEnum(value, configuration),
]
case "multipleOf":
return [
name,
parsePathParameterSubSchemaMultipleOf(value, configuration),
]
default:
return [
name,
(parsePathParameterSubSchemaAdditionalProperties(value, configuration)),
]
}
})
) :
undefined
)
??
parseParametersList1(value, configuration)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/additionalItems}
*/
export function parseParametersListAdditionalItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schemesList/items}
*/
export function parseSchemesListItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference/properties/$ref}
*/
export function parseJsonReferenceRef(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference/additionalProperties}
*/
export function parseJsonReferenceAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/consumes/allOf/0}
*/
export function parsePropertiesAllOfConsumes0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/produces/allOf/0}
*/
export function parsePropertiesAllOfProduces0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/tags/items}
*/
export function parsePropertiesTagsItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseTag(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/tags/items}
*/
export function parseOperationTagsItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/produces/allOf/0}
*/
export function parseOperationAllOfProduces0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes/allOf/0}
*/
export function parseOperationAllOfConsumes0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not/additionalProperties}
*/
export function parseNotAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not/patternProperties/^x-}
*/
export function parseNotX(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseVendorExtension(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/0}
*/
export function parseResponse0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/1}
*/
export function parseResponse1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseFileSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/0}
*/
export function parseAdditionalPropertiesAnyOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/1}
*/
export function parseAdditionalPropertiesAnyOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/0}
*/
export function parseItemsAnyOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1}
*/
export function parseItemsAnyOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseItems1AnyOfItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf/items}
*/
export function parseAllOfItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/properties/additionalProperties}
*/
export function parsePropertiesAdditionalProperties(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties/items}
*/
export function parseSecurityRequirementItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/0}
*/
export function parseSecurityDefinitions0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseBasicAuthenticationSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/1}
*/
export function parseSecurityDefinitions1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseApiKeySecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/2}
*/
export function parseSecurityDefinitions2(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2ImplicitSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/3}
*/
export function parseSecurityDefinitions3(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2PasswordSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/4}
*/
export function parseSecurityDefinitions4(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2ApplicationSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/5}
*/
export function parseSecurityDefinitions5(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseOauth2AccessCodeSecurity(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/0}
*/
export function parseParametersList0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseParameter(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/1}
*/
export function parseParametersList1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseJsonReference(value, configuration));
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1/items}
*/
export function parseItems1AnyOfItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseDefinitionsSchema(value, configuration));
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/title}
*/
export function parseDraft04Title(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/description}
*/
export function parseDraft04Description(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/default}
*/
export function parseDraft04Default(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/multipleOf}
*/
export function parseDraft04MultipleOf(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maximum}
*/
export function parseDraft04Maximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum}
*/
export function parseDraft04ExclusiveMaximum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minimum}
*/
export function parseDraft04Minimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum}
*/
export function parseDraft04ExclusiveMinimum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveInteger}
*/
export function parsePositiveInteger(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0}
*/
export function parsePositiveIntegerDefault0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/0}
*/
export function parsePositiveIntegerDefault00(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parsePositiveInteger(value, configuration));
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/1}
*/
export function parsePositiveIntegerDefault01(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/pattern}
*/
export function parseDraft04Pattern(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/uniqueItems}
*/
export function parseDraft04UniqueItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(value == null) {
return false;
}
if(Array.isArray(value)) {
switch(value.length) {
case 0:
return false;
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
value = value.trim();
for(const trueStringValue of configuration.trueStringValues) {
if(value === trueStringValue) {
return true;
}
}
for(const falseStringValue of configuration.falseStringValues) {
if(value === falseStringValue) {
return false;
}
}
return undefined;
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/enum}
*/
export function parseDraft04Enum(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return value;
}
}) :
undefined
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray}
*/
export function parseStringArray(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseStringArrayItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray/items}
*/
export function parseStringArrayItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
((value: unknown) => {
if(Array.isArray(value)) {
switch(value.length) {
case 1:
[value] = value
break;
default:
return undefined;
}
}
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
})(value)
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type}
*/
export function parseDraft04Type(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/0}
*/
export function parseTypeAnyOf0(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSimpleTypes(value, configuration));
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1}
*/
export function parseTypeAnyOf1(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (
Array.isArray(value) ?
value.map((value, index) => {
switch(index) {
default:
return parseType1AnyOfItems(value, configuration)
}
}) :
undefined
);
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1/items}
*/
export function parseType1AnyOfItems(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (parseSimpleTypes(value, configuration));
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/simpleTypes}
*/
export function parseSimpleTypes(value: unknown, options: ParserGeneratorOptions = {}): unknown {
const configuration = {
...defaultParserGeneratorOptions,
...options,
};
return (value);
}
