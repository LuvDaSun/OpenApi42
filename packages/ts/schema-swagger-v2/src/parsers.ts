// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.8.13                         -- www.JsonSchema42.org
export function parseSchemaJson(value: unknown): unknown {
return _parseMapSchemaJson(value);
}
function _parseMapSchemaJson(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "swagger": {
const propertyValue = parseSwagger(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "info": {
const propertyValue = parsePropertiesInfo(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "host": {
const propertyValue = parseHost(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "basePath": {
const propertyValue = parseBasePath(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schemes": {
const propertyValue = parseSchemaJsonSchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "consumes": {
const propertyValue = parseSchemaJsonConsumes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "produces": {
const propertyValue = parseSchemaJsonProduces(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "paths": {
const propertyValue = parsePropertiesPaths(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "definitions": {
const propertyValue = parsePropertiesDefinitions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseSchemaJsonParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseSchemaJsonPropertiesResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseSchemaJsonPropertiesSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "securityDefinitions": {
const propertyValue = parsePropertiesSecurityDefinitions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tags": {
const propertyValue = parseSchemaJsonTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchemaJsonPropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseSchemaJsonAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsInfo(value: unknown): unknown {
return _parseMapDefinitionsInfo(value);
}
function _parseMapDefinitionsInfo(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "title": {
const propertyValue = parseInfoPropertiesTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "version": {
const propertyValue = parseVersion(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseInfoPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "termsOfService": {
const propertyValue = parseTermsOfService(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "contact": {
const propertyValue = parsePropertiesContact(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "license": {
const propertyValue = parsePropertiesLicense(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseInfoAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsContact(value: unknown): unknown {
return _parseMapDefinitionsContact(value);
}
function _parseMapDefinitionsContact(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseContactName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseContactUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "email": {
const propertyValue = parseEmail(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseContactAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsLicense(value: unknown): unknown {
return _parseMapDefinitionsLicense(value);
}
function _parseMapDefinitionsLicense(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseLicenseName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseLicenseUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseLicenseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsPaths(value: unknown): unknown {
return _parseMapDefinitionsPaths(value);
}
function _parseMapDefinitionsPaths(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePathsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsDefinitions(value: unknown): unknown {
return _parseMapDefinitionsDefinitions(value);
}
function _parseMapDefinitionsDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseParameterDefinitions(value: unknown): unknown {
return _parseMapParameterDefinitions(value);
}
function _parseMapParameterDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseParameterDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseDefinitions(value: unknown): unknown {
return _parseMapResponseDefinitions(value);
}
function _parseMapResponseDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponseDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsExternalDocs(value: unknown): unknown {
return _parseMapDefinitionsExternalDocs(value);
}
function _parseMapDefinitionsExternalDocs(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseExternalDocsPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "url": {
const propertyValue = parseExternalDocsUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseExternalDocsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsExamples(value: unknown): unknown {
return _parseMapDefinitionsExamples(value);
}
function _parseMapDefinitionsExamples(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseExamplesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMimeType(value: unknown): unknown {
return _parseStringMimeType(value);
}
function _parseStringMimeType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperation(value: unknown): unknown {
return _parseMapOperation(value);
}
function _parseMapOperation(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "tags": {
const propertyValue = parseOperationTags(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "summary": {
const propertyValue = parseSummary(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOperationPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseOperationPropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "operationId": {
const propertyValue = parseOperationId(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "produces": {
const propertyValue = parseOperationProduces(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "consumes": {
const propertyValue = parseOperationConsumes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parseOperationParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "responses": {
const propertyValue = parseOperationPropertiesResponses(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schemes": {
const propertyValue = parseOperationSchemes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "deprecated": {
const propertyValue = parseDeprecated(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "security": {
const propertyValue = parseOperationPropertiesSecurity(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOperationAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathItem(value: unknown): unknown {
return _parseMapPathItem(value);
}
function _parseMapPathItem(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parsePathItemRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "get": {
const propertyValue = parseGet(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "put": {
const propertyValue = parsePut(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "post": {
const propertyValue = parsePost(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "delete": {
const propertyValue = parseDelete(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "options": {
const propertyValue = parseOptions(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "head": {
const propertyValue = parseHead(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "patch": {
const propertyValue = parsePatch(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "parameters": {
const propertyValue = parsePathItemParameters(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathItemAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsResponses(value: unknown): unknown {
return _parseMapDefinitionsResponses(value) ?? _parseNotDefinitionsResponses(value);
}
function _parseMapDefinitionsResponses(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseResponsesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
function _parseNotDefinitionsResponses(value: unknown): unknown {
return parseNot(value);
}
export function parseResponseValue(value: unknown): unknown {
return _parseOneOfResponseValue(value);
}
function _parseOneOfResponseValue(value: unknown): unknown {
return parseResponseValueOneOf0(value) ?? parseResponseValueOneOf1(value);
}
export function parseResponse(value: unknown): unknown {
return _parseMapResponse(value);
}
function _parseMapResponse(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseResponsePropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseResponsePropertiesSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "headers": {
const propertyValue = parsePropertiesHeaders(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "examples": {
const propertyValue = parsePropertiesExamples(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseResponseAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsHeaders(value: unknown): unknown {
return _parseMapDefinitionsHeaders(value);
}
function _parseMapDefinitionsHeaders(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseHeadersAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeader(value: unknown): unknown {
return _parseMapHeader(value);
}
function _parseMapHeader(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseHeaderType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseHeaderFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseHeaderPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseHeaderPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseHeaderPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseHeaderPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseHeaderPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseHeaderPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseHeaderPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseHeaderPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseHeaderPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseHeaderPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseHeaderPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseHeaderPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseHeaderPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseHeaderPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseHeaderPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHeaderPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseVendorExtension(value: unknown): unknown {
return ;
}
export function parseBodyParameter(value: unknown): unknown {
return _parseMapBodyParameter(value);
}
function _parseMapBodyParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "description": {
const propertyValue = parseBodyParameterPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseBodyParameterName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseBodyParameterIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseBodyParameterRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "schema": {
const propertyValue = parseBodyParameterPropertiesSchema(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseBodyParameterAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseHeaderParameterSubSchema(value: unknown): unknown {
return _parseMapHeaderParameterSubSchema(value);
}
function _parseMapHeaderParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseHeaderParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseHeaderParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseHeaderParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseHeaderParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseHeaderParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseHeaderParameterSubSchemaPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseHeaderParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseQueryParameterSubSchema(value: unknown): unknown {
return _parseMapQueryParameterSubSchema(value);
}
function _parseMapQueryParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseQueryParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseQueryParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseQueryParameterSubSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseQueryParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseQueryParameterSubSchemaAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseQueryParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseQueryParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseQueryParameterSubSchemaPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseQueryParameterSubSchemaPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseQueryParameterSubSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseQueryParameterSubSchemaPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseQueryParameterSubSchemaPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseQueryParameterSubSchemaPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseQueryParameterSubSchemaPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseQueryParameterSubSchemaPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseQueryParameterSubSchemaPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseQueryParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseFormDataParameterSubSchema(value: unknown): unknown {
return _parseMapFormDataParameterSubSchema(value);
}
function _parseMapFormDataParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parseFormDataParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseFormDataParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseFormDataParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allowEmptyValue": {
const propertyValue = parseFormDataParameterSubSchemaAllowEmptyValue(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseFormDataParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseFormDataParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseFormDataParameterSubSchemaPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseFormDataParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePathParameterSubSchema(value: unknown): unknown {
return _parseMapPathParameterSubSchema(value);
}
function _parseMapPathParameterSubSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "required": {
const propertyValue = parsePathParameterSubSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parsePathParameterSubSchemaIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parsePathParameterSubSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parsePathParameterSubSchemaName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parsePathParameterSubSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parsePathParameterSubSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePathParameterSubSchemaPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parsePathParameterSubSchemaPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parsePathParameterSubSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parsePathParameterSubSchemaPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parsePathParameterSubSchemaPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parsePathParameterSubSchemaPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parsePathParameterSubSchemaPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parsePathParameterSubSchemaPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parsePathParameterSubSchemaPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePathParameterSubSchemaPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parsePathParameterSubSchemaPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parsePathParameterSubSchemaPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parsePathParameterSubSchemaPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parsePathParameterSubSchemaPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parsePathParameterSubSchemaPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePathParameterSubSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseNonBodyParameter(value: unknown): unknown {
return _parseMapNonBodyParameter(value) ?? _parseOneOfNonBodyParameter(value);
}
function _parseMapNonBodyParameter(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
}
return result;
}
return undefined;
}
function _parseOneOfNonBodyParameter(value: unknown): unknown {
return parseNonBodyParameterOneOf0(value) ?? parseNonBodyParameterOneOf1(value) ?? parseNonBodyParameterOneOf2(value) ?? parseNonBodyParameterOneOf3(value);
}
export function parseParameter(value: unknown): unknown {
return _parseOneOfParameter(value);
}
function _parseOneOfParameter(value: unknown): unknown {
return parseParameterOneOf0(value) ?? parseParameterOneOf1(value);
}
export function parseDefinitionsSchema(value: unknown): unknown {
return _parseMapDefinitionsSchema(value);
}
function _parseMapDefinitionsSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parseSchemaRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parseSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "title": {
const propertyValue = parseDefinitionsSchemaPropertiesTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseDefinitionsSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseDefinitionsSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parseDefinitionsSchemaPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parseDefinitionsSchemaPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parseDefinitionsSchemaPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parseDefinitionsSchemaPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parseDefinitionsSchemaPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parseSchemaPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parseSchemaPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parseDefinitionsSchemaPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parseSchemaPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parseSchemaPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parseDefinitionsSchemaPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxProperties": {
const propertyValue = parseMaxProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minProperties": {
const propertyValue = parseMinProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parseDefinitionsSchemaPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "additionalProperties": {
const propertyValue = parseSchemaPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseDefinitionsSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parseSchemaPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "allOf": {
const propertyValue = parseAllOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "properties": {
const propertyValue = parseProperties(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "discriminator": {
const propertyValue = parseDiscriminator(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseSchemaReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "xml": {
const propertyValue = parsePropertiesXml(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseSchemaPropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseSchemaExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseFileSchema(value: unknown): unknown {
return _parseMapFileSchema(value);
}
function _parseMapFileSchema(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "format": {
const propertyValue = parseFileSchemaFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "title": {
const propertyValue = parseFileSchemaPropertiesTitle(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseFileSchemaPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parseFileSchemaPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "required": {
const propertyValue = parseFileSchemaRequired(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "type": {
const propertyValue = parseFileSchemaType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "readOnly": {
const propertyValue = parseFileSchemaReadOnly(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseFileSchemaPropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "example": {
const propertyValue = parseFileSchemaExample(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseFileSchemaAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parsePrimitivesItems(value: unknown): unknown {
return _parseMapPrimitivesItems(value);
}
function _parseMapPrimitivesItems(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parsePrimitivesItemsType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "format": {
const propertyValue = parsePrimitivesItemsFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "items": {
const propertyValue = parsePrimitivesItemsPropertiesItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "collectionFormat": {
const propertyValue = parsePrimitivesItemsPropertiesCollectionFormat(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "default": {
const propertyValue = parsePrimitivesItemsPropertiesDefault(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maximum": {
const propertyValue = parsePrimitivesItemsPropertiesMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMaximum": {
const propertyValue = parsePrimitivesItemsPropertiesExclusiveMaximum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minimum": {
const propertyValue = parsePrimitivesItemsPropertiesMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "exclusiveMinimum": {
const propertyValue = parsePrimitivesItemsPropertiesExclusiveMinimum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxLength": {
const propertyValue = parsePrimitivesItemsPropertiesMaxLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minLength": {
const propertyValue = parsePrimitivesItemsPropertiesMinLength(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "pattern": {
const propertyValue = parsePrimitivesItemsPropertiesPattern(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "maxItems": {
const propertyValue = parsePrimitivesItemsPropertiesMaxItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "minItems": {
const propertyValue = parsePrimitivesItemsPropertiesMinItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "uniqueItems": {
const propertyValue = parsePrimitivesItemsPropertiesUniqueItems(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "enum": {
const propertyValue = parsePrimitivesItemsPropertiesEnum(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "multipleOf": {
const propertyValue = parsePrimitivesItemsPropertiesMultipleOf(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parsePrimitivesItemsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSecurity(value: unknown): unknown {
return _parseArrayDefinitionsSecurity(value);
}
function _parseArrayDefinitionsSecurity(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSecurityItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSecurityRequirement(value: unknown): unknown {
return _parseMapSecurityRequirement(value);
}
function _parseMapSecurityRequirement(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityRequirementAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsXml(value: unknown): unknown {
return _parseMapDefinitionsXml(value);
}
function _parseMapDefinitionsXml(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseXmlName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "namespace": {
const propertyValue = parseNamespace(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "prefix": {
const propertyValue = parsePrefix(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "attribute": {
const propertyValue = parseAttribute(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "wrapped": {
const propertyValue = parseWrapped(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseXmlAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseTag(value: unknown): unknown {
return _parseMapTag(value);
}
function _parseMapTag(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "name": {
const propertyValue = parseTagName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseTagPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "externalDocs": {
const propertyValue = parseTagPropertiesExternalDocs(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseTagAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDefinitionsSecurityDefinitions(value: unknown): unknown {
return _parseMapDefinitionsSecurityDefinitions(value);
}
function _parseMapDefinitionsSecurityDefinitions(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseSecurityDefinitionsAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseBasicAuthenticationSecurity(value: unknown): unknown {
return _parseMapBasicAuthenticationSecurity(value);
}
function _parseMapBasicAuthenticationSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseBasicAuthenticationSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseBasicAuthenticationSecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseBasicAuthenticationSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseApiKeySecurity(value: unknown): unknown {
return _parseMapApiKeySecurity(value);
}
function _parseMapApiKeySecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseApiKeySecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "name": {
const propertyValue = parseApiKeySecurityName(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "in": {
const propertyValue = parseApiKeySecurityIn(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseApiKeySecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseApiKeySecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2ImplicitSecurity(value: unknown): unknown {
return _parseMapOauth2ImplicitSecurity(value);
}
function _parseMapOauth2ImplicitSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2ImplicitSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2ImplicitSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2ImplicitSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationUrl": {
const propertyValue = parseOauth2ImplicitSecurityAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2ImplicitSecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2ImplicitSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2PasswordSecurity(value: unknown): unknown {
return _parseMapOauth2PasswordSecurity(value);
}
function _parseMapOauth2PasswordSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2PasswordSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2PasswordSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2PasswordSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2PasswordSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2PasswordSecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2PasswordSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2ApplicationSecurity(value: unknown): unknown {
return _parseMapOauth2ApplicationSecurity(value);
}
function _parseMapOauth2ApplicationSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2ApplicationSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2ApplicationSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2ApplicationSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2ApplicationSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2ApplicationSecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2ApplicationSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2AccessCodeSecurity(value: unknown): unknown {
return _parseMapOauth2AccessCodeSecurity(value);
}
function _parseMapOauth2AccessCodeSecurity(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "type": {
const propertyValue = parseOauth2AccessCodeSecurityType(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "flow": {
const propertyValue = parseOauth2AccessCodeSecurityFlow(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "scopes": {
const propertyValue = parseOauth2AccessCodeSecurityScopes(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "authorizationUrl": {
const propertyValue = parseOauth2AccessCodeSecurityAuthorizationUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "tokenUrl": {
const propertyValue = parseOauth2AccessCodeSecurityTokenUrl(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
case "description": {
const propertyValue = parseOauth2AccessCodeSecurityPropertiesDescription(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseOauth2AccessCodeSecurityAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseOauth2Scopes(value: unknown): unknown {
return _parseMapOauth2Scopes(value);
}
function _parseMapOauth2Scopes(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseOauth2ScopesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseMediaTypeList(value: unknown): unknown {
return _parseArrayMediaTypeList(value);
}
function _parseArrayMediaTypeList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseMediaTypeListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseParametersList(value: unknown): unknown {
return _parseArrayParametersList(value);
}
function _parseArrayParametersList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseParametersListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemesList(value: unknown): unknown {
return _parseArraySchemesList(value);
}
function _parseArraySchemesList(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchemesListItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseDefinitionsCollectionFormat(value: unknown): unknown {
return _parseStringDefinitionsCollectionFormat(value);
}
function _parseStringDefinitionsCollectionFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseCollectionFormatWithMulti(value: unknown): unknown {
return _parseStringCollectionFormatWithMulti(value);
}
function _parseStringCollectionFormatWithMulti(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDefinitionsTitle(value: unknown): unknown {
return _parseReferenceDefinitionsTitle(value);
}
function _parseReferenceDefinitionsTitle(value: unknown): unknown {
return parseDraft04SchemaPropertiesTitle(value);
}
export function parseDefinitionsDescription(value: unknown): unknown {
return _parseReferenceDefinitionsDescription(value);
}
function _parseReferenceDefinitionsDescription(value: unknown): unknown {
return parseDraft04SchemaPropertiesDescription(value);
}
export function parseDefinitionsDefault(value: unknown): unknown {
return _parseReferenceDefinitionsDefault(value);
}
function _parseReferenceDefinitionsDefault(value: unknown): unknown {
return parseDraft04SchemaPropertiesDefault(value);
}
export function parseDefinitionsMultipleOf(value: unknown): unknown {
return _parseReferenceDefinitionsMultipleOf(value);
}
function _parseReferenceDefinitionsMultipleOf(value: unknown): unknown {
return parseDraft04SchemaPropertiesMultipleOf(value);
}
export function parseDefinitionsMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsMaximum(value);
}
function _parseReferenceDefinitionsMaximum(value: unknown): unknown {
return parseDraft04SchemaPropertiesMaximum(value);
}
export function parseDefinitionsExclusiveMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsExclusiveMaximum(value);
}
function _parseReferenceDefinitionsExclusiveMaximum(value: unknown): unknown {
return parseDraft04SchemaPropertiesExclusiveMaximum(value);
}
export function parseDefinitionsMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsMinimum(value);
}
function _parseReferenceDefinitionsMinimum(value: unknown): unknown {
return parseDraft04SchemaPropertiesMinimum(value);
}
export function parseDefinitionsExclusiveMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsExclusiveMinimum(value);
}
function _parseReferenceDefinitionsExclusiveMinimum(value: unknown): unknown {
return parseDraft04SchemaPropertiesExclusiveMinimum(value);
}
export function parseDefinitionsMaxLength(value: unknown): unknown {
return _parseReferenceDefinitionsMaxLength(value);
}
function _parseReferenceDefinitionsMaxLength(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseDefinitionsMinLength(value: unknown): unknown {
return _parseReferenceDefinitionsMinLength(value);
}
function _parseReferenceDefinitionsMinLength(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsPattern(value: unknown): unknown {
return _parseReferenceDefinitionsPattern(value);
}
function _parseReferenceDefinitionsPattern(value: unknown): unknown {
return parseDraft04SchemaPropertiesPattern(value);
}
export function parseDefinitionsMaxItems(value: unknown): unknown {
return _parseReferenceDefinitionsMaxItems(value);
}
function _parseReferenceDefinitionsMaxItems(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseDefinitionsMinItems(value: unknown): unknown {
return _parseReferenceDefinitionsMinItems(value);
}
function _parseReferenceDefinitionsMinItems(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsUniqueItems(value: unknown): unknown {
return _parseReferenceDefinitionsUniqueItems(value);
}
function _parseReferenceDefinitionsUniqueItems(value: unknown): unknown {
return parseDraft04SchemaPropertiesUniqueItems(value);
}
export function parseDefinitionsEnum(value: unknown): unknown {
return _parseReferenceDefinitionsEnum(value);
}
function _parseReferenceDefinitionsEnum(value: unknown): unknown {
return parseDraft04SchemaPropertiesEnum(value);
}
export function parseJsonReference(value: unknown): unknown {
return _parseMapJsonReference(value);
}
function _parseMapJsonReference(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
switch(propertyName) {
case "$ref": {
const propertyValue = parseJsonReferenceRef(value[propertyName as keyof typeof value]);
result[propertyName] = propertyValue;
break;
}
}
result[propertyName] ??= parseJsonReferenceAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseSwagger(value: unknown): unknown {
return _parseStringSwagger(value);
}
function _parseStringSwagger(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesInfo(value: unknown): unknown {
return _parseReferencePropertiesInfo(value);
}
function _parseReferencePropertiesInfo(value: unknown): unknown {
return parseDefinitionsInfo(value);
}
export function parseHost(value: unknown): unknown {
return _parseStringHost(value);
}
function _parseStringHost(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasePath(value: unknown): unknown {
return _parseStringBasePath(value);
}
function _parseStringBasePath(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaJsonSchemes(value: unknown): unknown {
return _parseReferenceSchemaJsonSchemes(value);
}
function _parseReferenceSchemaJsonSchemes(value: unknown): unknown {
return parseSchemesList(value);
}
export function parseSchemaJsonConsumes(value: unknown): unknown {
return _parseAllOfSchemaJsonConsumes(value);
}
function _parseAllOfSchemaJsonConsumes(value: unknown): unknown {
return parseSchemaJsonConsumesAllOf0(value);
}
export function parseSchemaJsonProduces(value: unknown): unknown {
return _parseAllOfSchemaJsonProduces(value);
}
function _parseAllOfSchemaJsonProduces(value: unknown): unknown {
return parseSchemaJsonProducesAllOf0(value);
}
export function parsePropertiesPaths(value: unknown): unknown {
return _parseReferencePropertiesPaths(value);
}
function _parseReferencePropertiesPaths(value: unknown): unknown {
return parseDefinitionsPaths(value);
}
export function parsePropertiesDefinitions(value: unknown): unknown {
return _parseReferencePropertiesDefinitions(value);
}
function _parseReferencePropertiesDefinitions(value: unknown): unknown {
return parseDefinitionsDefinitions(value);
}
export function parseSchemaJsonParameters(value: unknown): unknown {
return _parseReferenceSchemaJsonParameters(value);
}
function _parseReferenceSchemaJsonParameters(value: unknown): unknown {
return parseParameterDefinitions(value);
}
export function parseSchemaJsonPropertiesResponses(value: unknown): unknown {
return _parseReferenceSchemaJsonPropertiesResponses(value);
}
function _parseReferenceSchemaJsonPropertiesResponses(value: unknown): unknown {
return parseResponseDefinitions(value);
}
export function parseSchemaJsonPropertiesSecurity(value: unknown): unknown {
return _parseReferenceSchemaJsonPropertiesSecurity(value);
}
function _parseReferenceSchemaJsonPropertiesSecurity(value: unknown): unknown {
return parseDefinitionsSecurity(value);
}
export function parsePropertiesSecurityDefinitions(value: unknown): unknown {
return _parseReferencePropertiesSecurityDefinitions(value);
}
function _parseReferencePropertiesSecurityDefinitions(value: unknown): unknown {
return parseDefinitionsSecurityDefinitions(value);
}
export function parseSchemaJsonTags(value: unknown): unknown {
return _parseArraySchemaJsonTags(value);
}
function _parseArraySchemaJsonTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseSchemaJsonTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSchemaJsonPropertiesExternalDocs(value: unknown): unknown {
return _parseReferenceSchemaJsonPropertiesExternalDocs(value);
}
function _parseReferenceSchemaJsonPropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseSchemaJsonAdditionalProperties(value: unknown): unknown {
return _parseNeverSchemaJsonAdditionalProperties(value);
}
function _parseNeverSchemaJsonAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaJsonX(value: unknown): unknown {
return _parseReferenceSchemaJsonX(value);
}
function _parseReferenceSchemaJsonX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseInfoPropertiesTitle(value: unknown): unknown {
return _parseStringInfoPropertiesTitle(value);
}
function _parseStringInfoPropertiesTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseVersion(value: unknown): unknown {
return _parseStringVersion(value);
}
function _parseStringVersion(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseInfoPropertiesDescription(value: unknown): unknown {
return _parseStringInfoPropertiesDescription(value);
}
function _parseStringInfoPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTermsOfService(value: unknown): unknown {
return _parseStringTermsOfService(value);
}
function _parseStringTermsOfService(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePropertiesContact(value: unknown): unknown {
return _parseReferencePropertiesContact(value);
}
function _parseReferencePropertiesContact(value: unknown): unknown {
return parseDefinitionsContact(value);
}
export function parsePropertiesLicense(value: unknown): unknown {
return _parseReferencePropertiesLicense(value);
}
function _parseReferencePropertiesLicense(value: unknown): unknown {
return parseDefinitionsLicense(value);
}
export function parseInfoAdditionalProperties(value: unknown): unknown {
return _parseNeverInfoAdditionalProperties(value);
}
function _parseNeverInfoAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseInfoX(value: unknown): unknown {
return _parseReferenceInfoX(value);
}
function _parseReferenceInfoX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseContactName(value: unknown): unknown {
return _parseStringContactName(value);
}
function _parseStringContactName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactUrl(value: unknown): unknown {
return _parseStringContactUrl(value);
}
function _parseStringContactUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseEmail(value: unknown): unknown {
return _parseStringEmail(value);
}
function _parseStringEmail(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseContactAdditionalProperties(value: unknown): unknown {
return _parseNeverContactAdditionalProperties(value);
}
function _parseNeverContactAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseContactX(value: unknown): unknown {
return _parseReferenceContactX(value);
}
function _parseReferenceContactX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseLicenseName(value: unknown): unknown {
return _parseStringLicenseName(value);
}
function _parseStringLicenseName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseUrl(value: unknown): unknown {
return _parseStringLicenseUrl(value);
}
function _parseStringLicenseUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseLicenseAdditionalProperties(value: unknown): unknown {
return _parseNeverLicenseAdditionalProperties(value);
}
function _parseNeverLicenseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseLicenseX(value: unknown): unknown {
return _parseReferenceLicenseX(value);
}
function _parseReferenceLicenseX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathsAdditionalProperties(value: unknown): unknown {
return _parseNeverPathsAdditionalProperties(value);
}
function _parseNeverPathsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathsX(value: unknown): unknown {
return _parseReferencePathsX(value);
}
function _parseReferencePathsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePatternProperties(value: unknown): unknown {
return _parseReferencePatternProperties(value);
}
function _parseReferencePatternProperties(value: unknown): unknown {
return parsePathItem(value);
}
export function parseDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceDefinitionsAdditionalProperties(value);
}
function _parseReferenceDefinitionsAdditionalProperties(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseParameterDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceParameterDefinitionsAdditionalProperties(value);
}
function _parseReferenceParameterDefinitionsAdditionalProperties(value: unknown): unknown {
return parseParameter(value);
}
export function parseResponseDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseReferenceResponseDefinitionsAdditionalProperties(value);
}
function _parseReferenceResponseDefinitionsAdditionalProperties(value: unknown): unknown {
return parseResponse(value);
}
export function parseExternalDocsPropertiesDescription(value: unknown): unknown {
return _parseStringExternalDocsPropertiesDescription(value);
}
function _parseStringExternalDocsPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocsUrl(value: unknown): unknown {
return _parseStringExternalDocsUrl(value);
}
function _parseStringExternalDocsUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseExternalDocsAdditionalProperties(value: unknown): unknown {
return _parseNeverExternalDocsAdditionalProperties(value);
}
function _parseNeverExternalDocsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseExternalDocsX(value: unknown): unknown {
return _parseReferenceExternalDocsX(value);
}
function _parseReferenceExternalDocsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseExamplesAdditionalProperties(value: unknown): unknown {
return _parseAnyExamplesAdditionalProperties(value);
}
function _parseAnyExamplesAdditionalProperties(value: unknown): unknown {
return value;
}
export function parseOperationTags(value: unknown): unknown {
return _parseArrayOperationTags(value);
}
function _parseArrayOperationTags(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseOperationTagsItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseSummary(value: unknown): unknown {
return _parseStringSummary(value);
}
function _parseStringSummary(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationPropertiesDescription(value: unknown): unknown {
return _parseStringOperationPropertiesDescription(value);
}
function _parseStringOperationPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationPropertiesExternalDocs(value: unknown): unknown {
return _parseReferenceOperationPropertiesExternalDocs(value);
}
function _parseReferenceOperationPropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseOperationId(value: unknown): unknown {
return _parseStringOperationId(value);
}
function _parseStringOperationId(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationProduces(value: unknown): unknown {
return _parseAllOfOperationProduces(value);
}
function _parseAllOfOperationProduces(value: unknown): unknown {
return parseOperationProducesAllOf0(value);
}
export function parseOperationConsumes(value: unknown): unknown {
return _parseAllOfOperationConsumes(value);
}
function _parseAllOfOperationConsumes(value: unknown): unknown {
return parseOperationConsumesAllOf0(value);
}
export function parseOperationParameters(value: unknown): unknown {
return _parseReferenceOperationParameters(value);
}
function _parseReferenceOperationParameters(value: unknown): unknown {
return parseParametersList(value);
}
export function parseOperationPropertiesResponses(value: unknown): unknown {
return _parseReferenceOperationPropertiesResponses(value);
}
function _parseReferenceOperationPropertiesResponses(value: unknown): unknown {
return parseDefinitionsResponses(value);
}
export function parseOperationSchemes(value: unknown): unknown {
return _parseReferenceOperationSchemes(value);
}
function _parseReferenceOperationSchemes(value: unknown): unknown {
return parseSchemesList(value);
}
export function parseDeprecated(value: unknown): unknown {
return _parseBooleanDeprecated(value);
}
function _parseBooleanDeprecated(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseOperationPropertiesSecurity(value: unknown): unknown {
return _parseReferenceOperationPropertiesSecurity(value);
}
function _parseReferenceOperationPropertiesSecurity(value: unknown): unknown {
return parseDefinitionsSecurity(value);
}
export function parseOperationAdditionalProperties(value: unknown): unknown {
return _parseNeverOperationAdditionalProperties(value);
}
function _parseNeverOperationAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOperationX(value: unknown): unknown {
return _parseReferenceOperationX(value);
}
function _parseReferenceOperationX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathItemRef(value: unknown): unknown {
return _parseStringPathItemRef(value);
}
function _parseStringPathItemRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseGet(value: unknown): unknown {
return _parseReferenceGet(value);
}
function _parseReferenceGet(value: unknown): unknown {
return parseOperation(value);
}
export function parsePut(value: unknown): unknown {
return _parseReferencePut(value);
}
function _parseReferencePut(value: unknown): unknown {
return parseOperation(value);
}
export function parsePost(value: unknown): unknown {
return _parseReferencePost(value);
}
function _parseReferencePost(value: unknown): unknown {
return parseOperation(value);
}
export function parseDelete(value: unknown): unknown {
return _parseReferenceDelete(value);
}
function _parseReferenceDelete(value: unknown): unknown {
return parseOperation(value);
}
export function parseOptions(value: unknown): unknown {
return _parseReferenceOptions(value);
}
function _parseReferenceOptions(value: unknown): unknown {
return parseOperation(value);
}
export function parseHead(value: unknown): unknown {
return _parseReferenceHead(value);
}
function _parseReferenceHead(value: unknown): unknown {
return parseOperation(value);
}
export function parsePatch(value: unknown): unknown {
return _parseReferencePatch(value);
}
function _parseReferencePatch(value: unknown): unknown {
return parseOperation(value);
}
export function parsePathItemParameters(value: unknown): unknown {
return _parseReferencePathItemParameters(value);
}
function _parseReferencePathItemParameters(value: unknown): unknown {
return parseParametersList(value);
}
export function parsePathItemAdditionalProperties(value: unknown): unknown {
return _parseNeverPathItemAdditionalProperties(value);
}
function _parseNeverPathItemAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathItemX(value: unknown): unknown {
return _parseReferencePathItemX(value);
}
function _parseReferencePathItemX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseResponsesAdditionalProperties(value: unknown): unknown {
return _parseNeverResponsesAdditionalProperties(value);
}
function _parseNeverResponsesAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePatternProperties093Default(value: unknown): unknown {
return _parseReferencePatternProperties093Default(value);
}
function _parseReferencePatternProperties093Default(value: unknown): unknown {
return parseResponseValue(value);
}
export function parseResponsesX(value: unknown): unknown {
return _parseReferenceResponsesX(value);
}
function _parseReferenceResponsesX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseNot(value: unknown): unknown {
return _parseMapNot(value);
}
function _parseMapNot(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parseNotAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseResponseValueOneOf0(value: unknown): unknown {
return _parseReferenceResponseValueOneOf0(value);
}
function _parseReferenceResponseValueOneOf0(value: unknown): unknown {
return parseResponse(value);
}
export function parseResponseValueOneOf1(value: unknown): unknown {
return _parseReferenceResponseValueOneOf1(value);
}
function _parseReferenceResponseValueOneOf1(value: unknown): unknown {
return parseJsonReference(value);
}
export function parseResponsePropertiesDescription(value: unknown): unknown {
return _parseStringResponsePropertiesDescription(value);
}
function _parseStringResponsePropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseResponsePropertiesSchema(value: unknown): unknown {
return _parseOneOfResponsePropertiesSchema(value);
}
function _parseOneOfResponsePropertiesSchema(value: unknown): unknown {
return parseSchemaOneOf0(value) ?? parseSchemaOneOf1(value);
}
export function parsePropertiesHeaders(value: unknown): unknown {
return _parseReferencePropertiesHeaders(value);
}
function _parseReferencePropertiesHeaders(value: unknown): unknown {
return parseDefinitionsHeaders(value);
}
export function parsePropertiesExamples(value: unknown): unknown {
return _parseReferencePropertiesExamples(value);
}
function _parseReferencePropertiesExamples(value: unknown): unknown {
return parseDefinitionsExamples(value);
}
export function parseResponseAdditionalProperties(value: unknown): unknown {
return _parseNeverResponseAdditionalProperties(value);
}
function _parseNeverResponseAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseResponseX(value: unknown): unknown {
return _parseReferenceResponseX(value);
}
function _parseReferenceResponseX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseHeadersAdditionalProperties(value: unknown): unknown {
return _parseReferenceHeadersAdditionalProperties(value);
}
function _parseReferenceHeadersAdditionalProperties(value: unknown): unknown {
return parseHeader(value);
}
export function parseHeaderType(value: unknown): unknown {
return _parseStringHeaderType(value);
}
function _parseStringHeaderType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderFormat(value: unknown): unknown {
return _parseStringHeaderFormat(value);
}
function _parseStringHeaderFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderPropertiesItems(value: unknown): unknown {
return _parseReferenceHeaderPropertiesItems(value);
}
function _parseReferenceHeaderPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseHeaderPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferenceHeaderPropertiesCollectionFormat(value);
}
function _parseReferenceHeaderPropertiesCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parseHeaderPropertiesDefault(value: unknown): unknown {
return _parseReferenceHeaderPropertiesDefault(value);
}
function _parseReferenceHeaderPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseHeaderPropertiesMaximum(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMaximum(value);
}
function _parseReferenceHeaderPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseHeaderPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferenceHeaderPropertiesExclusiveMaximum(value);
}
function _parseReferenceHeaderPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseHeaderPropertiesMinimum(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMinimum(value);
}
function _parseReferenceHeaderPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseHeaderPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferenceHeaderPropertiesExclusiveMinimum(value);
}
function _parseReferenceHeaderPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseHeaderPropertiesMaxLength(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMaxLength(value);
}
function _parseReferenceHeaderPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseHeaderPropertiesMinLength(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMinLength(value);
}
function _parseReferenceHeaderPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseHeaderPropertiesPattern(value: unknown): unknown {
return _parseReferenceHeaderPropertiesPattern(value);
}
function _parseReferenceHeaderPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseHeaderPropertiesMaxItems(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMaxItems(value);
}
function _parseReferenceHeaderPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseHeaderPropertiesMinItems(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMinItems(value);
}
function _parseReferenceHeaderPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseHeaderPropertiesUniqueItems(value: unknown): unknown {
return _parseReferenceHeaderPropertiesUniqueItems(value);
}
function _parseReferenceHeaderPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseHeaderPropertiesEnum(value: unknown): unknown {
return _parseReferenceHeaderPropertiesEnum(value);
}
function _parseReferenceHeaderPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseHeaderPropertiesMultipleOf(value: unknown): unknown {
return _parseReferenceHeaderPropertiesMultipleOf(value);
}
function _parseReferenceHeaderPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseHeaderPropertiesDescription(value: unknown): unknown {
return _parseStringHeaderPropertiesDescription(value);
}
function _parseStringHeaderPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderAdditionalProperties(value);
}
function _parseNeverHeaderAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderX(value: unknown): unknown {
return _parseReferenceHeaderX(value);
}
function _parseReferenceHeaderX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseVendorExtensionAdditionalProperties(value: unknown): unknown {
return _parseAnyVendorExtensionAdditionalProperties(value);
}
function _parseAnyVendorExtensionAdditionalProperties(value: unknown): unknown {
return value;
}
export function parseVendorExtensionAdditionalItems(value: unknown): unknown {
return _parseAnyVendorExtensionAdditionalItems(value);
}
function _parseAnyVendorExtensionAdditionalItems(value: unknown): unknown {
return value;
}
export function parseBodyParameterPropertiesDescription(value: unknown): unknown {
return _parseStringBodyParameterPropertiesDescription(value);
}
function _parseStringBodyParameterPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterName(value: unknown): unknown {
return _parseStringBodyParameterName(value);
}
function _parseStringBodyParameterName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterIn(value: unknown): unknown {
return _parseStringBodyParameterIn(value);
}
function _parseStringBodyParameterIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBodyParameterRequired(value: unknown): unknown {
return _parseBooleanBodyParameterRequired(value);
}
function _parseBooleanBodyParameterRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseBodyParameterPropertiesSchema(value: unknown): unknown {
return _parseReferenceBodyParameterPropertiesSchema(value);
}
function _parseReferenceBodyParameterPropertiesSchema(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseBodyParameterAdditionalProperties(value: unknown): unknown {
return _parseNeverBodyParameterAdditionalProperties(value);
}
function _parseNeverBodyParameterAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseBodyParameterX(value: unknown): unknown {
return _parseReferenceBodyParameterX(value);
}
function _parseReferenceBodyParameterX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseHeaderParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanHeaderParameterSubSchemaRequired(value);
}
function _parseBooleanHeaderParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseHeaderParameterSubSchemaIn(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaIn(value);
}
function _parseStringHeaderParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaPropertiesDescription(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaPropertiesDescription(value);
}
function _parseStringHeaderParameterSubSchemaPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaName(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaName(value);
}
function _parseStringHeaderParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaType(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaType(value);
}
function _parseStringHeaderParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringHeaderParameterSubSchemaFormat(value);
}
function _parseStringHeaderParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseHeaderParameterSubSchemaPropertiesItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesItems(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseHeaderParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesCollectionFormat(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parseHeaderParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesDefault(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseHeaderParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMaximum(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseHeaderParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesExclusiveMaximum(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseHeaderParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMinimum(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseHeaderParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesExclusiveMinimum(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseHeaderParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMaxLength(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseHeaderParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMinLength(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseHeaderParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesPattern(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseHeaderParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMaxItems(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseHeaderParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMinItems(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseHeaderParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesUniqueItems(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseHeaderParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesEnum(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseHeaderParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaPropertiesMultipleOf(value);
}
function _parseReferenceHeaderParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseHeaderParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverHeaderParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverHeaderParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseHeaderParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceHeaderParameterSubSchemaX(value);
}
function _parseReferenceHeaderParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseQueryParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanQueryParameterSubSchemaRequired(value);
}
function _parseBooleanQueryParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseQueryParameterSubSchemaIn(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaIn(value);
}
function _parseStringQueryParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaPropertiesDescription(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaPropertiesDescription(value);
}
function _parseStringQueryParameterSubSchemaPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaName(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaName(value);
}
function _parseStringQueryParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
return _parseBooleanQueryParameterSubSchemaAllowEmptyValue(value);
}
function _parseBooleanQueryParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseQueryParameterSubSchemaType(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaType(value);
}
function _parseStringQueryParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringQueryParameterSubSchemaFormat(value);
}
function _parseStringQueryParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseQueryParameterSubSchemaPropertiesItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesItems(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseQueryParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesCollectionFormat(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return parseCollectionFormatWithMulti(value);
}
export function parseQueryParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesDefault(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseQueryParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMaximum(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseQueryParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesExclusiveMaximum(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseQueryParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMinimum(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseQueryParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesExclusiveMinimum(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseQueryParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMaxLength(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseQueryParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMinLength(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseQueryParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesPattern(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseQueryParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMaxItems(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseQueryParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMinItems(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseQueryParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesUniqueItems(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseQueryParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesEnum(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseQueryParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaPropertiesMultipleOf(value);
}
function _parseReferenceQueryParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseQueryParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverQueryParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverQueryParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseQueryParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceQueryParameterSubSchemaX(value);
}
function _parseReferenceQueryParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseFormDataParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanFormDataParameterSubSchemaRequired(value);
}
function _parseBooleanFormDataParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFormDataParameterSubSchemaIn(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaIn(value);
}
function _parseStringFormDataParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaPropertiesDescription(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaPropertiesDescription(value);
}
function _parseStringFormDataParameterSubSchemaPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaName(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaName(value);
}
function _parseStringFormDataParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
return _parseBooleanFormDataParameterSubSchemaAllowEmptyValue(value);
}
function _parseBooleanFormDataParameterSubSchemaAllowEmptyValue(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFormDataParameterSubSchemaType(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaType(value);
}
function _parseStringFormDataParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringFormDataParameterSubSchemaFormat(value);
}
function _parseStringFormDataParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFormDataParameterSubSchemaPropertiesItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesItems(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parseFormDataParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesCollectionFormat(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return parseCollectionFormatWithMulti(value);
}
export function parseFormDataParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesDefault(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parseFormDataParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMaximum(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parseFormDataParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesExclusiveMaximum(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parseFormDataParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMinimum(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parseFormDataParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesExclusiveMinimum(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parseFormDataParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMaxLength(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parseFormDataParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMinLength(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parseFormDataParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesPattern(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parseFormDataParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMaxItems(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parseFormDataParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMinItems(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parseFormDataParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesUniqueItems(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parseFormDataParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesEnum(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parseFormDataParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaPropertiesMultipleOf(value);
}
function _parseReferenceFormDataParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parseFormDataParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverFormDataParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverFormDataParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseFormDataParameterSubSchemaX(value: unknown): unknown {
return _parseReferenceFormDataParameterSubSchemaX(value);
}
function _parseReferenceFormDataParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePathParameterSubSchemaRequired(value: unknown): unknown {
return _parseBooleanPathParameterSubSchemaRequired(value);
}
function _parseBooleanPathParameterSubSchemaRequired(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePathParameterSubSchemaIn(value: unknown): unknown {
return _parseStringPathParameterSubSchemaIn(value);
}
function _parseStringPathParameterSubSchemaIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaPropertiesDescription(value: unknown): unknown {
return _parseStringPathParameterSubSchemaPropertiesDescription(value);
}
function _parseStringPathParameterSubSchemaPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaName(value: unknown): unknown {
return _parseStringPathParameterSubSchemaName(value);
}
function _parseStringPathParameterSubSchemaName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaType(value: unknown): unknown {
return _parseStringPathParameterSubSchemaType(value);
}
function _parseStringPathParameterSubSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaFormat(value: unknown): unknown {
return _parseStringPathParameterSubSchemaFormat(value);
}
function _parseStringPathParameterSubSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePathParameterSubSchemaPropertiesItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesItems(value);
}
function _parseReferencePathParameterSubSchemaPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parsePathParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesCollectionFormat(value);
}
function _parseReferencePathParameterSubSchemaPropertiesCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parsePathParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesDefault(value);
}
function _parseReferencePathParameterSubSchemaPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parsePathParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMaximum(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parsePathParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesExclusiveMaximum(value);
}
function _parseReferencePathParameterSubSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parsePathParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMinimum(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parsePathParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesExclusiveMinimum(value);
}
function _parseReferencePathParameterSubSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parsePathParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMaxLength(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parsePathParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMinLength(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parsePathParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesPattern(value);
}
function _parseReferencePathParameterSubSchemaPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parsePathParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMaxItems(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parsePathParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMinItems(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parsePathParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesUniqueItems(value);
}
function _parseReferencePathParameterSubSchemaPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parsePathParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesEnum(value);
}
function _parseReferencePathParameterSubSchemaPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parsePathParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaPropertiesMultipleOf(value);
}
function _parseReferencePathParameterSubSchemaPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parsePathParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverPathParameterSubSchemaAdditionalProperties(value);
}
function _parseNeverPathParameterSubSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePathParameterSubSchemaX(value: unknown): unknown {
return _parseReferencePathParameterSubSchemaX(value);
}
function _parseReferencePathParameterSubSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseNonBodyParameterOneOf0(value: unknown): unknown {
return _parseReferenceNonBodyParameterOneOf0(value);
}
function _parseReferenceNonBodyParameterOneOf0(value: unknown): unknown {
return parseHeaderParameterSubSchema(value);
}
export function parseNonBodyParameterOneOf1(value: unknown): unknown {
return _parseReferenceNonBodyParameterOneOf1(value);
}
function _parseReferenceNonBodyParameterOneOf1(value: unknown): unknown {
return parseFormDataParameterSubSchema(value);
}
export function parseNonBodyParameterOneOf2(value: unknown): unknown {
return _parseReferenceNonBodyParameterOneOf2(value);
}
function _parseReferenceNonBodyParameterOneOf2(value: unknown): unknown {
return parseQueryParameterSubSchema(value);
}
export function parseNonBodyParameterOneOf3(value: unknown): unknown {
return _parseReferenceNonBodyParameterOneOf3(value);
}
function _parseReferenceNonBodyParameterOneOf3(value: unknown): unknown {
return parsePathParameterSubSchema(value);
}
export function parseParameterOneOf0(value: unknown): unknown {
return _parseReferenceParameterOneOf0(value);
}
function _parseReferenceParameterOneOf0(value: unknown): unknown {
return parseBodyParameter(value);
}
export function parseParameterOneOf1(value: unknown): unknown {
return _parseReferenceParameterOneOf1(value);
}
function _parseReferenceParameterOneOf1(value: unknown): unknown {
return parseNonBodyParameter(value);
}
export function parseSchemaRef(value: unknown): unknown {
return _parseStringSchemaRef(value);
}
function _parseStringSchemaRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaFormat(value: unknown): unknown {
return _parseStringSchemaFormat(value);
}
function _parseStringSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDefinitionsSchemaPropertiesTitle(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesTitle(value);
}
function _parseReferenceDefinitionsSchemaPropertiesTitle(value: unknown): unknown {
return parseDraft04SchemaPropertiesTitle(value);
}
export function parseDefinitionsSchemaPropertiesDescription(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesDescription(value);
}
function _parseReferenceDefinitionsSchemaPropertiesDescription(value: unknown): unknown {
return parseDraft04SchemaPropertiesDescription(value);
}
export function parseDefinitionsSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesDefault(value);
}
function _parseReferenceDefinitionsSchemaPropertiesDefault(value: unknown): unknown {
return parseDraft04SchemaPropertiesDefault(value);
}
export function parseDefinitionsSchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesMultipleOf(value);
}
function _parseReferenceDefinitionsSchemaPropertiesMultipleOf(value: unknown): unknown {
return parseDraft04SchemaPropertiesMultipleOf(value);
}
export function parseDefinitionsSchemaPropertiesMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesMaximum(value);
}
function _parseReferenceDefinitionsSchemaPropertiesMaximum(value: unknown): unknown {
return parseDraft04SchemaPropertiesMaximum(value);
}
export function parseDefinitionsSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesExclusiveMaximum(value);
}
function _parseReferenceDefinitionsSchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDraft04SchemaPropertiesExclusiveMaximum(value);
}
export function parseDefinitionsSchemaPropertiesMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesMinimum(value);
}
function _parseReferenceDefinitionsSchemaPropertiesMinimum(value: unknown): unknown {
return parseDraft04SchemaPropertiesMinimum(value);
}
export function parseDefinitionsSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesExclusiveMinimum(value);
}
function _parseReferenceDefinitionsSchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDraft04SchemaPropertiesExclusiveMinimum(value);
}
export function parseSchemaPropertiesMaxLength(value: unknown): unknown {
return _parseReferenceSchemaPropertiesMaxLength(value);
}
function _parseReferenceSchemaPropertiesMaxLength(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseSchemaPropertiesMinLength(value: unknown): unknown {
return _parseReferenceSchemaPropertiesMinLength(value);
}
function _parseReferenceSchemaPropertiesMinLength(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsSchemaPropertiesPattern(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesPattern(value);
}
function _parseReferenceDefinitionsSchemaPropertiesPattern(value: unknown): unknown {
return parseDraft04SchemaPropertiesPattern(value);
}
export function parseSchemaPropertiesMaxItems(value: unknown): unknown {
return _parseReferenceSchemaPropertiesMaxItems(value);
}
function _parseReferenceSchemaPropertiesMaxItems(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseSchemaPropertiesMinItems(value: unknown): unknown {
return _parseReferenceSchemaPropertiesMinItems(value);
}
function _parseReferenceSchemaPropertiesMinItems(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseDefinitionsSchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesUniqueItems(value);
}
function _parseReferenceDefinitionsSchemaPropertiesUniqueItems(value: unknown): unknown {
return parseDraft04SchemaPropertiesUniqueItems(value);
}
export function parseMaxProperties(value: unknown): unknown {
return _parseReferenceMaxProperties(value);
}
function _parseReferenceMaxProperties(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseMinProperties(value: unknown): unknown {
return _parseReferenceMinProperties(value);
}
function _parseReferenceMinProperties(value: unknown): unknown {
return parsePositiveIntegerDefault0(value);
}
export function parseSchemaRequired(value: unknown): unknown {
return _parseReferenceSchemaRequired(value);
}
function _parseReferenceSchemaRequired(value: unknown): unknown {
return parseStringArray(value);
}
export function parseDefinitionsSchemaPropertiesEnum(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaPropertiesEnum(value);
}
function _parseReferenceDefinitionsSchemaPropertiesEnum(value: unknown): unknown {
return parseDraft04SchemaPropertiesEnum(value);
}
export function parseSchemaPropertiesAdditionalProperties(value: unknown): unknown {
return _parseAnyOfSchemaPropertiesAdditionalProperties(value);
}
function _parseAnyOfSchemaPropertiesAdditionalProperties(value: unknown): unknown {
return parseAdditionalPropertiesAnyOf0(value) ?? parseAdditionalPropertiesAnyOf1(value);
}
export function parseDefinitionsSchemaType(value: unknown): unknown {
return _parseReferenceDefinitionsSchemaType(value);
}
function _parseReferenceDefinitionsSchemaType(value: unknown): unknown {
return parseDraft04SchemaType(value);
}
export function parseSchemaPropertiesItems(value: unknown): unknown {
return _parseAnyOfSchemaPropertiesItems(value);
}
function _parseAnyOfSchemaPropertiesItems(value: unknown): unknown {
return parseItemsAnyOf0(value) ?? parseItemsAnyOf1(value);
}
export function parseAllOf(value: unknown): unknown {
return _parseArrayAllOf(value);
}
function _parseArrayAllOf(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAllOfItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseProperties(value: unknown): unknown {
return _parseMapProperties(value);
}
function _parseMapProperties(value: unknown): unknown {
if(typeof value === "object" && value !== null && !Array.isArray(value)) {
const result = {} as Record<string, unknown>;
for(const propertyName in value) {
result[propertyName] ??= parsePropertiesPropertiesAdditionalProperties(value[propertyName as keyof typeof value]);
}
return result;
}
return undefined;
}
export function parseDiscriminator(value: unknown): unknown {
return _parseStringDiscriminator(value);
}
function _parseStringDiscriminator(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseSchemaReadOnly(value: unknown): unknown {
return _parseBooleanSchemaReadOnly(value);
}
function _parseBooleanSchemaReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePropertiesXml(value: unknown): unknown {
return _parseReferencePropertiesXml(value);
}
function _parseReferencePropertiesXml(value: unknown): unknown {
return parseDefinitionsXml(value);
}
export function parseSchemaPropertiesExternalDocs(value: unknown): unknown {
return _parseReferenceSchemaPropertiesExternalDocs(value);
}
function _parseReferenceSchemaPropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseSchemaExample(value: unknown): unknown {
return ;
}
export function parseSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverSchemaAdditionalProperties(value);
}
function _parseNeverSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaX(value: unknown): unknown {
return _parseReferenceSchemaX(value);
}
function _parseReferenceSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseFileSchemaFormat(value: unknown): unknown {
return _parseStringFileSchemaFormat(value);
}
function _parseStringFileSchemaFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFileSchemaPropertiesTitle(value: unknown): unknown {
return _parseReferenceFileSchemaPropertiesTitle(value);
}
function _parseReferenceFileSchemaPropertiesTitle(value: unknown): unknown {
return parseDraft04SchemaPropertiesTitle(value);
}
export function parseFileSchemaPropertiesDescription(value: unknown): unknown {
return _parseReferenceFileSchemaPropertiesDescription(value);
}
function _parseReferenceFileSchemaPropertiesDescription(value: unknown): unknown {
return parseDraft04SchemaPropertiesDescription(value);
}
export function parseFileSchemaPropertiesDefault(value: unknown): unknown {
return _parseReferenceFileSchemaPropertiesDefault(value);
}
function _parseReferenceFileSchemaPropertiesDefault(value: unknown): unknown {
return parseDraft04SchemaPropertiesDefault(value);
}
export function parseFileSchemaRequired(value: unknown): unknown {
return _parseReferenceFileSchemaRequired(value);
}
function _parseReferenceFileSchemaRequired(value: unknown): unknown {
return parseStringArray(value);
}
export function parseFileSchemaType(value: unknown): unknown {
return _parseStringFileSchemaType(value);
}
function _parseStringFileSchemaType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseFileSchemaReadOnly(value: unknown): unknown {
return _parseBooleanFileSchemaReadOnly(value);
}
function _parseBooleanFileSchemaReadOnly(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseFileSchemaPropertiesExternalDocs(value: unknown): unknown {
return _parseReferenceFileSchemaPropertiesExternalDocs(value);
}
function _parseReferenceFileSchemaPropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseFileSchemaExample(value: unknown): unknown {
return ;
}
export function parseFileSchemaAdditionalProperties(value: unknown): unknown {
return _parseNeverFileSchemaAdditionalProperties(value);
}
function _parseNeverFileSchemaAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseFileSchemaX(value: unknown): unknown {
return _parseReferenceFileSchemaX(value);
}
function _parseReferenceFileSchemaX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parsePrimitivesItemsType(value: unknown): unknown {
return _parseStringPrimitivesItemsType(value);
}
function _parseStringPrimitivesItemsType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrimitivesItemsFormat(value: unknown): unknown {
return _parseStringPrimitivesItemsFormat(value);
}
function _parseStringPrimitivesItemsFormat(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrimitivesItemsPropertiesItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesItems(value);
}
function _parseReferencePrimitivesItemsPropertiesItems(value: unknown): unknown {
return parsePrimitivesItems(value);
}
export function parsePrimitivesItemsPropertiesCollectionFormat(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesCollectionFormat(value);
}
function _parseReferencePrimitivesItemsPropertiesCollectionFormat(value: unknown): unknown {
return parseDefinitionsCollectionFormat(value);
}
export function parsePrimitivesItemsPropertiesDefault(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesDefault(value);
}
function _parseReferencePrimitivesItemsPropertiesDefault(value: unknown): unknown {
return parseDefinitionsDefault(value);
}
export function parsePrimitivesItemsPropertiesMaximum(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMaximum(value);
}
function _parseReferencePrimitivesItemsPropertiesMaximum(value: unknown): unknown {
return parseDefinitionsMaximum(value);
}
export function parsePrimitivesItemsPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesExclusiveMaximum(value);
}
function _parseReferencePrimitivesItemsPropertiesExclusiveMaximum(value: unknown): unknown {
return parseDefinitionsExclusiveMaximum(value);
}
export function parsePrimitivesItemsPropertiesMinimum(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMinimum(value);
}
function _parseReferencePrimitivesItemsPropertiesMinimum(value: unknown): unknown {
return parseDefinitionsMinimum(value);
}
export function parsePrimitivesItemsPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesExclusiveMinimum(value);
}
function _parseReferencePrimitivesItemsPropertiesExclusiveMinimum(value: unknown): unknown {
return parseDefinitionsExclusiveMinimum(value);
}
export function parsePrimitivesItemsPropertiesMaxLength(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMaxLength(value);
}
function _parseReferencePrimitivesItemsPropertiesMaxLength(value: unknown): unknown {
return parseDefinitionsMaxLength(value);
}
export function parsePrimitivesItemsPropertiesMinLength(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMinLength(value);
}
function _parseReferencePrimitivesItemsPropertiesMinLength(value: unknown): unknown {
return parseDefinitionsMinLength(value);
}
export function parsePrimitivesItemsPropertiesPattern(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesPattern(value);
}
function _parseReferencePrimitivesItemsPropertiesPattern(value: unknown): unknown {
return parseDefinitionsPattern(value);
}
export function parsePrimitivesItemsPropertiesMaxItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMaxItems(value);
}
function _parseReferencePrimitivesItemsPropertiesMaxItems(value: unknown): unknown {
return parseDefinitionsMaxItems(value);
}
export function parsePrimitivesItemsPropertiesMinItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMinItems(value);
}
function _parseReferencePrimitivesItemsPropertiesMinItems(value: unknown): unknown {
return parseDefinitionsMinItems(value);
}
export function parsePrimitivesItemsPropertiesUniqueItems(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesUniqueItems(value);
}
function _parseReferencePrimitivesItemsPropertiesUniqueItems(value: unknown): unknown {
return parseDefinitionsUniqueItems(value);
}
export function parsePrimitivesItemsPropertiesEnum(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesEnum(value);
}
function _parseReferencePrimitivesItemsPropertiesEnum(value: unknown): unknown {
return parseDefinitionsEnum(value);
}
export function parsePrimitivesItemsPropertiesMultipleOf(value: unknown): unknown {
return _parseReferencePrimitivesItemsPropertiesMultipleOf(value);
}
function _parseReferencePrimitivesItemsPropertiesMultipleOf(value: unknown): unknown {
return parseDefinitionsMultipleOf(value);
}
export function parsePrimitivesItemsAdditionalProperties(value: unknown): unknown {
return _parseNeverPrimitivesItemsAdditionalProperties(value);
}
function _parseNeverPrimitivesItemsAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parsePrimitivesItemsX(value: unknown): unknown {
return _parseReferencePrimitivesItemsX(value);
}
function _parseReferencePrimitivesItemsX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseSecurityItems(value: unknown): unknown {
return _parseReferenceSecurityItems(value);
}
function _parseReferenceSecurityItems(value: unknown): unknown {
return parseSecurityRequirement(value);
}
export function parseSecurityRequirementAdditionalProperties(value: unknown): unknown {
return _parseArraySecurityRequirementAdditionalProperties(value);
}
function _parseArraySecurityRequirementAdditionalProperties(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseAdditionalPropertiesItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseXmlName(value: unknown): unknown {
return _parseStringXmlName(value);
}
function _parseStringXmlName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseNamespace(value: unknown): unknown {
return _parseStringNamespace(value);
}
function _parseStringNamespace(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parsePrefix(value: unknown): unknown {
return _parseStringPrefix(value);
}
function _parseStringPrefix(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAttribute(value: unknown): unknown {
return _parseBooleanAttribute(value);
}
function _parseBooleanAttribute(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseWrapped(value: unknown): unknown {
return _parseBooleanWrapped(value);
}
function _parseBooleanWrapped(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseXmlAdditionalProperties(value: unknown): unknown {
return _parseNeverXmlAdditionalProperties(value);
}
function _parseNeverXmlAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseXmlX(value: unknown): unknown {
return _parseReferenceXmlX(value);
}
function _parseReferenceXmlX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseTagName(value: unknown): unknown {
return _parseStringTagName(value);
}
function _parseStringTagName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagPropertiesDescription(value: unknown): unknown {
return _parseStringTagPropertiesDescription(value);
}
function _parseStringTagPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseTagPropertiesExternalDocs(value: unknown): unknown {
return _parseReferenceTagPropertiesExternalDocs(value);
}
function _parseReferenceTagPropertiesExternalDocs(value: unknown): unknown {
return parseDefinitionsExternalDocs(value);
}
export function parseTagAdditionalProperties(value: unknown): unknown {
return _parseNeverTagAdditionalProperties(value);
}
function _parseNeverTagAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseTagX(value: unknown): unknown {
return _parseReferenceTagX(value);
}
function _parseReferenceTagX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseSecurityDefinitionsAdditionalProperties(value: unknown): unknown {
return _parseOneOfSecurityDefinitionsAdditionalProperties(value);
}
function _parseOneOfSecurityDefinitionsAdditionalProperties(value: unknown): unknown {
return parseAdditionalPropertiesOneOf0(value) ?? parseAdditionalPropertiesOneOf1(value) ?? parseAdditionalPropertiesOneOf2(value) ?? parseAdditionalPropertiesOneOf3(value) ?? parseOneOf4(value) ?? parseOneOf5(value);
}
export function parseBasicAuthenticationSecurityType(value: unknown): unknown {
return _parseStringBasicAuthenticationSecurityType(value);
}
function _parseStringBasicAuthenticationSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasicAuthenticationSecurityPropertiesDescription(value: unknown): unknown {
return _parseStringBasicAuthenticationSecurityPropertiesDescription(value);
}
function _parseStringBasicAuthenticationSecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseBasicAuthenticationSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverBasicAuthenticationSecurityAdditionalProperties(value);
}
function _parseNeverBasicAuthenticationSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseBasicAuthenticationSecurityX(value: unknown): unknown {
return _parseReferenceBasicAuthenticationSecurityX(value);
}
function _parseReferenceBasicAuthenticationSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseApiKeySecurityType(value: unknown): unknown {
return _parseStringApiKeySecurityType(value);
}
function _parseStringApiKeySecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityName(value: unknown): unknown {
return _parseStringApiKeySecurityName(value);
}
function _parseStringApiKeySecurityName(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityIn(value: unknown): unknown {
return _parseStringApiKeySecurityIn(value);
}
function _parseStringApiKeySecurityIn(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityPropertiesDescription(value: unknown): unknown {
return _parseStringApiKeySecurityPropertiesDescription(value);
}
function _parseStringApiKeySecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseApiKeySecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverApiKeySecurityAdditionalProperties(value);
}
function _parseNeverApiKeySecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseApiKeySecurityX(value: unknown): unknown {
return _parseReferenceApiKeySecurityX(value);
}
function _parseReferenceApiKeySecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ImplicitSecurityType(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityType(value);
}
function _parseStringOauth2ImplicitSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityFlow(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityFlow(value);
}
function _parseStringOauth2ImplicitSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2ImplicitSecurityScopes(value);
}
function _parseReferenceOauth2ImplicitSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2ImplicitSecurityAuthorizationUrl(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityAuthorizationUrl(value);
}
function _parseStringOauth2ImplicitSecurityAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityPropertiesDescription(value: unknown): unknown {
return _parseStringOauth2ImplicitSecurityPropertiesDescription(value);
}
function _parseStringOauth2ImplicitSecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ImplicitSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2ImplicitSecurityAdditionalProperties(value);
}
function _parseNeverOauth2ImplicitSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2ImplicitSecurityX(value: unknown): unknown {
return _parseReferenceOauth2ImplicitSecurityX(value);
}
function _parseReferenceOauth2ImplicitSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2PasswordSecurityType(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityType(value);
}
function _parseStringOauth2PasswordSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityFlow(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityFlow(value);
}
function _parseStringOauth2PasswordSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2PasswordSecurityScopes(value);
}
function _parseReferenceOauth2PasswordSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2PasswordSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityTokenUrl(value);
}
function _parseStringOauth2PasswordSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityPropertiesDescription(value: unknown): unknown {
return _parseStringOauth2PasswordSecurityPropertiesDescription(value);
}
function _parseStringOauth2PasswordSecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2PasswordSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2PasswordSecurityAdditionalProperties(value);
}
function _parseNeverOauth2PasswordSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2PasswordSecurityX(value: unknown): unknown {
return _parseReferenceOauth2PasswordSecurityX(value);
}
function _parseReferenceOauth2PasswordSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ApplicationSecurityType(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityType(value);
}
function _parseStringOauth2ApplicationSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityFlow(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityFlow(value);
}
function _parseStringOauth2ApplicationSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2ApplicationSecurityScopes(value);
}
function _parseReferenceOauth2ApplicationSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2ApplicationSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityTokenUrl(value);
}
function _parseStringOauth2ApplicationSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityPropertiesDescription(value: unknown): unknown {
return _parseStringOauth2ApplicationSecurityPropertiesDescription(value);
}
function _parseStringOauth2ApplicationSecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2ApplicationSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2ApplicationSecurityAdditionalProperties(value);
}
function _parseNeverOauth2ApplicationSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2ApplicationSecurityX(value: unknown): unknown {
return _parseReferenceOauth2ApplicationSecurityX(value);
}
function _parseReferenceOauth2ApplicationSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2AccessCodeSecurityType(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityType(value);
}
function _parseStringOauth2AccessCodeSecurityType(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityFlow(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityFlow(value);
}
function _parseStringOauth2AccessCodeSecurityFlow(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityScopes(value: unknown): unknown {
return _parseReferenceOauth2AccessCodeSecurityScopes(value);
}
function _parseReferenceOauth2AccessCodeSecurityScopes(value: unknown): unknown {
return parseOauth2Scopes(value);
}
export function parseOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityAuthorizationUrl(value);
}
function _parseStringOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityTokenUrl(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityTokenUrl(value);
}
function _parseStringOauth2AccessCodeSecurityTokenUrl(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityPropertiesDescription(value: unknown): unknown {
return _parseStringOauth2AccessCodeSecurityPropertiesDescription(value);
}
function _parseStringOauth2AccessCodeSecurityPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOauth2AccessCodeSecurityAdditionalProperties(value: unknown): unknown {
return _parseNeverOauth2AccessCodeSecurityAdditionalProperties(value);
}
function _parseNeverOauth2AccessCodeSecurityAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseOauth2AccessCodeSecurityX(value: unknown): unknown {
return _parseReferenceOauth2AccessCodeSecurityX(value);
}
function _parseReferenceOauth2AccessCodeSecurityX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseOauth2ScopesAdditionalProperties(value: unknown): unknown {
return _parseStringOauth2ScopesAdditionalProperties(value);
}
function _parseStringOauth2ScopesAdditionalProperties(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseMediaTypeListItems(value: unknown): unknown {
return _parseReferenceMediaTypeListItems(value);
}
function _parseReferenceMediaTypeListItems(value: unknown): unknown {
return parseMimeType(value);
}
export function parseParametersListItems(value: unknown): unknown {
return _parseOneOfParametersListItems(value);
}
function _parseOneOfParametersListItems(value: unknown): unknown {
return parseItemsOneOf0(value) ?? parseItemsOneOf1(value);
}
export function parseParametersListAdditionalItems(value: unknown): unknown {
return _parseNeverParametersListAdditionalItems(value);
}
function _parseNeverParametersListAdditionalItems(value: unknown): unknown {
return undefined;
}
export function parseSchemesListItems(value: unknown): unknown {
return _parseStringSchemesListItems(value);
}
function _parseStringSchemesListItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseJsonReferenceRef(value: unknown): unknown {
return _parseStringJsonReferenceRef(value);
}
function _parseStringJsonReferenceRef(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseJsonReferenceAdditionalProperties(value: unknown): unknown {
return _parseNeverJsonReferenceAdditionalProperties(value);
}
function _parseNeverJsonReferenceAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseSchemaJsonConsumesAllOf0(value: unknown): unknown {
return _parseReferenceSchemaJsonConsumesAllOf0(value);
}
function _parseReferenceSchemaJsonConsumesAllOf0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseSchemaJsonProducesAllOf0(value: unknown): unknown {
return _parseReferenceSchemaJsonProducesAllOf0(value);
}
function _parseReferenceSchemaJsonProducesAllOf0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseSchemaJsonTagsItems(value: unknown): unknown {
return _parseReferenceSchemaJsonTagsItems(value);
}
function _parseReferenceSchemaJsonTagsItems(value: unknown): unknown {
return parseTag(value);
}
export function parseOperationTagsItems(value: unknown): unknown {
return _parseStringOperationTagsItems(value);
}
function _parseStringOperationTagsItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseOperationProducesAllOf0(value: unknown): unknown {
return _parseReferenceOperationProducesAllOf0(value);
}
function _parseReferenceOperationProducesAllOf0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseOperationConsumesAllOf0(value: unknown): unknown {
return _parseReferenceOperationConsumesAllOf0(value);
}
function _parseReferenceOperationConsumesAllOf0(value: unknown): unknown {
return parseMediaTypeList(value);
}
export function parseNotAdditionalProperties(value: unknown): unknown {
return _parseNeverNotAdditionalProperties(value);
}
function _parseNeverNotAdditionalProperties(value: unknown): unknown {
return undefined;
}
export function parseNotX(value: unknown): unknown {
return _parseReferenceNotX(value);
}
function _parseReferenceNotX(value: unknown): unknown {
return parseVendorExtension(value);
}
export function parseSchemaOneOf0(value: unknown): unknown {
return _parseReferenceSchemaOneOf0(value);
}
function _parseReferenceSchemaOneOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseSchemaOneOf1(value: unknown): unknown {
return _parseReferenceSchemaOneOf1(value);
}
function _parseReferenceSchemaOneOf1(value: unknown): unknown {
return parseFileSchema(value);
}
export function parseAdditionalPropertiesAnyOf0(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesAnyOf0(value);
}
function _parseReferenceAdditionalPropertiesAnyOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAdditionalPropertiesAnyOf1(value: unknown): unknown {
return _parseBooleanAdditionalPropertiesAnyOf1(value);
}
function _parseBooleanAdditionalPropertiesAnyOf1(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseItemsAnyOf0(value: unknown): unknown {
return _parseReferenceItemsAnyOf0(value);
}
function _parseReferenceItemsAnyOf0(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseItemsAnyOf1(value: unknown): unknown {
return _parseArrayItemsAnyOf1(value);
}
function _parseArrayItemsAnyOf1(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseItemsAnyOf1Items(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseAllOfItems(value: unknown): unknown {
return _parseReferenceAllOfItems(value);
}
function _parseReferenceAllOfItems(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parsePropertiesPropertiesAdditionalProperties(value: unknown): unknown {
return _parseReferencePropertiesPropertiesAdditionalProperties(value);
}
function _parseReferencePropertiesPropertiesAdditionalProperties(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseAdditionalPropertiesItems(value: unknown): unknown {
return _parseStringAdditionalPropertiesItems(value);
}
function _parseStringAdditionalPropertiesItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseAdditionalPropertiesOneOf0(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesOneOf0(value);
}
function _parseReferenceAdditionalPropertiesOneOf0(value: unknown): unknown {
return parseBasicAuthenticationSecurity(value);
}
export function parseAdditionalPropertiesOneOf1(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesOneOf1(value);
}
function _parseReferenceAdditionalPropertiesOneOf1(value: unknown): unknown {
return parseApiKeySecurity(value);
}
export function parseAdditionalPropertiesOneOf2(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesOneOf2(value);
}
function _parseReferenceAdditionalPropertiesOneOf2(value: unknown): unknown {
return parseOauth2ImplicitSecurity(value);
}
export function parseAdditionalPropertiesOneOf3(value: unknown): unknown {
return _parseReferenceAdditionalPropertiesOneOf3(value);
}
function _parseReferenceAdditionalPropertiesOneOf3(value: unknown): unknown {
return parseOauth2PasswordSecurity(value);
}
export function parseOneOf4(value: unknown): unknown {
return _parseReferenceOneOf4(value);
}
function _parseReferenceOneOf4(value: unknown): unknown {
return parseOauth2ApplicationSecurity(value);
}
export function parseOneOf5(value: unknown): unknown {
return _parseReferenceOneOf5(value);
}
function _parseReferenceOneOf5(value: unknown): unknown {
return parseOauth2AccessCodeSecurity(value);
}
export function parseItemsOneOf0(value: unknown): unknown {
return _parseReferenceItemsOneOf0(value);
}
function _parseReferenceItemsOneOf0(value: unknown): unknown {
return parseParameter(value);
}
export function parseItemsOneOf1(value: unknown): unknown {
return _parseReferenceItemsOneOf1(value);
}
function _parseReferenceItemsOneOf1(value: unknown): unknown {
return parseJsonReference(value);
}
export function parseItemsAnyOf1Items(value: unknown): unknown {
return _parseReferenceItemsAnyOf1Items(value);
}
function _parseReferenceItemsAnyOf1Items(value: unknown): unknown {
return parseDefinitionsSchema(value);
}
export function parseDraft04SchemaPropertiesTitle(value: unknown): unknown {
return _parseStringDraft04SchemaPropertiesTitle(value);
}
function _parseStringDraft04SchemaPropertiesTitle(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04SchemaPropertiesDescription(value: unknown): unknown {
return _parseStringDraft04SchemaPropertiesDescription(value);
}
function _parseStringDraft04SchemaPropertiesDescription(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04SchemaPropertiesDefault(value: unknown): unknown {
return ;
}
export function parseDraft04SchemaPropertiesMultipleOf(value: unknown): unknown {
return _parseNumberDraft04SchemaPropertiesMultipleOf(value);
}
function _parseNumberDraft04SchemaPropertiesMultipleOf(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04SchemaPropertiesMaximum(value: unknown): unknown {
return _parseNumberDraft04SchemaPropertiesMaximum(value);
}
function _parseNumberDraft04SchemaPropertiesMaximum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04SchemaPropertiesExclusiveMaximum(value: unknown): unknown {
return _parseBooleanDraft04SchemaPropertiesExclusiveMaximum(value);
}
function _parseBooleanDraft04SchemaPropertiesExclusiveMaximum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDraft04SchemaPropertiesMinimum(value: unknown): unknown {
return _parseNumberDraft04SchemaPropertiesMinimum(value);
}
function _parseNumberDraft04SchemaPropertiesMinimum(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parseDraft04SchemaPropertiesExclusiveMinimum(value: unknown): unknown {
return _parseBooleanDraft04SchemaPropertiesExclusiveMinimum(value);
}
function _parseBooleanDraft04SchemaPropertiesExclusiveMinimum(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parsePositiveInteger(value: unknown): unknown {
return _parseIntegerPositiveInteger(value);
}
function _parseIntegerPositiveInteger(value: unknown): unknown {
switch(typeof value) {
case "string":
return Number(value);
case "number":
return value;
case "boolean":
return value ? 1 : 0;
}
return undefined;
}
export function parsePositiveIntegerDefault0(value: unknown): unknown {
return _parseAllOfPositiveIntegerDefault0(value);
}
function _parseAllOfPositiveIntegerDefault0(value: unknown): unknown {
return parsePositiveIntegerDefault0AllOf0(value) ?? parseAllOf1(value);
}
export function parsePositiveIntegerDefault0AllOf0(value: unknown): unknown {
return _parseReferencePositiveIntegerDefault0AllOf0(value);
}
function _parseReferencePositiveIntegerDefault0AllOf0(value: unknown): unknown {
return parsePositiveInteger(value);
}
export function parseAllOf1(value: unknown): unknown {
return ;
}
export function parseDraft04SchemaPropertiesPattern(value: unknown): unknown {
return _parseStringDraft04SchemaPropertiesPattern(value);
}
function _parseStringDraft04SchemaPropertiesPattern(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04SchemaPropertiesUniqueItems(value: unknown): unknown {
return _parseBooleanDraft04SchemaPropertiesUniqueItems(value);
}
function _parseBooleanDraft04SchemaPropertiesUniqueItems(value: unknown): unknown {
if(value == null) {
return false;
}
switch(typeof value) {
case "string":
switch(value.trim()) {
case "":
case "no":
case "off":
case "false":
case "0":
return false;
default:
return true;
}
case "number":
return Boolean(value);
case "boolean":
return value;
}
return undefined;
}
export function parseDraft04SchemaPropertiesEnum(value: unknown): unknown {
return _parseArrayDraft04SchemaPropertiesEnum(value);
}
function _parseArrayDraft04SchemaPropertiesEnum(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = value[elementIndex];
}
return result;
}
return undefined;
}
export function parseStringArray(value: unknown): unknown {
return _parseArrayStringArray(value);
}
function _parseArrayStringArray(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseStringArrayItems(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseStringArrayItems(value: unknown): unknown {
return _parseStringStringArrayItems(value);
}
function _parseStringStringArrayItems(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
export function parseDraft04SchemaType(value: unknown): unknown {
return _parseAnyOfDraft04SchemaType(value);
}
function _parseAnyOfDraft04SchemaType(value: unknown): unknown {
return parseTypeAnyOf0(value) ?? parseTypeAnyOf1(value);
}
export function parseTypeAnyOf0(value: unknown): unknown {
return _parseReferenceTypeAnyOf0(value);
}
function _parseReferenceTypeAnyOf0(value: unknown): unknown {
return parseSimpleTypes(value);
}
export function parseTypeAnyOf1(value: unknown): unknown {
return _parseArrayTypeAnyOf1(value);
}
function _parseArrayTypeAnyOf1(value: unknown): unknown {
if(Array.isArray(value)) {
const result = new Array<unknown>(value.length);
for(let elementIndex = 0; elementIndex < value.length; elementIndex++) {
result[elementIndex] = parseTypeAnyOf1Items(value[elementIndex]);
}
return result;
}
return undefined;
}
export function parseTypeAnyOf1Items(value: unknown): unknown {
return _parseReferenceTypeAnyOf1Items(value);
}
function _parseReferenceTypeAnyOf1Items(value: unknown): unknown {
return parseSimpleTypes(value);
}
export function parseSimpleTypes(value: unknown): unknown {
return _parseStringSimpleTypes(value);
}
function _parseStringSimpleTypes(value: unknown): unknown {
switch(typeof value) {
case "string":
return value;
case "number":
case "boolean":
return String(value);
default:
return undefined;
}
}
