// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.10                        -- www.JsonSchema42.org
//
import * as types from "./types.js";
export interface ValidationError {
path: string;
rule: string;
typeName?: string;
}
const pathPartStack = new Array<string>();
const typeNameStack = new Array<string>();
let errors = new Array<ValidationError>();
let depth = 0;
export function getValidationErrors() {
return errors;
}
export function getLastValidationError() {
if(errors.length === 0) {
throw new TypeError("no validation errors");
}
return errors[errors.length - 1];
}
function withPath<T>(pathPart: string, job: () => T): T {
pathPartStack.push(pathPart);
try {
return job();
}
finally {
pathPartStack.pop();
}
}
function withType<T>(typeName: string, job: () => T): T {
if(typeNameStack.length === 0) {
resetErrors();
}
typeNameStack.push(typeName);
try {
return job();
}
finally {
typeNameStack.pop();
}
}
function resetErrors() {
errors = [];
}
function recordError(rule: string) {
errors.push({
path: pathPartStack.join("/"),
typeName: typeNameStack[typeNameStack.length - 1],
rule,
})
}
/**
* @summary A JSON Schema for Swagger 2.0 API.
* @see {@link http://swagger.io/v2/schema.json#}
*/
export function isSchemaJson(value: unknown): value is types.SchemaJson {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaJson", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("swagger" in value) ||
value["swagger"] === undefined
) {
recordError("required");
return false;
}
if(
!("info" in value) ||
value["info"] === undefined
) {
recordError("required");
return false;
}
if(
!("paths" in value) ||
value["paths"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "swagger":
if(!withPath(propertyName, () => {
if(!isSwagger(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "info":
if(!withPath(propertyName, () => {
if(!isPropertiesInfo(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "host":
if(!withPath(propertyName, () => {
if(!isHost(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "basePath":
if(!withPath(propertyName, () => {
if(!isBasePath(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schemes":
if(!withPath(propertyName, () => {
if(!isPropertiesSchemes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "consumes":
if(!withPath(propertyName, () => {
if(!isPropertiesConsumes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "produces":
if(!withPath(propertyName, () => {
if(!isPropertiesProduces(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "paths":
if(!withPath(propertyName, () => {
if(!isPropertiesPaths(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "definitions":
if(!withPath(propertyName, () => {
if(!isPropertiesDefinitions(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isPropertiesParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "responses":
if(!withPath(propertyName, () => {
if(!isPropertiesResponses(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "security":
if(!withPath(propertyName, () => {
if(!isPropertiesSecurity(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "securityDefinitions":
if(!withPath(propertyName, () => {
if(!isPropertiesSecurityDefinitions(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tags":
if(!withPath(propertyName, () => {
if(!isPropertiesTags(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isPropertiesExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isV2PatternPropertiesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isV2AdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description General information about the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info}
*/
export function isDefinitionsInfo(value: unknown): value is types.DefinitionsInfo {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsInfo", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("version" in value) ||
value["version"] === undefined
) {
recordError("required");
return false;
}
if(
!("title" in value) ||
value["title"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "title":
if(!withPath(propertyName, () => {
if(!isInfoTitle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "version":
if(!withPath(propertyName, () => {
if(!isVersion(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isInfoDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "termsOfService":
if(!withPath(propertyName, () => {
if(!isTermsOfService(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "contact":
if(!withPath(propertyName, () => {
if(!isInfoContact(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "license":
if(!withPath(propertyName, () => {
if(!isInfoLicense(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isInfoX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isInfoAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Contact information for the owners of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact}
*/
export function isDefinitionsContact(value: unknown): value is types.DefinitionsContact {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsContact", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isContactName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isContactUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "email":
if(!withPath(propertyName, () => {
if(!isEmail(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isContactX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isContactAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license}
*/
export function isDefinitionsLicense(value: unknown): value is types.DefinitionsLicense {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsLicense", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isLicenseName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isLicenseUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isLicenseX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isLicenseAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Relative paths to the individual endpoints. They must be relative to the &apos;basePath&apos;.
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths}
*/
export function isDefinitionsPaths(value: unknown): value is types.DefinitionsPaths {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsPaths", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isPathsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(new RegExp("^/").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isPatternProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isPathsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description One or more JSON objects describing the schemas being consumed and produced by the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/definitions}
*/
export function isDefinitionsDefinitions(value: unknown): value is types.DefinitionsDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsDefinitions", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isDefinitionsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description One or more JSON representations for parameters
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameterDefinitions}
*/
export function isParameterDefinitions(value: unknown): value is types.ParameterDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterDefinitions", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isParameterDefinitionsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description One or more JSON representations for parameters
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseDefinitions}
*/
export function isResponseDefinitions(value: unknown): value is types.ResponseDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseDefinitions", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isResponseDefinitionsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description information about external documentation
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs}
*/
export function isDefinitionsExternalDocs(value: unknown): value is types.DefinitionsExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsExternalDocs", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("url" in value) ||
value["url"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isExternalDocsDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "url":
if(!withPath(propertyName, () => {
if(!isExternalDocsUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isExternalDocsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isExternalDocsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/examples}
*/
export function isDefinitionsExamples(value: unknown): value is types.DefinitionsExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsExamples", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isExamplesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The MIME type of the HTTP message.
* @see {@link http://swagger.io/v2/schema.json#/definitions/mimeType}
*/
export function isMimeType(value: unknown): value is types.MimeType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MimeType", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation}
*/
export function isOperation(value: unknown): value is types.Operation {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Operation", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("responses" in value) ||
value["responses"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "tags":
if(!withPath(propertyName, () => {
if(!isOperationTags(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "summary":
if(!withPath(propertyName, () => {
if(!isSummary(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOperationDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isOperationExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "operationId":
if(!withPath(propertyName, () => {
if(!isOperationId(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "produces":
if(!withPath(propertyName, () => {
if(!isOperationProduces(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "consumes":
if(!withPath(propertyName, () => {
if(!isOperationConsumes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isOperationParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "responses":
if(!withPath(propertyName, () => {
if(!isOperationResponses(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schemes":
if(!withPath(propertyName, () => {
if(!isOperationSchemes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "deprecated":
if(!withPath(propertyName, () => {
if(!isDeprecated(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "security":
if(!withPath(propertyName, () => {
if(!isOperationSecurity(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isOperationX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isOperationAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem}
*/
export function isPathItem(value: unknown): value is types.PathItem {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItem", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$ref":
if(!withPath(propertyName, () => {
if(!isPathItemRef(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "get":
if(!withPath(propertyName, () => {
if(!isGet(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "put":
if(!withPath(propertyName, () => {
if(!isPut(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "post":
if(!withPath(propertyName, () => {
if(!isPost(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "delete":
if(!withPath(propertyName, () => {
if(!isDelete(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "options":
if(!withPath(propertyName, () => {
if(!isOptions(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "head":
if(!withPath(propertyName, () => {
if(!isHead(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "patch":
if(!withPath(propertyName, () => {
if(!isPatch(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "parameters":
if(!withPath(propertyName, () => {
if(!isPathItemParameters(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isPathItemX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isPathItemAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Response objects names can either be any valid HTTP status code or &apos;default&apos;.
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses}
*/
export function isDefinitionsResponses(value: unknown): value is types.DefinitionsResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsResponses", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
let propertyCount = 0;
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
propertyCount++;
switch(propertyName) {
default:
if(new RegExp("^([0-9]{3})$|^(default)$").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isResponses093Default(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isResponsesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isResponsesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
if(propertyCount < 1) {
recordError("minimumProperties");
return false;
}
}
if(isNot(value)) {
recordError("not");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue}
*/
export function isResponseValue(value: unknown): value is types.ResponseValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseValue", () => {
{
let counter = 0;
if(counter < 2 && isResponseValue0(value)) {
counter += 1;
}
if(counter < 2 && isResponseValue1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response}
*/
export function isResponse(value: unknown): value is types.Response {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Response", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("description" in value) ||
value["description"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isResponseDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schema":
if(!withPath(propertyName, () => {
if(!isResponseSchema(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "headers":
if(!withPath(propertyName, () => {
if(!isResponseHeaders(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "examples":
if(!withPath(propertyName, () => {
if(!isResponseExamples(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isResponseX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isResponseAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headers}
*/
export function isDefinitionsHeaders(value: unknown): value is types.DefinitionsHeaders {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsHeaders", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isHeadersAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header}
*/
export function isHeader(value: unknown): value is types.Header {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Header", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isHeaderType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isHeaderFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isHeaderItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isHeaderCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isHeaderDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isHeaderMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isHeaderExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isHeaderMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isHeaderExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isHeaderMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isHeaderMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isHeaderPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isHeaderMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isHeaderMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isHeaderUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isHeaderEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isHeaderMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isHeaderDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isHeaderX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isHeaderAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Any property starting with x- is valid.
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension}
*/
export function isVendorExtension(value: unknown): value is types.VendorExtension {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("VendorExtension", () => {
if(
Array.isArray(value)
) {
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isVendorExtensionAdditionalItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isVendorExtensionAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter}
*/
export function isBodyParameter(value: unknown): value is types.BodyParameter {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameter", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
if(
!("in" in value) ||
value["in"] === undefined
) {
recordError("required");
return false;
}
if(
!("schema" in value) ||
value["schema"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "description":
if(!withPath(propertyName, () => {
if(!isBodyParameterDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isBodyParameterName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isBodyParameterIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isBodyParameterRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "schema":
if(!withPath(propertyName, () => {
if(!isBodyParameterSchema(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isBodyParameterX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isBodyParameterAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema}
*/
export function isHeaderParameterSubSchema(value: unknown): value is types.HeaderParameterSubSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchema", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "required":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isHeaderParameterSubSchemaMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isHeaderParameterSubSchemaX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isHeaderParameterSubSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema}
*/
export function isQueryParameterSubSchema(value: unknown): value is types.QueryParameterSubSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchema", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "required":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowEmptyValue":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaAllowEmptyValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isQueryParameterSubSchemaMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isQueryParameterSubSchemaX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isQueryParameterSubSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema}
*/
export function isFormDataParameterSubSchema(value: unknown): value is types.FormDataParameterSubSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchema", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "required":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allowEmptyValue":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaAllowEmptyValue(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isFormDataParameterSubSchemaMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isFormDataParameterSubSchemaX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isFormDataParameterSubSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema}
*/
export function isPathParameterSubSchema(value: unknown): value is types.PathParameterSubSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchema", () => {
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("required" in value) ||
value["required"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "required":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isPathParameterSubSchemaMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isPathParameterSubSchemaX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isPathParameterSubSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter}
*/
export function isNonBodyParameter(value: unknown): value is types.NonBodyParameter {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NonBodyParameter", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
if(
!("in" in value) ||
value["in"] === undefined
) {
recordError("required");
return false;
}
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
break;
}
}
}
{
let counter = 0;
if(counter < 2 && isNonBodyParameter0(value)) {
counter += 1;
}
if(counter < 2 && isNonBodyParameter1(value)) {
counter += 1;
}
if(counter < 2 && isNonBodyParameter2(value)) {
counter += 1;
}
if(counter < 2 && isNonBodyParameter3(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter}
*/
export function isParameter(value: unknown): value is types.Parameter {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter", () => {
{
let counter = 0;
if(counter < 2 && isParameter0(value)) {
counter += 1;
}
if(counter < 2 && isParameter1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A deterministic version of a JSON Schema object.
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema}
*/
export function isDefinitionsSchema(value: unknown): value is types.DefinitionsSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSchema", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$ref":
if(!withPath(propertyName, () => {
if(!isSchemaRef(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "title":
if(!withPath(propertyName, () => {
if(!isSchemaTitle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isSchemaMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isSchemaMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isSchemaExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isSchemaMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isSchemaExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isSchemaMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isSchemaMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isSchemaPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isSchemaMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isSchemaMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isSchemaUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxProperties":
if(!withPath(propertyName, () => {
if(!isMaxProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minProperties":
if(!withPath(propertyName, () => {
if(!isMinProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isSchemaEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "additionalProperties":
if(!withPath(propertyName, () => {
if(!isPropertiesSchemaAdditionalProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isSchemaItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "allOf":
if(!withPath(propertyName, () => {
if(!isAllOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "properties":
if(!withPath(propertyName, () => {
if(!isProperties(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "discriminator":
if(!withPath(propertyName, () => {
if(!isDiscriminator(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "readOnly":
if(!withPath(propertyName, () => {
if(!isSchemaReadOnly(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "xml":
if(!withPath(propertyName, () => {
if(!isSchemaXml(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isSchemaExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isSchemaExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isSchemaPatternPropertiesX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isDefinitionsSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A deterministic version of a JSON Schema object.
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema}
*/
export function isFileSchema(value: unknown): value is types.FileSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchema", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "format":
if(!withPath(propertyName, () => {
if(!isFileSchemaFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "title":
if(!withPath(propertyName, () => {
if(!isFileSchemaTitle(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isFileSchemaDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isFileSchemaDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "required":
if(!withPath(propertyName, () => {
if(!isFileSchemaRequired(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "type":
if(!withPath(propertyName, () => {
if(!isFileSchemaType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "readOnly":
if(!withPath(propertyName, () => {
if(!isFileSchemaReadOnly(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isFileSchemaExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "example":
if(!withPath(propertyName, () => {
if(!isFileSchemaExample(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isFileSchemaX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isFileSchemaAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems}
*/
export function isPrimitivesItems(value: unknown): value is types.PrimitivesItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItems", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "format":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "items":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "collectionFormat":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsCollectionFormat(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "default":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsDefault(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maximum":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMaximum":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsExclusiveMaximum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minimum":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "exclusiveMinimum":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsExclusiveMinimum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxLength":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMaxLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minLength":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMinLength(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "pattern":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsPattern(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "maxItems":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMaxItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "minItems":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMinItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "uniqueItems":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsUniqueItems(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "enum":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsEnum(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "multipleOf":
if(!withPath(propertyName, () => {
if(!isPrimitivesItemsMultipleOf(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isPrimitivesItemsX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isPrimitivesItemsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/security}
*/
export function isDefinitionsSecurity(value: unknown): value is types.DefinitionsSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSecurity", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isSecurityItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement}
*/
export function isSecurityRequirement(value: unknown): value is types.SecurityRequirement {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirement", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isSecurityRequirementAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml}
*/
export function isDefinitionsXml(value: unknown): value is types.DefinitionsXml {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsXml", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isXmlName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "namespace":
if(!withPath(propertyName, () => {
if(!isNamespace(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "prefix":
if(!withPath(propertyName, () => {
if(!isPrefix(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "attribute":
if(!withPath(propertyName, () => {
if(!isAttribute(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "wrapped":
if(!withPath(propertyName, () => {
if(!isWrapped(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isXmlX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isXmlAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag}
*/
export function isTag(value: unknown): value is types.Tag {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Tag", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "name":
if(!withPath(propertyName, () => {
if(!isTagName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isTagDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "externalDocs":
if(!withPath(propertyName, () => {
if(!isTagExternalDocs(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isTagX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isTagAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions}
*/
export function isDefinitionsSecurityDefinitions(value: unknown): value is types.DefinitionsSecurityDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSecurityDefinitions", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isSecurityDefinitionsAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity}
*/
export function isBasicAuthenticationSecurity(value: unknown): value is types.BasicAuthenticationSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasicAuthenticationSecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isBasicAuthenticationSecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isBasicAuthenticationSecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isBasicAuthenticationSecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isBasicAuthenticationSecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity}
*/
export function isApiKeySecurity(value: unknown): value is types.ApiKeySecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("name" in value) ||
value["name"] === undefined
) {
recordError("required");
return false;
}
if(
!("in" in value) ||
value["in"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isApiKeySecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "name":
if(!withPath(propertyName, () => {
if(!isApiKeySecurityName(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "in":
if(!withPath(propertyName, () => {
if(!isApiKeySecurityIn(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isApiKeySecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isApiKeySecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isApiKeySecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity}
*/
export function isOauth2ImplicitSecurity(value: unknown): value is types.Oauth2ImplicitSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("flow" in value) ||
value["flow"] === undefined
) {
recordError("required");
return false;
}
if(
!("authorizationUrl" in value) ||
value["authorizationUrl"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOauth2ImplicitSecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "flow":
if(!withPath(propertyName, () => {
if(!isOauth2ImplicitSecurityFlow(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isOauth2ImplicitSecurityScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "authorizationUrl":
if(!withPath(propertyName, () => {
if(!isOauth2ImplicitSecurityAuthorizationUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOauth2ImplicitSecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isOauth2ImplicitSecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isOauth2ImplicitSecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity}
*/
export function isOauth2PasswordSecurity(value: unknown): value is types.Oauth2PasswordSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("flow" in value) ||
value["flow"] === undefined
) {
recordError("required");
return false;
}
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOauth2PasswordSecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "flow":
if(!withPath(propertyName, () => {
if(!isOauth2PasswordSecurityFlow(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isOauth2PasswordSecurityScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isOauth2PasswordSecurityTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOauth2PasswordSecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isOauth2PasswordSecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isOauth2PasswordSecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity}
*/
export function isOauth2ApplicationSecurity(value: unknown): value is types.Oauth2ApplicationSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("flow" in value) ||
value["flow"] === undefined
) {
recordError("required");
return false;
}
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOauth2ApplicationSecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "flow":
if(!withPath(propertyName, () => {
if(!isOauth2ApplicationSecurityFlow(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isOauth2ApplicationSecurityScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isOauth2ApplicationSecurityTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOauth2ApplicationSecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isOauth2ApplicationSecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isOauth2ApplicationSecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity}
*/
export function isOauth2AccessCodeSecurity(value: unknown): value is types.Oauth2AccessCodeSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurity", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("type" in value) ||
value["type"] === undefined
) {
recordError("required");
return false;
}
if(
!("flow" in value) ||
value["flow"] === undefined
) {
recordError("required");
return false;
}
if(
!("authorizationUrl" in value) ||
value["authorizationUrl"] === undefined
) {
recordError("required");
return false;
}
if(
!("tokenUrl" in value) ||
value["tokenUrl"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "type":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityType(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "flow":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityFlow(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "scopes":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityScopes(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "authorizationUrl":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityAuthorizationUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "tokenUrl":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityTokenUrl(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
case "description":
if(!withPath(propertyName, () => {
if(!isOauth2AccessCodeSecurityDescription(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isOauth2AccessCodeSecurityX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isOauth2AccessCodeSecurityAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes}
*/
export function isOauth2Scopes(value: unknown): value is types.Oauth2Scopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2Scopes", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isOauth2ScopesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/mediaTypeList}
*/
export function isMediaTypeList(value: unknown): value is types.MediaTypeList {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeList", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isMediaTypeListItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The parameters needed to send a valid API call.
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList}
*/
export function isParametersList(value: unknown): value is types.ParametersList {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersList", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isParametersListItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The transfer protocol of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/schemesList}
*/
export function isSchemesList(value: unknown): value is types.SchemesList {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemesList", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isSchemesListItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormat}
*/
export function isDefinitionsCollectionFormat(value: unknown): value is types.DefinitionsCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsCollectionFormat", () => {
if(
value !== "csv" &&
value !== "ssv" &&
value !== "tsv" &&
value !== "pipes"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormatWithMulti}
*/
export function isCollectionFormatWithMulti(value: unknown): value is types.CollectionFormatWithMulti {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("CollectionFormatWithMulti", () => {
if(
value !== "csv" &&
value !== "ssv" &&
value !== "tsv" &&
value !== "pipes" &&
value !== "multi"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/title}
*/
export function isDefinitionsTitle(value: unknown): value is types.DefinitionsTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsTitle", () => {
if(!isDraft04Title(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/description}
*/
export function isDefinitionsDescription(value: unknown): value is types.DefinitionsDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsDescription", () => {
if(!isDraft04Description(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/default}
*/
export function isDefinitionsDefault(value: unknown): value is types.DefinitionsDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsDefault", () => {
if(!isDraft04Default(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/multipleOf}
*/
export function isDefinitionsMultipleOf(value: unknown): value is types.DefinitionsMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMultipleOf", () => {
if(!isDraft04MultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maximum}
*/
export function isDefinitionsMaximum(value: unknown): value is types.DefinitionsMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMaximum", () => {
if(!isDraft04Maximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMaximum}
*/
export function isDefinitionsExclusiveMaximum(value: unknown): value is types.DefinitionsExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsExclusiveMaximum", () => {
if(!isDraft04ExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minimum}
*/
export function isDefinitionsMinimum(value: unknown): value is types.DefinitionsMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMinimum", () => {
if(!isDraft04Minimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMinimum}
*/
export function isDefinitionsExclusiveMinimum(value: unknown): value is types.DefinitionsExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsExclusiveMinimum", () => {
if(!isDraft04ExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxLength}
*/
export function isDefinitionsMaxLength(value: unknown): value is types.DefinitionsMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMaxLength", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minLength}
*/
export function isDefinitionsMinLength(value: unknown): value is types.DefinitionsMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMinLength", () => {
if(!isPositiveIntegerDefault0(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pattern}
*/
export function isDefinitionsPattern(value: unknown): value is types.DefinitionsPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsPattern", () => {
if(!isDraft04Pattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxItems}
*/
export function isDefinitionsMaxItems(value: unknown): value is types.DefinitionsMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMaxItems", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minItems}
*/
export function isDefinitionsMinItems(value: unknown): value is types.DefinitionsMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsMinItems", () => {
if(!isPositiveIntegerDefault0(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/uniqueItems}
*/
export function isDefinitionsUniqueItems(value: unknown): value is types.DefinitionsUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsUniqueItems", () => {
if(!isDraft04UniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/enum}
*/
export function isDefinitionsEnum(value: unknown): value is types.DefinitionsEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsEnum", () => {
if(!isDraft04Enum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference}
*/
export function isJsonReference(value: unknown): value is types.JsonReference {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("JsonReference", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
if(
!("$ref" in value) ||
value["$ref"] === undefined
) {
recordError("required");
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
case "$ref":
if(!withPath(propertyName, () => {
if(!isJsonReferenceRef(propertyValue)) {
recordError("objectProperties");
return false;
}
return true;
})) {
return false
}
break;
default:
if(!withPath(propertyName, () => {
if(
!isJsonReferenceAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The Swagger version of this document.
* @see {@link http://swagger.io/v2/schema.json#/properties/swagger}
*/
export function isSwagger(value: unknown): value is types.Swagger {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Swagger", () => {
if(
value !== "2.0"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/info}
*/
export function isPropertiesInfo(value: unknown): value is types.PropertiesInfo {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesInfo", () => {
if(!isDefinitionsInfo(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The host (name or ip) of the API. Example: &apos;swagger.io&apos;
* @see {@link http://swagger.io/v2/schema.json#/properties/host}
*/
export function isHost(value: unknown): value is types.Host {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Host", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
if(
typeof value === "string"
) {
if(
!new RegExp("^[^{}/ :\\\\]+(?::\\d+)?$").test(value)
) {
recordError("valuePattern");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The base path to the API. Example: &apos;/api&apos;.
* @see {@link http://swagger.io/v2/schema.json#/properties/basePath}
*/
export function isBasePath(value: unknown): value is types.BasePath {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasePath", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
if(
typeof value === "string"
) {
if(
!new RegExp("^/").test(value)
) {
recordError("valuePattern");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/schemes}
*/
export function isPropertiesSchemes(value: unknown): value is types.PropertiesSchemes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSchemes", () => {
if(!isSchemesList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A list of MIME types accepted by the API.
* @see {@link http://swagger.io/v2/schema.json#/properties/consumes}
*/
export function isPropertiesConsumes(value: unknown): value is types.PropertiesConsumes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesConsumes", () => {
{
let counter = 0;
if(counter === 0 && isPropertiesAllOfConsumes0(value)) {
counter += 1;
}
if(counter < 1) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A list of MIME types the API can produce.
* @see {@link http://swagger.io/v2/schema.json#/properties/produces}
*/
export function isPropertiesProduces(value: unknown): value is types.PropertiesProduces {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesProduces", () => {
{
let counter = 0;
if(counter === 0 && isPropertiesAllOfProduces0(value)) {
counter += 1;
}
if(counter < 1) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/paths}
*/
export function isPropertiesPaths(value: unknown): value is types.PropertiesPaths {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesPaths", () => {
if(!isDefinitionsPaths(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/definitions}
*/
export function isPropertiesDefinitions(value: unknown): value is types.PropertiesDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesDefinitions", () => {
if(!isDefinitionsDefinitions(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/parameters}
*/
export function isPropertiesParameters(value: unknown): value is types.PropertiesParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesParameters", () => {
if(!isParameterDefinitions(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/responses}
*/
export function isPropertiesResponses(value: unknown): value is types.PropertiesResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesResponses", () => {
if(!isResponseDefinitions(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/security}
*/
export function isPropertiesSecurity(value: unknown): value is types.PropertiesSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSecurity", () => {
if(!isDefinitionsSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/securityDefinitions}
*/
export function isPropertiesSecurityDefinitions(value: unknown): value is types.PropertiesSecurityDefinitions {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSecurityDefinitions", () => {
if(!isDefinitionsSecurityDefinitions(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/tags}
*/
export function isPropertiesTags(value: unknown): value is types.PropertiesTags {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesTags", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isPropertiesTagsItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/externalDocs}
*/
export function isPropertiesExternalDocs(value: unknown): value is types.PropertiesExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesExternalDocs", () => {
if(!isDefinitionsExternalDocs(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/additionalProperties}
*/
export function isV2AdditionalProperties(value: unknown): value is types.V2AdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("V2AdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/patternProperties/^x-}
*/
export function isV2PatternPropertiesX(value: unknown): value is types.V2PatternPropertiesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("V2PatternPropertiesX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A unique and precise title of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/title}
*/
export function isInfoTitle(value: unknown): value is types.InfoTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoTitle", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A semantic version number of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/version}
*/
export function isVersion(value: unknown): value is types.Version {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Version", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/description}
*/
export function isInfoDescription(value: unknown): value is types.InfoDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The terms of service for the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/termsOfService}
*/
export function isTermsOfService(value: unknown): value is types.TermsOfService {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TermsOfService", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/contact}
*/
export function isInfoContact(value: unknown): value is types.InfoContact {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoContact", () => {
if(!isDefinitionsContact(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/license}
*/
export function isInfoLicense(value: unknown): value is types.InfoLicense {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoLicense", () => {
if(!isDefinitionsLicense(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/additionalProperties}
*/
export function isInfoAdditionalProperties(value: unknown): value is types.InfoAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/patternProperties/^x-}
*/
export function isInfoX(value: unknown): value is types.InfoX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("InfoX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The identifying name of the contact person/organization.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/name}
*/
export function isContactName(value: unknown): value is types.ContactName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The URL pointing to the contact information.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/url}
*/
export function isContactUrl(value: unknown): value is types.ContactUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The email address of the contact person/organization.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/email}
*/
export function isEmail(value: unknown): value is types.Email {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Email", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/additionalProperties}
*/
export function isContactAdditionalProperties(value: unknown): value is types.ContactAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/patternProperties/^x-}
*/
export function isContactX(value: unknown): value is types.ContactX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ContactX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the license type. It&apos;s encouraged to use an OSI compatible license.
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/properties/name}
*/
export function isLicenseName(value: unknown): value is types.LicenseName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The URL pointing to the license.
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/properties/url}
*/
export function isLicenseUrl(value: unknown): value is types.LicenseUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/additionalProperties}
*/
export function isLicenseAdditionalProperties(value: unknown): value is types.LicenseAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/patternProperties/^x-}
*/
export function isLicenseX(value: unknown): value is types.LicenseX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("LicenseX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/additionalProperties}
*/
export function isPathsAdditionalProperties(value: unknown): value is types.PathsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^x-}
*/
export function isPathsX(value: unknown): value is types.PathsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathsX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^/}
*/
export function isPatternProperties(value: unknown): value is types.PatternProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PatternProperties", () => {
if(!isPathItem(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/definitions/additionalProperties}
*/
export function isDefinitionsAdditionalProperties(value: unknown): value is types.DefinitionsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsAdditionalProperties", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameterDefinitions/additionalProperties}
*/
export function isParameterDefinitionsAdditionalProperties(value: unknown): value is types.ParameterDefinitionsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParameterDefinitionsAdditionalProperties", () => {
if(!isParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseDefinitions/additionalProperties}
*/
export function isResponseDefinitionsAdditionalProperties(value: unknown): value is types.ResponseDefinitionsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseDefinitionsAdditionalProperties", () => {
if(!isResponse(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/description}
*/
export function isExternalDocsDescription(value: unknown): value is types.ExternalDocsDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocsDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/url}
*/
export function isExternalDocsUrl(value: unknown): value is types.ExternalDocsUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocsUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/additionalProperties}
*/
export function isExternalDocsAdditionalProperties(value: unknown): value is types.ExternalDocsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/patternProperties/^x-}
*/
export function isExternalDocsX(value: unknown): value is types.ExternalDocsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExternalDocsX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/examples/additionalProperties}
*/
export function isExamplesAdditionalProperties(value: unknown): value is types.ExamplesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ExamplesAdditionalProperties", () => {
if(!((true))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/tags}
*/
export function isOperationTags(value: unknown): value is types.OperationTags {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationTags", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isOperationTagsItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief summary of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/summary}
*/
export function isSummary(value: unknown): value is types.Summary {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Summary", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A longer description of the operation, GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/description}
*/
export function isOperationDescription(value: unknown): value is types.OperationDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/externalDocs}
*/
export function isOperationExternalDocs(value: unknown): value is types.OperationExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationExternalDocs", () => {
if(!isDefinitionsExternalDocs(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A unique identifier of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/operationId}
*/
export function isOperationId(value: unknown): value is types.OperationId {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationId", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A list of MIME types the API can produce.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/produces}
*/
export function isOperationProduces(value: unknown): value is types.OperationProduces {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationProduces", () => {
{
let counter = 0;
if(counter === 0 && isOperationAllOfProduces0(value)) {
counter += 1;
}
if(counter < 1) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A list of MIME types the API can consume.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes}
*/
export function isOperationConsumes(value: unknown): value is types.OperationConsumes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationConsumes", () => {
{
let counter = 0;
if(counter === 0 && isOperationAllOfConsumes0(value)) {
counter += 1;
}
if(counter < 1) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/parameters}
*/
export function isOperationParameters(value: unknown): value is types.OperationParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationParameters", () => {
if(!isParametersList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/responses}
*/
export function isOperationResponses(value: unknown): value is types.OperationResponses {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationResponses", () => {
if(!isDefinitionsResponses(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/schemes}
*/
export function isOperationSchemes(value: unknown): value is types.OperationSchemes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationSchemes", () => {
if(!isSchemesList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/deprecated}
*/
export function isDeprecated(value: unknown): value is types.Deprecated {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Deprecated", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/security}
*/
export function isOperationSecurity(value: unknown): value is types.OperationSecurity {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationSecurity", () => {
if(!isDefinitionsSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/additionalProperties}
*/
export function isOperationAdditionalProperties(value: unknown): value is types.OperationAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/patternProperties/^x-}
*/
export function isOperationX(value: unknown): value is types.OperationX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/$ref}
*/
export function isPathItemRef(value: unknown): value is types.PathItemRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/get}
*/
export function isGet(value: unknown): value is types.Get {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Get", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/put}
*/
export function isPut(value: unknown): value is types.Put {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Put", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/post}
*/
export function isPost(value: unknown): value is types.Post {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Post", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/delete}
*/
export function isDelete(value: unknown): value is types.Delete {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Delete", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/options}
*/
export function isOptions(value: unknown): value is types.Options {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Options", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/head}
*/
export function isHead(value: unknown): value is types.Head {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Head", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/patch}
*/
export function isPatch(value: unknown): value is types.Patch {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Patch", () => {
if(!isOperation(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/parameters}
*/
export function isPathItemParameters(value: unknown): value is types.PathItemParameters {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemParameters", () => {
if(!isParametersList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/additionalProperties}
*/
export function isPathItemAdditionalProperties(value: unknown): value is types.PathItemAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/patternProperties/^x-}
*/
export function isPathItemX(value: unknown): value is types.PathItemX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathItemX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/additionalProperties}
*/
export function isResponsesAdditionalProperties(value: unknown): value is types.ResponsesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^([0-9]{3})$|^(default)$}
*/
export function isResponses093Default(value: unknown): value is types.Responses093Default {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Responses093Default", () => {
if(!isResponseValue(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^x-}
*/
export function isResponsesX(value: unknown): value is types.ResponsesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponsesX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not}
*/
export function isNot(value: unknown): value is types.Not {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Not", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(new RegExp("^x-").test(propertyName)) {
if(!withPath(propertyName, () => {
if(
!isNotX(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
continue;
}
if(!withPath(propertyName, () => {
if(
!isNotAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/0}
*/
export function isResponseValue0(value: unknown): value is types.ResponseValue0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseValue0", () => {
if(!isResponse(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/1}
*/
export function isResponseValue1(value: unknown): value is types.ResponseValue1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseValue1", () => {
if(!isJsonReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/description}
*/
export function isResponseDescription(value: unknown): value is types.ResponseDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema}
*/
export function isResponseSchema(value: unknown): value is types.ResponseSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseSchema", () => {
{
let counter = 0;
if(counter < 2 && isResponse0(value)) {
counter += 1;
}
if(counter < 2 && isResponse1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/headers}
*/
export function isResponseHeaders(value: unknown): value is types.ResponseHeaders {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseHeaders", () => {
if(!isDefinitionsHeaders(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/examples}
*/
export function isResponseExamples(value: unknown): value is types.ResponseExamples {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseExamples", () => {
if(!isDefinitionsExamples(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/additionalProperties}
*/
export function isResponseAdditionalProperties(value: unknown): value is types.ResponseAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/patternProperties/^x-}
*/
export function isResponseX(value: unknown): value is types.ResponseX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ResponseX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headers/additionalProperties}
*/
export function isHeadersAdditionalProperties(value: unknown): value is types.HeadersAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeadersAdditionalProperties", () => {
if(!isHeader(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/type}
*/
export function isHeaderType(value: unknown): value is types.HeaderType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "integer" &&
value !== "boolean" &&
value !== "array"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/format}
*/
export function isHeaderFormat(value: unknown): value is types.HeaderFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/items}
*/
export function isHeaderItems(value: unknown): value is types.HeaderItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/collectionFormat}
*/
export function isHeaderCollectionFormat(value: unknown): value is types.HeaderCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderCollectionFormat", () => {
if(!isDefinitionsCollectionFormat(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/default}
*/
export function isHeaderDefault(value: unknown): value is types.HeaderDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maximum}
*/
export function isHeaderMaximum(value: unknown): value is types.HeaderMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMaximum}
*/
export function isHeaderExclusiveMaximum(value: unknown): value is types.HeaderExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minimum}
*/
export function isHeaderMinimum(value: unknown): value is types.HeaderMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMinimum}
*/
export function isHeaderExclusiveMinimum(value: unknown): value is types.HeaderExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxLength}
*/
export function isHeaderMaxLength(value: unknown): value is types.HeaderMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minLength}
*/
export function isHeaderMinLength(value: unknown): value is types.HeaderMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/pattern}
*/
export function isHeaderPattern(value: unknown): value is types.HeaderPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxItems}
*/
export function isHeaderMaxItems(value: unknown): value is types.HeaderMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minItems}
*/
export function isHeaderMinItems(value: unknown): value is types.HeaderMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/uniqueItems}
*/
export function isHeaderUniqueItems(value: unknown): value is types.HeaderUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/enum}
*/
export function isHeaderEnum(value: unknown): value is types.HeaderEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/multipleOf}
*/
export function isHeaderMultipleOf(value: unknown): value is types.HeaderMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/description}
*/
export function isHeaderDescription(value: unknown): value is types.HeaderDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/additionalProperties}
*/
export function isHeaderAdditionalProperties(value: unknown): value is types.HeaderAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/patternProperties/^x-}
*/
export function isHeaderX(value: unknown): value is types.HeaderX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalProperties}
*/
export function isVendorExtensionAdditionalProperties(value: unknown): value is types.VendorExtensionAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("VendorExtensionAdditionalProperties", () => {
if(!((true))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalItems}
*/
export function isVendorExtensionAdditionalItems(value: unknown): value is types.VendorExtensionAdditionalItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("VendorExtensionAdditionalItems", () => {
if(!((true))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/description}
*/
export function isBodyParameterDescription(value: unknown): value is types.BodyParameterDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/name}
*/
export function isBodyParameterName(value: unknown): value is types.BodyParameterName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/in}
*/
export function isBodyParameterIn(value: unknown): value is types.BodyParameterIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterIn", () => {
if(
value !== "body"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/required}
*/
export function isBodyParameterRequired(value: unknown): value is types.BodyParameterRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/schema}
*/
export function isBodyParameterSchema(value: unknown): value is types.BodyParameterSchema {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterSchema", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/additionalProperties}
*/
export function isBodyParameterAdditionalProperties(value: unknown): value is types.BodyParameterAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/patternProperties/^x-}
*/
export function isBodyParameterX(value: unknown): value is types.BodyParameterX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BodyParameterX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/required}
*/
export function isHeaderParameterSubSchemaRequired(value: unknown): value is types.HeaderParameterSubSchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/in}
*/
export function isHeaderParameterSubSchemaIn(value: unknown): value is types.HeaderParameterSubSchemaIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaIn", () => {
if(
value !== "header"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/description}
*/
export function isHeaderParameterSubSchemaDescription(value: unknown): value is types.HeaderParameterSubSchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/name}
*/
export function isHeaderParameterSubSchemaName(value: unknown): value is types.HeaderParameterSubSchemaName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/type}
*/
export function isHeaderParameterSubSchemaType(value: unknown): value is types.HeaderParameterSubSchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "boolean" &&
value !== "integer" &&
value !== "array"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/format}
*/
export function isHeaderParameterSubSchemaFormat(value: unknown): value is types.HeaderParameterSubSchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/items}
*/
export function isHeaderParameterSubSchemaItems(value: unknown): value is types.HeaderParameterSubSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/collectionFormat}
*/
export function isHeaderParameterSubSchemaCollectionFormat(value: unknown): value is types.HeaderParameterSubSchemaCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaCollectionFormat", () => {
if(!isDefinitionsCollectionFormat(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/default}
*/
export function isHeaderParameterSubSchemaDefault(value: unknown): value is types.HeaderParameterSubSchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maximum}
*/
export function isHeaderParameterSubSchemaMaximum(value: unknown): value is types.HeaderParameterSubSchemaMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMaximum}
*/
export function isHeaderParameterSubSchemaExclusiveMaximum(value: unknown): value is types.HeaderParameterSubSchemaExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minimum}
*/
export function isHeaderParameterSubSchemaMinimum(value: unknown): value is types.HeaderParameterSubSchemaMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMinimum}
*/
export function isHeaderParameterSubSchemaExclusiveMinimum(value: unknown): value is types.HeaderParameterSubSchemaExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxLength}
*/
export function isHeaderParameterSubSchemaMaxLength(value: unknown): value is types.HeaderParameterSubSchemaMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minLength}
*/
export function isHeaderParameterSubSchemaMinLength(value: unknown): value is types.HeaderParameterSubSchemaMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/pattern}
*/
export function isHeaderParameterSubSchemaPattern(value: unknown): value is types.HeaderParameterSubSchemaPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxItems}
*/
export function isHeaderParameterSubSchemaMaxItems(value: unknown): value is types.HeaderParameterSubSchemaMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minItems}
*/
export function isHeaderParameterSubSchemaMinItems(value: unknown): value is types.HeaderParameterSubSchemaMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/uniqueItems}
*/
export function isHeaderParameterSubSchemaUniqueItems(value: unknown): value is types.HeaderParameterSubSchemaUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/enum}
*/
export function isHeaderParameterSubSchemaEnum(value: unknown): value is types.HeaderParameterSubSchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/multipleOf}
*/
export function isHeaderParameterSubSchemaMultipleOf(value: unknown): value is types.HeaderParameterSubSchemaMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/additionalProperties}
*/
export function isHeaderParameterSubSchemaAdditionalProperties(value: unknown): value is types.HeaderParameterSubSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/patternProperties/^x-}
*/
export function isHeaderParameterSubSchemaX(value: unknown): value is types.HeaderParameterSubSchemaX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("HeaderParameterSubSchemaX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/required}
*/
export function isQueryParameterSubSchemaRequired(value: unknown): value is types.QueryParameterSubSchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/in}
*/
export function isQueryParameterSubSchemaIn(value: unknown): value is types.QueryParameterSubSchemaIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaIn", () => {
if(
value !== "query"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/description}
*/
export function isQueryParameterSubSchemaDescription(value: unknown): value is types.QueryParameterSubSchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/name}
*/
export function isQueryParameterSubSchemaName(value: unknown): value is types.QueryParameterSubSchemaName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/allowEmptyValue}
*/
export function isQueryParameterSubSchemaAllowEmptyValue(value: unknown): value is types.QueryParameterSubSchemaAllowEmptyValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaAllowEmptyValue", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/type}
*/
export function isQueryParameterSubSchemaType(value: unknown): value is types.QueryParameterSubSchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "boolean" &&
value !== "integer" &&
value !== "array"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/format}
*/
export function isQueryParameterSubSchemaFormat(value: unknown): value is types.QueryParameterSubSchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/items}
*/
export function isQueryParameterSubSchemaItems(value: unknown): value is types.QueryParameterSubSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/collectionFormat}
*/
export function isQueryParameterSubSchemaCollectionFormat(value: unknown): value is types.QueryParameterSubSchemaCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaCollectionFormat", () => {
if(!isCollectionFormatWithMulti(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/default}
*/
export function isQueryParameterSubSchemaDefault(value: unknown): value is types.QueryParameterSubSchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maximum}
*/
export function isQueryParameterSubSchemaMaximum(value: unknown): value is types.QueryParameterSubSchemaMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMaximum}
*/
export function isQueryParameterSubSchemaExclusiveMaximum(value: unknown): value is types.QueryParameterSubSchemaExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minimum}
*/
export function isQueryParameterSubSchemaMinimum(value: unknown): value is types.QueryParameterSubSchemaMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMinimum}
*/
export function isQueryParameterSubSchemaExclusiveMinimum(value: unknown): value is types.QueryParameterSubSchemaExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxLength}
*/
export function isQueryParameterSubSchemaMaxLength(value: unknown): value is types.QueryParameterSubSchemaMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minLength}
*/
export function isQueryParameterSubSchemaMinLength(value: unknown): value is types.QueryParameterSubSchemaMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/pattern}
*/
export function isQueryParameterSubSchemaPattern(value: unknown): value is types.QueryParameterSubSchemaPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxItems}
*/
export function isQueryParameterSubSchemaMaxItems(value: unknown): value is types.QueryParameterSubSchemaMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minItems}
*/
export function isQueryParameterSubSchemaMinItems(value: unknown): value is types.QueryParameterSubSchemaMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/uniqueItems}
*/
export function isQueryParameterSubSchemaUniqueItems(value: unknown): value is types.QueryParameterSubSchemaUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/enum}
*/
export function isQueryParameterSubSchemaEnum(value: unknown): value is types.QueryParameterSubSchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/multipleOf}
*/
export function isQueryParameterSubSchemaMultipleOf(value: unknown): value is types.QueryParameterSubSchemaMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/additionalProperties}
*/
export function isQueryParameterSubSchemaAdditionalProperties(value: unknown): value is types.QueryParameterSubSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/patternProperties/^x-}
*/
export function isQueryParameterSubSchemaX(value: unknown): value is types.QueryParameterSubSchemaX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("QueryParameterSubSchemaX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/required}
*/
export function isFormDataParameterSubSchemaRequired(value: unknown): value is types.FormDataParameterSubSchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaRequired", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/in}
*/
export function isFormDataParameterSubSchemaIn(value: unknown): value is types.FormDataParameterSubSchemaIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaIn", () => {
if(
value !== "formData"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/description}
*/
export function isFormDataParameterSubSchemaDescription(value: unknown): value is types.FormDataParameterSubSchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/name}
*/
export function isFormDataParameterSubSchemaName(value: unknown): value is types.FormDataParameterSubSchemaName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/allowEmptyValue}
*/
export function isFormDataParameterSubSchemaAllowEmptyValue(value: unknown): value is types.FormDataParameterSubSchemaAllowEmptyValue {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaAllowEmptyValue", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/type}
*/
export function isFormDataParameterSubSchemaType(value: unknown): value is types.FormDataParameterSubSchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "boolean" &&
value !== "integer" &&
value !== "array" &&
value !== "file"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/format}
*/
export function isFormDataParameterSubSchemaFormat(value: unknown): value is types.FormDataParameterSubSchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/items}
*/
export function isFormDataParameterSubSchemaItems(value: unknown): value is types.FormDataParameterSubSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/collectionFormat}
*/
export function isFormDataParameterSubSchemaCollectionFormat(value: unknown): value is types.FormDataParameterSubSchemaCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaCollectionFormat", () => {
if(!isCollectionFormatWithMulti(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/default}
*/
export function isFormDataParameterSubSchemaDefault(value: unknown): value is types.FormDataParameterSubSchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maximum}
*/
export function isFormDataParameterSubSchemaMaximum(value: unknown): value is types.FormDataParameterSubSchemaMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMaximum}
*/
export function isFormDataParameterSubSchemaExclusiveMaximum(value: unknown): value is types.FormDataParameterSubSchemaExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minimum}
*/
export function isFormDataParameterSubSchemaMinimum(value: unknown): value is types.FormDataParameterSubSchemaMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMinimum}
*/
export function isFormDataParameterSubSchemaExclusiveMinimum(value: unknown): value is types.FormDataParameterSubSchemaExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxLength}
*/
export function isFormDataParameterSubSchemaMaxLength(value: unknown): value is types.FormDataParameterSubSchemaMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minLength}
*/
export function isFormDataParameterSubSchemaMinLength(value: unknown): value is types.FormDataParameterSubSchemaMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/pattern}
*/
export function isFormDataParameterSubSchemaPattern(value: unknown): value is types.FormDataParameterSubSchemaPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxItems}
*/
export function isFormDataParameterSubSchemaMaxItems(value: unknown): value is types.FormDataParameterSubSchemaMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minItems}
*/
export function isFormDataParameterSubSchemaMinItems(value: unknown): value is types.FormDataParameterSubSchemaMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/uniqueItems}
*/
export function isFormDataParameterSubSchemaUniqueItems(value: unknown): value is types.FormDataParameterSubSchemaUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/enum}
*/
export function isFormDataParameterSubSchemaEnum(value: unknown): value is types.FormDataParameterSubSchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/multipleOf}
*/
export function isFormDataParameterSubSchemaMultipleOf(value: unknown): value is types.FormDataParameterSubSchemaMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/additionalProperties}
*/
export function isFormDataParameterSubSchemaAdditionalProperties(value: unknown): value is types.FormDataParameterSubSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/patternProperties/^x-}
*/
export function isFormDataParameterSubSchemaX(value: unknown): value is types.FormDataParameterSubSchemaX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FormDataParameterSubSchemaX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/required}
*/
export function isPathParameterSubSchemaRequired(value: unknown): value is types.PathParameterSubSchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaRequired", () => {
if(
value !== true
) {
recordError("options");
return false;
}
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/in}
*/
export function isPathParameterSubSchemaIn(value: unknown): value is types.PathParameterSubSchemaIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaIn", () => {
if(
value !== "path"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/description}
*/
export function isPathParameterSubSchemaDescription(value: unknown): value is types.PathParameterSubSchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/name}
*/
export function isPathParameterSubSchemaName(value: unknown): value is types.PathParameterSubSchemaName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/type}
*/
export function isPathParameterSubSchemaType(value: unknown): value is types.PathParameterSubSchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "boolean" &&
value !== "integer" &&
value !== "array"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/format}
*/
export function isPathParameterSubSchemaFormat(value: unknown): value is types.PathParameterSubSchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/items}
*/
export function isPathParameterSubSchemaItems(value: unknown): value is types.PathParameterSubSchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/collectionFormat}
*/
export function isPathParameterSubSchemaCollectionFormat(value: unknown): value is types.PathParameterSubSchemaCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaCollectionFormat", () => {
if(!isDefinitionsCollectionFormat(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/default}
*/
export function isPathParameterSubSchemaDefault(value: unknown): value is types.PathParameterSubSchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maximum}
*/
export function isPathParameterSubSchemaMaximum(value: unknown): value is types.PathParameterSubSchemaMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMaximum}
*/
export function isPathParameterSubSchemaExclusiveMaximum(value: unknown): value is types.PathParameterSubSchemaExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minimum}
*/
export function isPathParameterSubSchemaMinimum(value: unknown): value is types.PathParameterSubSchemaMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMinimum}
*/
export function isPathParameterSubSchemaExclusiveMinimum(value: unknown): value is types.PathParameterSubSchemaExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxLength}
*/
export function isPathParameterSubSchemaMaxLength(value: unknown): value is types.PathParameterSubSchemaMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minLength}
*/
export function isPathParameterSubSchemaMinLength(value: unknown): value is types.PathParameterSubSchemaMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/pattern}
*/
export function isPathParameterSubSchemaPattern(value: unknown): value is types.PathParameterSubSchemaPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxItems}
*/
export function isPathParameterSubSchemaMaxItems(value: unknown): value is types.PathParameterSubSchemaMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minItems}
*/
export function isPathParameterSubSchemaMinItems(value: unknown): value is types.PathParameterSubSchemaMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/uniqueItems}
*/
export function isPathParameterSubSchemaUniqueItems(value: unknown): value is types.PathParameterSubSchemaUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/enum}
*/
export function isPathParameterSubSchemaEnum(value: unknown): value is types.PathParameterSubSchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/multipleOf}
*/
export function isPathParameterSubSchemaMultipleOf(value: unknown): value is types.PathParameterSubSchemaMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/additionalProperties}
*/
export function isPathParameterSubSchemaAdditionalProperties(value: unknown): value is types.PathParameterSubSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/patternProperties/^x-}
*/
export function isPathParameterSubSchemaX(value: unknown): value is types.PathParameterSubSchemaX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PathParameterSubSchemaX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/0}
*/
export function isNonBodyParameter0(value: unknown): value is types.NonBodyParameter0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NonBodyParameter0", () => {
if(!isHeaderParameterSubSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/1}
*/
export function isNonBodyParameter1(value: unknown): value is types.NonBodyParameter1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NonBodyParameter1", () => {
if(!isFormDataParameterSubSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/2}
*/
export function isNonBodyParameter2(value: unknown): value is types.NonBodyParameter2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NonBodyParameter2", () => {
if(!isQueryParameterSubSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/3}
*/
export function isNonBodyParameter3(value: unknown): value is types.NonBodyParameter3 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NonBodyParameter3", () => {
if(!isPathParameterSubSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/0}
*/
export function isParameter0(value: unknown): value is types.Parameter0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter0", () => {
if(!isBodyParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/1}
*/
export function isParameter1(value: unknown): value is types.Parameter1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Parameter1", () => {
if(!isNonBodyParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/$ref}
*/
export function isSchemaRef(value: unknown): value is types.SchemaRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/format}
*/
export function isSchemaFormat(value: unknown): value is types.SchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/title}
*/
export function isSchemaTitle(value: unknown): value is types.SchemaTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaTitle", () => {
if(!isDraft04Title(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/description}
*/
export function isSchemaDescription(value: unknown): value is types.SchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDescription", () => {
if(!isDraft04Description(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/default}
*/
export function isSchemaDefault(value: unknown): value is types.SchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaDefault", () => {
if(!isDraft04Default(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/multipleOf}
*/
export function isSchemaMultipleOf(value: unknown): value is types.SchemaMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMultipleOf", () => {
if(!isDraft04MultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maximum}
*/
export function isSchemaMaximum(value: unknown): value is types.SchemaMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMaximum", () => {
if(!isDraft04Maximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMaximum}
*/
export function isSchemaExclusiveMaximum(value: unknown): value is types.SchemaExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExclusiveMaximum", () => {
if(!isDraft04ExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minimum}
*/
export function isSchemaMinimum(value: unknown): value is types.SchemaMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMinimum", () => {
if(!isDraft04Minimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMinimum}
*/
export function isSchemaExclusiveMinimum(value: unknown): value is types.SchemaExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExclusiveMinimum", () => {
if(!isDraft04ExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxLength}
*/
export function isSchemaMaxLength(value: unknown): value is types.SchemaMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMaxLength", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minLength}
*/
export function isSchemaMinLength(value: unknown): value is types.SchemaMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMinLength", () => {
if(!isPositiveIntegerDefault0(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/pattern}
*/
export function isSchemaPattern(value: unknown): value is types.SchemaPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaPattern", () => {
if(!isDraft04Pattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxItems}
*/
export function isSchemaMaxItems(value: unknown): value is types.SchemaMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMaxItems", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minItems}
*/
export function isSchemaMinItems(value: unknown): value is types.SchemaMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaMinItems", () => {
if(!isPositiveIntegerDefault0(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/uniqueItems}
*/
export function isSchemaUniqueItems(value: unknown): value is types.SchemaUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaUniqueItems", () => {
if(!isDraft04UniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxProperties}
*/
export function isMaxProperties(value: unknown): value is types.MaxProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MaxProperties", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minProperties}
*/
export function isMinProperties(value: unknown): value is types.MinProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MinProperties", () => {
if(!isPositiveIntegerDefault0(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/required}
*/
export function isSchemaRequired(value: unknown): value is types.SchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaRequired", () => {
if(!isStringArray(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/enum}
*/
export function isSchemaEnum(value: unknown): value is types.SchemaEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaEnum", () => {
if(!isDraft04Enum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties}
*/
export function isPropertiesSchemaAdditionalProperties(value: unknown): value is types.PropertiesSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesSchemaAdditionalProperties", () => {
{
let counter = 0;
if(counter < 1 && isAdditionalPropertiesAnyOf0(value)) {
counter += 1;
}
if(counter < 1 && isAdditionalPropertiesAnyOf1(value)) {
counter += 1;
}
if(counter < 1) {
recordError("anyOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/type}
*/
export function isSchemaType(value: unknown): value is types.SchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaType", () => {
if(!isDraft04Type(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items}
*/
export function isSchemaItems(value: unknown): value is types.SchemaItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaItems", () => {
{
let counter = 0;
if(counter < 1 && isItemsAnyOf0(value)) {
counter += 1;
}
if(counter < 1 && isItemsAnyOf1(value)) {
counter += 1;
}
if(counter < 1) {
recordError("anyOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf}
*/
export function isAllOf(value: unknown): value is types.AllOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOf", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isAllOfItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/properties}
*/
export function isProperties(value: unknown): value is types.Properties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Properties", () => {
if(!((
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
))) {
recordError("types");
return false;
}
if(
value !== null &&
typeof value === "object" &&
!Array.isArray(value)
) {
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(propertyValue === undefined) {
continue;
}
switch(propertyName) {
default:
if(!withPath(propertyName, () => {
if(
!isPropertiesAdditionalProperties(propertyValue)
) {
return false;
}
return true;
})) {
return false
}
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/discriminator}
*/
export function isDiscriminator(value: unknown): value is types.Discriminator {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Discriminator", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/readOnly}
*/
export function isSchemaReadOnly(value: unknown): value is types.SchemaReadOnly {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaReadOnly", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/xml}
*/
export function isSchemaXml(value: unknown): value is types.SchemaXml {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaXml", () => {
if(!isDefinitionsXml(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/externalDocs}
*/
export function isSchemaExternalDocs(value: unknown): value is types.SchemaExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExternalDocs", () => {
if(!isDefinitionsExternalDocs(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/example}
*/
export function isSchemaExample(value: unknown): value is types.SchemaExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/additionalProperties}
*/
export function isDefinitionsSchemaAdditionalProperties(value: unknown): value is types.DefinitionsSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("DefinitionsSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/patternProperties/^x-}
*/
export function isSchemaPatternPropertiesX(value: unknown): value is types.SchemaPatternPropertiesX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemaPatternPropertiesX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/format}
*/
export function isFileSchemaFormat(value: unknown): value is types.FileSchemaFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/title}
*/
export function isFileSchemaTitle(value: unknown): value is types.FileSchemaTitle {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaTitle", () => {
if(!isDraft04Title(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/description}
*/
export function isFileSchemaDescription(value: unknown): value is types.FileSchemaDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaDescription", () => {
if(!isDraft04Description(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/default}
*/
export function isFileSchemaDefault(value: unknown): value is types.FileSchemaDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaDefault", () => {
if(!isDraft04Default(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/required}
*/
export function isFileSchemaRequired(value: unknown): value is types.FileSchemaRequired {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaRequired", () => {
if(!isStringArray(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/type}
*/
export function isFileSchemaType(value: unknown): value is types.FileSchemaType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaType", () => {
if(
value !== "file"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/readOnly}
*/
export function isFileSchemaReadOnly(value: unknown): value is types.FileSchemaReadOnly {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaReadOnly", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/externalDocs}
*/
export function isFileSchemaExternalDocs(value: unknown): value is types.FileSchemaExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaExternalDocs", () => {
if(!isDefinitionsExternalDocs(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/example}
*/
export function isFileSchemaExample(value: unknown): value is types.FileSchemaExample {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaExample", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/additionalProperties}
*/
export function isFileSchemaAdditionalProperties(value: unknown): value is types.FileSchemaAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/patternProperties/^x-}
*/
export function isFileSchemaX(value: unknown): value is types.FileSchemaX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("FileSchemaX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/type}
*/
export function isPrimitivesItemsType(value: unknown): value is types.PrimitivesItemsType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsType", () => {
if(
value !== "string" &&
value !== "number" &&
value !== "integer" &&
value !== "boolean" &&
value !== "array"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/format}
*/
export function isPrimitivesItemsFormat(value: unknown): value is types.PrimitivesItemsFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsFormat", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/items}
*/
export function isPrimitivesItemsItems(value: unknown): value is types.PrimitivesItemsItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsItems", () => {
if(!isPrimitivesItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/collectionFormat}
*/
export function isPrimitivesItemsCollectionFormat(value: unknown): value is types.PrimitivesItemsCollectionFormat {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsCollectionFormat", () => {
if(!isDefinitionsCollectionFormat(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/default}
*/
export function isPrimitivesItemsDefault(value: unknown): value is types.PrimitivesItemsDefault {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsDefault", () => {
if(!isDefinitionsDefault(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maximum}
*/
export function isPrimitivesItemsMaximum(value: unknown): value is types.PrimitivesItemsMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMaximum", () => {
if(!isDefinitionsMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMaximum}
*/
export function isPrimitivesItemsExclusiveMaximum(value: unknown): value is types.PrimitivesItemsExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsExclusiveMaximum", () => {
if(!isDefinitionsExclusiveMaximum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minimum}
*/
export function isPrimitivesItemsMinimum(value: unknown): value is types.PrimitivesItemsMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMinimum", () => {
if(!isDefinitionsMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMinimum}
*/
export function isPrimitivesItemsExclusiveMinimum(value: unknown): value is types.PrimitivesItemsExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsExclusiveMinimum", () => {
if(!isDefinitionsExclusiveMinimum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxLength}
*/
export function isPrimitivesItemsMaxLength(value: unknown): value is types.PrimitivesItemsMaxLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMaxLength", () => {
if(!isDefinitionsMaxLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minLength}
*/
export function isPrimitivesItemsMinLength(value: unknown): value is types.PrimitivesItemsMinLength {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMinLength", () => {
if(!isDefinitionsMinLength(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/pattern}
*/
export function isPrimitivesItemsPattern(value: unknown): value is types.PrimitivesItemsPattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsPattern", () => {
if(!isDefinitionsPattern(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxItems}
*/
export function isPrimitivesItemsMaxItems(value: unknown): value is types.PrimitivesItemsMaxItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMaxItems", () => {
if(!isDefinitionsMaxItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minItems}
*/
export function isPrimitivesItemsMinItems(value: unknown): value is types.PrimitivesItemsMinItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMinItems", () => {
if(!isDefinitionsMinItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/uniqueItems}
*/
export function isPrimitivesItemsUniqueItems(value: unknown): value is types.PrimitivesItemsUniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsUniqueItems", () => {
if(!isDefinitionsUniqueItems(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/enum}
*/
export function isPrimitivesItemsEnum(value: unknown): value is types.PrimitivesItemsEnum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsEnum", () => {
if(!isDefinitionsEnum(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/multipleOf}
*/
export function isPrimitivesItemsMultipleOf(value: unknown): value is types.PrimitivesItemsMultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsMultipleOf", () => {
if(!isDefinitionsMultipleOf(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/additionalProperties}
*/
export function isPrimitivesItemsAdditionalProperties(value: unknown): value is types.PrimitivesItemsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/patternProperties/^x-}
*/
export function isPrimitivesItemsX(value: unknown): value is types.PrimitivesItemsX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PrimitivesItemsX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/security/items}
*/
export function isSecurityItems(value: unknown): value is types.SecurityItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityItems", () => {
if(!isSecurityRequirement(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties}
*/
export function isSecurityRequirementAdditionalProperties(value: unknown): value is types.SecurityRequirementAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirementAdditionalProperties", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isSecurityRequirementItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/name}
*/
export function isXmlName(value: unknown): value is types.XmlName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/namespace}
*/
export function isNamespace(value: unknown): value is types.Namespace {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Namespace", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/prefix}
*/
export function isPrefix(value: unknown): value is types.Prefix {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Prefix", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/attribute}
*/
export function isAttribute(value: unknown): value is types.Attribute {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Attribute", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/wrapped}
*/
export function isWrapped(value: unknown): value is types.Wrapped {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Wrapped", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/additionalProperties}
*/
export function isXmlAdditionalProperties(value: unknown): value is types.XmlAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/patternProperties/^x-}
*/
export function isXmlX(value: unknown): value is types.XmlX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("XmlX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/name}
*/
export function isTagName(value: unknown): value is types.TagName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/description}
*/
export function isTagDescription(value: unknown): value is types.TagDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/externalDocs}
*/
export function isTagExternalDocs(value: unknown): value is types.TagExternalDocs {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagExternalDocs", () => {
if(!isDefinitionsExternalDocs(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/additionalProperties}
*/
export function isTagAdditionalProperties(value: unknown): value is types.TagAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/patternProperties/^x-}
*/
export function isTagX(value: unknown): value is types.TagX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TagX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties}
*/
export function isSecurityDefinitionsAdditionalProperties(value: unknown): value is types.SecurityDefinitionsAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitionsAdditionalProperties", () => {
{
let counter = 0;
if(counter < 2 && isSecurityDefinitions0(value)) {
counter += 1;
}
if(counter < 2 && isSecurityDefinitions1(value)) {
counter += 1;
}
if(counter < 2 && isSecurityDefinitions2(value)) {
counter += 1;
}
if(counter < 2 && isSecurityDefinitions3(value)) {
counter += 1;
}
if(counter < 2 && isSecurityDefinitions4(value)) {
counter += 1;
}
if(counter < 2 && isSecurityDefinitions5(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/type}
*/
export function isBasicAuthenticationSecurityType(value: unknown): value is types.BasicAuthenticationSecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasicAuthenticationSecurityType", () => {
if(
value !== "basic"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/description}
*/
export function isBasicAuthenticationSecurityDescription(value: unknown): value is types.BasicAuthenticationSecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasicAuthenticationSecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/additionalProperties}
*/
export function isBasicAuthenticationSecurityAdditionalProperties(value: unknown): value is types.BasicAuthenticationSecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasicAuthenticationSecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/patternProperties/^x-}
*/
export function isBasicAuthenticationSecurityX(value: unknown): value is types.BasicAuthenticationSecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("BasicAuthenticationSecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/type}
*/
export function isApiKeySecurityType(value: unknown): value is types.ApiKeySecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityType", () => {
if(
value !== "apiKey"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/name}
*/
export function isApiKeySecurityName(value: unknown): value is types.ApiKeySecurityName {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityName", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/in}
*/
export function isApiKeySecurityIn(value: unknown): value is types.ApiKeySecurityIn {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityIn", () => {
if(
value !== "header" &&
value !== "query"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/description}
*/
export function isApiKeySecurityDescription(value: unknown): value is types.ApiKeySecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/additionalProperties}
*/
export function isApiKeySecurityAdditionalProperties(value: unknown): value is types.ApiKeySecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/patternProperties/^x-}
*/
export function isApiKeySecurityX(value: unknown): value is types.ApiKeySecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ApiKeySecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/type}
*/
export function isOauth2ImplicitSecurityType(value: unknown): value is types.Oauth2ImplicitSecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityType", () => {
if(
value !== "oauth2"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/flow}
*/
export function isOauth2ImplicitSecurityFlow(value: unknown): value is types.Oauth2ImplicitSecurityFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityFlow", () => {
if(
value !== "implicit"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/scopes}
*/
export function isOauth2ImplicitSecurityScopes(value: unknown): value is types.Oauth2ImplicitSecurityScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityScopes", () => {
if(!isOauth2Scopes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/authorizationUrl}
*/
export function isOauth2ImplicitSecurityAuthorizationUrl(value: unknown): value is types.Oauth2ImplicitSecurityAuthorizationUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityAuthorizationUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/description}
*/
export function isOauth2ImplicitSecurityDescription(value: unknown): value is types.Oauth2ImplicitSecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/additionalProperties}
*/
export function isOauth2ImplicitSecurityAdditionalProperties(value: unknown): value is types.Oauth2ImplicitSecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/patternProperties/^x-}
*/
export function isOauth2ImplicitSecurityX(value: unknown): value is types.Oauth2ImplicitSecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ImplicitSecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/type}
*/
export function isOauth2PasswordSecurityType(value: unknown): value is types.Oauth2PasswordSecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityType", () => {
if(
value !== "oauth2"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/flow}
*/
export function isOauth2PasswordSecurityFlow(value: unknown): value is types.Oauth2PasswordSecurityFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityFlow", () => {
if(
value !== "password"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/scopes}
*/
export function isOauth2PasswordSecurityScopes(value: unknown): value is types.Oauth2PasswordSecurityScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityScopes", () => {
if(!isOauth2Scopes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/tokenUrl}
*/
export function isOauth2PasswordSecurityTokenUrl(value: unknown): value is types.Oauth2PasswordSecurityTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/description}
*/
export function isOauth2PasswordSecurityDescription(value: unknown): value is types.Oauth2PasswordSecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/additionalProperties}
*/
export function isOauth2PasswordSecurityAdditionalProperties(value: unknown): value is types.Oauth2PasswordSecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/patternProperties/^x-}
*/
export function isOauth2PasswordSecurityX(value: unknown): value is types.Oauth2PasswordSecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2PasswordSecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/type}
*/
export function isOauth2ApplicationSecurityType(value: unknown): value is types.Oauth2ApplicationSecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityType", () => {
if(
value !== "oauth2"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/flow}
*/
export function isOauth2ApplicationSecurityFlow(value: unknown): value is types.Oauth2ApplicationSecurityFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityFlow", () => {
if(
value !== "application"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/scopes}
*/
export function isOauth2ApplicationSecurityScopes(value: unknown): value is types.Oauth2ApplicationSecurityScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityScopes", () => {
if(!isOauth2Scopes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/tokenUrl}
*/
export function isOauth2ApplicationSecurityTokenUrl(value: unknown): value is types.Oauth2ApplicationSecurityTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/description}
*/
export function isOauth2ApplicationSecurityDescription(value: unknown): value is types.Oauth2ApplicationSecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/additionalProperties}
*/
export function isOauth2ApplicationSecurityAdditionalProperties(value: unknown): value is types.Oauth2ApplicationSecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/patternProperties/^x-}
*/
export function isOauth2ApplicationSecurityX(value: unknown): value is types.Oauth2ApplicationSecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ApplicationSecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/type}
*/
export function isOauth2AccessCodeSecurityType(value: unknown): value is types.Oauth2AccessCodeSecurityType {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityType", () => {
if(
value !== "oauth2"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/flow}
*/
export function isOauth2AccessCodeSecurityFlow(value: unknown): value is types.Oauth2AccessCodeSecurityFlow {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityFlow", () => {
if(
value !== "accessCode"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/scopes}
*/
export function isOauth2AccessCodeSecurityScopes(value: unknown): value is types.Oauth2AccessCodeSecurityScopes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityScopes", () => {
if(!isOauth2Scopes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/authorizationUrl}
*/
export function isOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): value is types.Oauth2AccessCodeSecurityAuthorizationUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityAuthorizationUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/tokenUrl}
*/
export function isOauth2AccessCodeSecurityTokenUrl(value: unknown): value is types.Oauth2AccessCodeSecurityTokenUrl {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityTokenUrl", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/description}
*/
export function isOauth2AccessCodeSecurityDescription(value: unknown): value is types.Oauth2AccessCodeSecurityDescription {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityDescription", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/additionalProperties}
*/
export function isOauth2AccessCodeSecurityAdditionalProperties(value: unknown): value is types.Oauth2AccessCodeSecurityAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/patternProperties/^x-}
*/
export function isOauth2AccessCodeSecurityX(value: unknown): value is types.Oauth2AccessCodeSecurityX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2AccessCodeSecurityX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes/additionalProperties}
*/
export function isOauth2ScopesAdditionalProperties(value: unknown): value is types.Oauth2ScopesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Oauth2ScopesAdditionalProperties", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/mediaTypeList/items}
*/
export function isMediaTypeListItems(value: unknown): value is types.MediaTypeListItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("MediaTypeListItems", () => {
if(!isMimeType(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items}
*/
export function isParametersListItems(value: unknown): value is types.ParametersListItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersListItems", () => {
{
let counter = 0;
if(counter < 2 && isParametersList0(value)) {
counter += 1;
}
if(counter < 2 && isParametersList1(value)) {
counter += 1;
}
if(counter !== 1) {
recordError("oneOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/additionalItems}
*/
export function isParametersListAdditionalItems(value: unknown): value is types.ParametersListAdditionalItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersListAdditionalItems", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schemesList/items}
*/
export function isSchemesListItems(value: unknown): value is types.SchemesListItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SchemesListItems", () => {
if(
value !== "http" &&
value !== "https" &&
value !== "ws" &&
value !== "wss"
) {
recordError("options");
return false;
}
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference/properties/$ref}
*/
export function isJsonReferenceRef(value: unknown): value is types.JsonReferenceRef {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("JsonReferenceRef", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference/additionalProperties}
*/
export function isJsonReferenceAdditionalProperties(value: unknown): value is types.JsonReferenceAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("JsonReferenceAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/consumes/allOf/0}
*/
export function isPropertiesAllOfConsumes0(value: unknown): value is types.PropertiesAllOfConsumes0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesAllOfConsumes0", () => {
if(!isMediaTypeList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/produces/allOf/0}
*/
export function isPropertiesAllOfProduces0(value: unknown): value is types.PropertiesAllOfProduces0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesAllOfProduces0", () => {
if(!isMediaTypeList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/properties/tags/items}
*/
export function isPropertiesTagsItems(value: unknown): value is types.PropertiesTagsItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesTagsItems", () => {
if(!isTag(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/tags/items}
*/
export function isOperationTagsItems(value: unknown): value is types.OperationTagsItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationTagsItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/produces/allOf/0}
*/
export function isOperationAllOfProduces0(value: unknown): value is types.OperationAllOfProduces0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationAllOfProduces0", () => {
if(!isMediaTypeList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes/allOf/0}
*/
export function isOperationAllOfConsumes0(value: unknown): value is types.OperationAllOfConsumes0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("OperationAllOfConsumes0", () => {
if(!isMediaTypeList(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not/additionalProperties}
*/
export function isNotAdditionalProperties(value: unknown): value is types.NotAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NotAdditionalProperties", () => {
if(!((false))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/responses/not/patternProperties/^x-}
*/
export function isNotX(value: unknown): value is types.NotX {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("NotX", () => {
if(!isVendorExtension(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/0}
*/
export function isResponse0(value: unknown): value is types.Response0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Response0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/1}
*/
export function isResponse1(value: unknown): value is types.Response1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Response1", () => {
if(!isFileSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/0}
*/
export function isAdditionalPropertiesAnyOf0(value: unknown): value is types.AdditionalPropertiesAnyOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AdditionalPropertiesAnyOf0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/1}
*/
export function isAdditionalPropertiesAnyOf1(value: unknown): value is types.AdditionalPropertiesAnyOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AdditionalPropertiesAnyOf1", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/0}
*/
export function isItemsAnyOf0(value: unknown): value is types.ItemsAnyOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ItemsAnyOf0", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1}
*/
export function isItemsAnyOf1(value: unknown): value is types.ItemsAnyOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ItemsAnyOf1", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isItems1AnyOfItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf/items}
*/
export function isAllOfItems(value: unknown): value is types.AllOfItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("AllOfItems", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/properties/additionalProperties}
*/
export function isPropertiesAdditionalProperties(value: unknown): value is types.PropertiesAdditionalProperties {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PropertiesAdditionalProperties", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties/items}
*/
export function isSecurityRequirementItems(value: unknown): value is types.SecurityRequirementItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityRequirementItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/0}
*/
export function isSecurityDefinitions0(value: unknown): value is types.SecurityDefinitions0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions0", () => {
if(!isBasicAuthenticationSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/1}
*/
export function isSecurityDefinitions1(value: unknown): value is types.SecurityDefinitions1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions1", () => {
if(!isApiKeySecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/2}
*/
export function isSecurityDefinitions2(value: unknown): value is types.SecurityDefinitions2 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions2", () => {
if(!isOauth2ImplicitSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/3}
*/
export function isSecurityDefinitions3(value: unknown): value is types.SecurityDefinitions3 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions3", () => {
if(!isOauth2PasswordSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/4}
*/
export function isSecurityDefinitions4(value: unknown): value is types.SecurityDefinitions4 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions4", () => {
if(!isOauth2ApplicationSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/5}
*/
export function isSecurityDefinitions5(value: unknown): value is types.SecurityDefinitions5 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SecurityDefinitions5", () => {
if(!isOauth2AccessCodeSecurity(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/0}
*/
export function isParametersList0(value: unknown): value is types.ParametersList0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersList0", () => {
if(!isParameter(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/1}
*/
export function isParametersList1(value: unknown): value is types.ParametersList1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("ParametersList1", () => {
if(!isJsonReference(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1/items}
*/
export function isItems1AnyOfItems(value: unknown): value is types.Items1AnyOfItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Items1AnyOfItems", () => {
if(!isDefinitionsSchema(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/title}
*/
export function isDraft04Title(value: unknown): value is types.Draft04Title {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Title", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/description}
*/
export function isDraft04Description(value: unknown): value is types.Draft04Description {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Description", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/default}
*/
export function isDraft04Default(value: unknown): value is types.Draft04Default {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Default", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/multipleOf}
*/
export function isDraft04MultipleOf(value: unknown): value is types.Draft04MultipleOf {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04MultipleOf", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value <= 0
) {
recordError("minimumExclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maximum}
*/
export function isDraft04Maximum(value: unknown): value is types.Draft04Maximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Maximum", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum}
*/
export function isDraft04ExclusiveMaximum(value: unknown): value is types.Draft04ExclusiveMaximum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04ExclusiveMaximum", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minimum}
*/
export function isDraft04Minimum(value: unknown): value is types.Draft04Minimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Minimum", () => {
if(!((
typeof value === "number" &&
!isNaN(value)
))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum}
*/
export function isDraft04ExclusiveMinimum(value: unknown): value is types.Draft04ExclusiveMinimum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04ExclusiveMinimum", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveInteger}
*/
export function isPositiveInteger(value: unknown): value is types.PositiveInteger {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PositiveInteger", () => {
if(!((
typeof value === "number" &&
!isNaN(value) &&
value % 1 === 0
))) {
recordError("types");
return false;
}
if(
typeof value === "number" &&
!isNaN(value)
) {
if(
value < 0
) {
recordError("minimumInclusive");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0}
*/
export function isPositiveIntegerDefault0(value: unknown): value is types.PositiveIntegerDefault0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PositiveIntegerDefault0", () => {
{
let counter = 0;
if(counter === 0 && isPositiveIntegerDefault00(value)) {
counter += 1;
}
if(counter === 1 && isPositiveIntegerDefault01(value)) {
counter += 1;
}
if(counter < 2) {
recordError("allOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/0}
*/
export function isPositiveIntegerDefault00(value: unknown): value is types.PositiveIntegerDefault00 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PositiveIntegerDefault00", () => {
if(!isPositiveInteger(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/1}
*/
export function isPositiveIntegerDefault01(value: unknown): value is types.PositiveIntegerDefault01 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("PositiveIntegerDefault01", () => {
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/pattern}
*/
export function isDraft04Pattern(value: unknown): value is types.Draft04Pattern {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Pattern", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/uniqueItems}
*/
export function isDraft04UniqueItems(value: unknown): value is types.Draft04UniqueItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04UniqueItems", () => {
if(!((typeof value === "boolean"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/enum}
*/
export function isDraft04Enum(value: unknown): value is types.Draft04Enum {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Enum", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray}
*/
export function isStringArray(value: unknown): value is types.StringArray {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("StringArray", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isStringArrayItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray/items}
*/
export function isStringArrayItems(value: unknown): value is types.StringArrayItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("StringArrayItems", () => {
if(!((typeof value === "string"))) {
recordError("types");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type}
*/
export function isDraft04Type(value: unknown): value is types.Draft04Type {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Draft04Type", () => {
{
let counter = 0;
if(counter < 1 && isTypeAnyOf0(value)) {
counter += 1;
}
if(counter < 1 && isTypeAnyOf1(value)) {
counter += 1;
}
if(counter < 1) {
recordError("anyOf");
return false;
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/0}
*/
export function isTypeAnyOf0(value: unknown): value is types.TypeAnyOf0 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TypeAnyOf0", () => {
if(!isSimpleTypes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1}
*/
export function isTypeAnyOf1(value: unknown): value is types.TypeAnyOf1 {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("TypeAnyOf1", () => {
if(!((Array.isArray(value)))) {
recordError("types");
return false;
}
if(
Array.isArray(value)
) {
if(value.length < 1) {
recordError("minimumItems");
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
recordError("uniqueItems");
return false;
}
switch(elementIndex) {
default:
if(!withPath(String(elementIndex), () => {
if(!isType1AnyOfItems(elementValue)) {
recordError("elementValue");
return false;
}
return true;
})) {
return false;
}
break;
break;
}
elementValueSeen.add(elementValue);
}
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/type/anyOf/1/items}
*/
export function isType1AnyOfItems(value: unknown): value is types.Type1AnyOfItems {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("Type1AnyOfItems", () => {
if(!isSimpleTypes(value)) {
recordError("reference");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/simpleTypes}
*/
export function isSimpleTypes(value: unknown): value is types.SimpleTypes {
if(depth === 0) {
resetErrors();
}
depth += 1;
try{
return withType("SimpleTypes", () => {
if(
value !== "array" &&
value !== "boolean" &&
value !== "integer" &&
value !== "null" &&
value !== "number" &&
value !== "object" &&
value !== "string"
) {
recordError("options");
return false;
}
return true;
;
});
}
finally {
depth -= 1;
}
}
