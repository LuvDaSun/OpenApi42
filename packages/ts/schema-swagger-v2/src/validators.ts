// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.9.6                          -- www.JsonSchema42.org
import * as types from "./types.js";
// http://swagger.io/v2/schema.json#
export function isSchemaJson(value: unknown): value is types.SchemaJson {
if(!_isMapSchemaJson(value)) {
return false;
}
return true;
}
function _isMapSchemaJson(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("swagger" in value)) {
return false;
}
if(!("info" in value)) {
return false;
}
if(!("paths" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "swagger":
if(!isSwagger(propertyValue)) {
return false;
}
continue;
case "info":
if(!isPropertiesInfo(propertyValue)) {
return false;
}
continue;
case "host":
if(!isHost(propertyValue)) {
return false;
}
continue;
case "basePath":
if(!isBasePath(propertyValue)) {
return false;
}
continue;
case "schemes":
if(!isPropertiesSchemes(propertyValue)) {
return false;
}
continue;
case "consumes":
if(!isPropertiesConsumes(propertyValue)) {
return false;
}
continue;
case "produces":
if(!isPropertiesProduces(propertyValue)) {
return false;
}
continue;
case "paths":
if(!isPropertiesPaths(propertyValue)) {
return false;
}
continue;
case "definitions":
if(!isPropertiesDefinitions(propertyValue)) {
return false;
}
continue;
case "parameters":
if(!isPropertiesParameters(propertyValue)) {
return false;
}
continue;
case "responses":
if(!isPropertiesResponses(propertyValue)) {
return false;
}
continue;
case "security":
if(!isPropertiesSecurity(propertyValue)) {
return false;
}
continue;
case "securityDefinitions":
if(!isPropertiesSecurityDefinitions(propertyValue)) {
return false;
}
continue;
case "tags":
if(!isPropertiesTags(propertyValue)) {
return false;
}
continue;
case "externalDocs":
if(!isPropertiesExternalDocs(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isV2PatternPropertiesX(propertyValue)) {
return false;
}
continue;
}
if(!isV2AdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info
export function isDefinitionsInfo(value: unknown): value is types.DefinitionsInfo {
if(!_isMapDefinitionsInfo(value)) {
return false;
}
return true;
}
function _isMapDefinitionsInfo(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("version" in value)) {
return false;
}
if(!("title" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "title":
if(!isInfoTitle(propertyValue)) {
return false;
}
continue;
case "version":
if(!isVersion(propertyValue)) {
return false;
}
continue;
case "description":
if(!isInfoDescription(propertyValue)) {
return false;
}
continue;
case "termsOfService":
if(!isTermsOfService(propertyValue)) {
return false;
}
continue;
case "contact":
if(!isInfoContact(propertyValue)) {
return false;
}
continue;
case "license":
if(!isInfoLicense(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isInfoX(propertyValue)) {
return false;
}
continue;
}
if(!isInfoAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/contact
export function isDefinitionsContact(value: unknown): value is types.DefinitionsContact {
if(!_isMapDefinitionsContact(value)) {
return false;
}
return true;
}
function _isMapDefinitionsContact(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "name":
if(!isContactName(propertyValue)) {
return false;
}
continue;
case "url":
if(!isContactUrl(propertyValue)) {
return false;
}
continue;
case "email":
if(!isEmail(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isContactX(propertyValue)) {
return false;
}
continue;
}
if(!isContactAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/license
export function isDefinitionsLicense(value: unknown): value is types.DefinitionsLicense {
if(!_isMapDefinitionsLicense(value)) {
return false;
}
return true;
}
function _isMapDefinitionsLicense(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("name" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "name":
if(!isLicenseName(propertyValue)) {
return false;
}
continue;
case "url":
if(!isLicenseUrl(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isLicenseX(propertyValue)) {
return false;
}
continue;
}
if(!isLicenseAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/paths
export function isDefinitionsPaths(value: unknown): value is types.DefinitionsPaths {
if(!_isMapDefinitionsPaths(value)) {
return false;
}
return true;
}
function _isMapDefinitionsPaths(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(new RegExp("^x-").test(propertyName)) {
if(!isPathsX(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^/").test(propertyName)) {
if(!isPatternProperties(propertyValue)) {
return false;
}
continue;
}
if(!isPathsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/definitions
export function isDefinitionsDefinitions(value: unknown): value is types.DefinitionsDefinitions {
if(!_isMapDefinitionsDefinitions(value)) {
return false;
}
return true;
}
function _isMapDefinitionsDefinitions(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isDefinitionsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parameterDefinitions
export function isParameterDefinitions(value: unknown): value is types.ParameterDefinitions {
if(!_isMapParameterDefinitions(value)) {
return false;
}
return true;
}
function _isMapParameterDefinitions(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isParameterDefinitionsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responseDefinitions
export function isResponseDefinitions(value: unknown): value is types.ResponseDefinitions {
if(!_isMapResponseDefinitions(value)) {
return false;
}
return true;
}
function _isMapResponseDefinitions(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isResponseDefinitionsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/externalDocs
export function isDefinitionsExternalDocs(value: unknown): value is types.DefinitionsExternalDocs {
if(!_isMapDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
function _isMapDefinitionsExternalDocs(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("url" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "description":
if(!isExternalDocsDescription(propertyValue)) {
return false;
}
continue;
case "url":
if(!isExternalDocsUrl(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isExternalDocsX(propertyValue)) {
return false;
}
continue;
}
if(!isExternalDocsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/examples
export function isDefinitionsExamples(value: unknown): value is types.DefinitionsExamples {
if(!_isMapDefinitionsExamples(value)) {
return false;
}
return true;
}
function _isMapDefinitionsExamples(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isExamplesAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/mimeType
export function isMimeType(value: unknown): value is types.MimeType {
if(!_isStringMimeType(value)) {
return false;
}
return true;
}
function _isStringMimeType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation
export function isOperation(value: unknown): value is types.Operation {
if(!_isMapOperation(value)) {
return false;
}
return true;
}
function _isMapOperation(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("responses" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "tags":
if(!isOperationTags(propertyValue)) {
return false;
}
continue;
case "summary":
if(!isSummary(propertyValue)) {
return false;
}
continue;
case "description":
if(!isOperationDescription(propertyValue)) {
return false;
}
continue;
case "externalDocs":
if(!isOperationExternalDocs(propertyValue)) {
return false;
}
continue;
case "operationId":
if(!isOperationId(propertyValue)) {
return false;
}
continue;
case "produces":
if(!isOperationProduces(propertyValue)) {
return false;
}
continue;
case "consumes":
if(!isOperationConsumes(propertyValue)) {
return false;
}
continue;
case "parameters":
if(!isOperationParameters(propertyValue)) {
return false;
}
continue;
case "responses":
if(!isOperationResponses(propertyValue)) {
return false;
}
continue;
case "schemes":
if(!isOperationSchemes(propertyValue)) {
return false;
}
continue;
case "deprecated":
if(!isDeprecated(propertyValue)) {
return false;
}
continue;
case "security":
if(!isOperationSecurity(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isOperationX(propertyValue)) {
return false;
}
continue;
}
if(!isOperationAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem
export function isPathItem(value: unknown): value is types.PathItem {
if(!_isMapPathItem(value)) {
return false;
}
return true;
}
function _isMapPathItem(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "$ref":
if(!isPathItemRef(propertyValue)) {
return false;
}
continue;
case "get":
if(!isGet(propertyValue)) {
return false;
}
continue;
case "put":
if(!isPut(propertyValue)) {
return false;
}
continue;
case "post":
if(!isPost(propertyValue)) {
return false;
}
continue;
case "delete":
if(!isDelete(propertyValue)) {
return false;
}
continue;
case "options":
if(!isOptions(propertyValue)) {
return false;
}
continue;
case "head":
if(!isHead(propertyValue)) {
return false;
}
continue;
case "patch":
if(!isPatch(propertyValue)) {
return false;
}
continue;
case "parameters":
if(!isPathItemParameters(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isPathItemX(propertyValue)) {
return false;
}
continue;
}
if(!isPathItemAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responses
export function isDefinitionsResponses(value: unknown): value is types.DefinitionsResponses {
if(!_isMapDefinitionsResponses(value)) {
return false;
}
if(!_isNotDefinitionsResponses(value)) {
return false;
}
return true;
}
function _isMapDefinitionsResponses(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
let propertyCount = 0;
for(const propertyName in value) {
propertyCount++;
const propertyValue = value[propertyName as keyof typeof value];
if(new RegExp("^([0-9]{3})$|^(default)$").test(propertyName)) {
if(!isResponses093Default(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isResponsesX(propertyValue)) {
return false;
}
continue;
}
if(!isResponsesAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
if(propertyCount < 1) {
return false;
}
return true;
}
function _isNotDefinitionsResponses(value: unknown): value is unknown {
if(isNot(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responseValue
export function isResponseValue(value: unknown): value is types.ResponseValue {
if(!_isOneOfResponseValue(value)) {
return false;
}
return true;
}
function _isOneOfResponseValue(value: unknown): value is unknown {
let validCounter = 0;
if(isResponseValue0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isResponseValue1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response
export function isResponse(value: unknown): value is types.Response {
if(!_isMapResponse(value)) {
return false;
}
return true;
}
function _isMapResponse(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("description" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "description":
if(!isResponseDescription(propertyValue)) {
return false;
}
continue;
case "schema":
if(!isResponseSchema(propertyValue)) {
return false;
}
continue;
case "headers":
if(!isResponseHeaders(propertyValue)) {
return false;
}
continue;
case "examples":
if(!isResponseExamples(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isResponseX(propertyValue)) {
return false;
}
continue;
}
if(!isResponseAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headers
export function isDefinitionsHeaders(value: unknown): value is types.DefinitionsHeaders {
if(!_isMapDefinitionsHeaders(value)) {
return false;
}
return true;
}
function _isMapDefinitionsHeaders(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isHeadersAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header
export function isHeader(value: unknown): value is types.Header {
if(!_isMapHeader(value)) {
return false;
}
return true;
}
function _isMapHeader(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isHeaderType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isHeaderFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isHeaderItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isHeaderCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isHeaderDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isHeaderMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isHeaderExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isHeaderMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isHeaderExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isHeaderMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isHeaderMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isHeaderPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isHeaderMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isHeaderMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isHeaderUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isHeaderEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isHeaderMultipleOf(propertyValue)) {
return false;
}
continue;
case "description":
if(!isHeaderDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isHeaderX(propertyValue)) {
return false;
}
continue;
}
if(!isHeaderAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/vendorExtension
export function isVendorExtension(value: unknown): value is types.VendorExtension {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter
export function isBodyParameter(value: unknown): value is types.BodyParameter {
if(!_isMapBodyParameter(value)) {
return false;
}
return true;
}
function _isMapBodyParameter(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("name" in value)) {
return false;
}
if(!("in" in value)) {
return false;
}
if(!("schema" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "description":
if(!isBodyParameterDescription(propertyValue)) {
return false;
}
continue;
case "name":
if(!isBodyParameterName(propertyValue)) {
return false;
}
continue;
case "in":
if(!isBodyParameterIn(propertyValue)) {
return false;
}
continue;
case "required":
if(!isBodyParameterRequired(propertyValue)) {
return false;
}
continue;
case "schema":
if(!isBodyParameterSchema(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isBodyParameterX(propertyValue)) {
return false;
}
continue;
}
if(!isBodyParameterAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema
export function isHeaderParameterSubSchema(value: unknown): value is types.HeaderParameterSubSchema {
if(!_isMapHeaderParameterSubSchema(value)) {
return false;
}
return true;
}
function _isMapHeaderParameterSubSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "required":
if(!isHeaderParameterSubSchemaRequired(propertyValue)) {
return false;
}
continue;
case "in":
if(!isHeaderParameterSubSchemaIn(propertyValue)) {
return false;
}
continue;
case "description":
if(!isHeaderParameterSubSchemaDescription(propertyValue)) {
return false;
}
continue;
case "name":
if(!isHeaderParameterSubSchemaName(propertyValue)) {
return false;
}
continue;
case "type":
if(!isHeaderParameterSubSchemaType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isHeaderParameterSubSchemaFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isHeaderParameterSubSchemaItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isHeaderParameterSubSchemaCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isHeaderParameterSubSchemaDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isHeaderParameterSubSchemaMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isHeaderParameterSubSchemaExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isHeaderParameterSubSchemaMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isHeaderParameterSubSchemaExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isHeaderParameterSubSchemaMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isHeaderParameterSubSchemaMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isHeaderParameterSubSchemaPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isHeaderParameterSubSchemaMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isHeaderParameterSubSchemaMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isHeaderParameterSubSchemaUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isHeaderParameterSubSchemaEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isHeaderParameterSubSchemaMultipleOf(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isHeaderParameterSubSchemaX(propertyValue)) {
return false;
}
continue;
}
if(!isHeaderParameterSubSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema
export function isQueryParameterSubSchema(value: unknown): value is types.QueryParameterSubSchema {
if(!_isMapQueryParameterSubSchema(value)) {
return false;
}
return true;
}
function _isMapQueryParameterSubSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "required":
if(!isQueryParameterSubSchemaRequired(propertyValue)) {
return false;
}
continue;
case "in":
if(!isQueryParameterSubSchemaIn(propertyValue)) {
return false;
}
continue;
case "description":
if(!isQueryParameterSubSchemaDescription(propertyValue)) {
return false;
}
continue;
case "name":
if(!isQueryParameterSubSchemaName(propertyValue)) {
return false;
}
continue;
case "allowEmptyValue":
if(!isQueryParameterSubSchemaAllowEmptyValue(propertyValue)) {
return false;
}
continue;
case "type":
if(!isQueryParameterSubSchemaType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isQueryParameterSubSchemaFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isQueryParameterSubSchemaItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isQueryParameterSubSchemaCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isQueryParameterSubSchemaDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isQueryParameterSubSchemaMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isQueryParameterSubSchemaExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isQueryParameterSubSchemaMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isQueryParameterSubSchemaExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isQueryParameterSubSchemaMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isQueryParameterSubSchemaMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isQueryParameterSubSchemaPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isQueryParameterSubSchemaMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isQueryParameterSubSchemaMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isQueryParameterSubSchemaUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isQueryParameterSubSchemaEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isQueryParameterSubSchemaMultipleOf(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isQueryParameterSubSchemaX(propertyValue)) {
return false;
}
continue;
}
if(!isQueryParameterSubSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema
export function isFormDataParameterSubSchema(value: unknown): value is types.FormDataParameterSubSchema {
if(!_isMapFormDataParameterSubSchema(value)) {
return false;
}
return true;
}
function _isMapFormDataParameterSubSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "required":
if(!isFormDataParameterSubSchemaRequired(propertyValue)) {
return false;
}
continue;
case "in":
if(!isFormDataParameterSubSchemaIn(propertyValue)) {
return false;
}
continue;
case "description":
if(!isFormDataParameterSubSchemaDescription(propertyValue)) {
return false;
}
continue;
case "name":
if(!isFormDataParameterSubSchemaName(propertyValue)) {
return false;
}
continue;
case "allowEmptyValue":
if(!isFormDataParameterSubSchemaAllowEmptyValue(propertyValue)) {
return false;
}
continue;
case "type":
if(!isFormDataParameterSubSchemaType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isFormDataParameterSubSchemaFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isFormDataParameterSubSchemaItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isFormDataParameterSubSchemaCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isFormDataParameterSubSchemaDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isFormDataParameterSubSchemaMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isFormDataParameterSubSchemaExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isFormDataParameterSubSchemaMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isFormDataParameterSubSchemaExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isFormDataParameterSubSchemaMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isFormDataParameterSubSchemaMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isFormDataParameterSubSchemaPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isFormDataParameterSubSchemaMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isFormDataParameterSubSchemaMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isFormDataParameterSubSchemaUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isFormDataParameterSubSchemaEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isFormDataParameterSubSchemaMultipleOf(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isFormDataParameterSubSchemaX(propertyValue)) {
return false;
}
continue;
}
if(!isFormDataParameterSubSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema
export function isPathParameterSubSchema(value: unknown): value is types.PathParameterSubSchema {
if(!_isMapPathParameterSubSchema(value)) {
return false;
}
return true;
}
function _isMapPathParameterSubSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("required" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "required":
if(!isPathParameterSubSchemaRequired(propertyValue)) {
return false;
}
continue;
case "in":
if(!isPathParameterSubSchemaIn(propertyValue)) {
return false;
}
continue;
case "description":
if(!isPathParameterSubSchemaDescription(propertyValue)) {
return false;
}
continue;
case "name":
if(!isPathParameterSubSchemaName(propertyValue)) {
return false;
}
continue;
case "type":
if(!isPathParameterSubSchemaType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isPathParameterSubSchemaFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isPathParameterSubSchemaItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isPathParameterSubSchemaCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isPathParameterSubSchemaDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isPathParameterSubSchemaMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isPathParameterSubSchemaExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isPathParameterSubSchemaMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isPathParameterSubSchemaExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isPathParameterSubSchemaMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isPathParameterSubSchemaMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isPathParameterSubSchemaPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isPathParameterSubSchemaMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isPathParameterSubSchemaMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isPathParameterSubSchemaUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isPathParameterSubSchemaEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isPathParameterSubSchemaMultipleOf(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isPathParameterSubSchemaX(propertyValue)) {
return false;
}
continue;
}
if(!isPathParameterSubSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/nonBodyParameter
export function isNonBodyParameter(value: unknown): value is types.NonBodyParameter {
if(!_isMapNonBodyParameter(value)) {
return false;
}
if(!_isOneOfNonBodyParameter(value)) {
return false;
}
return true;
}
function _isMapNonBodyParameter(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("name" in value)) {
return false;
}
if(!("in" in value)) {
return false;
}
if(!("type" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
}
return true;
}
function _isOneOfNonBodyParameter(value: unknown): value is unknown {
let validCounter = 0;
if(isNonBodyParameter0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isNonBodyParameter1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isNonBodyParameter2(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isNonBodyParameter3(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parameter
export function isParameter(value: unknown): value is types.Parameter {
if(!_isOneOfParameter(value)) {
return false;
}
return true;
}
function _isOneOfParameter(value: unknown): value is unknown {
let validCounter = 0;
if(isParameter0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isParameter1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema
export function isDefinitionsSchema(value: unknown): value is types.DefinitionsSchema {
if(!_isMapDefinitionsSchema(value)) {
return false;
}
return true;
}
function _isMapDefinitionsSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "$ref":
if(!isSchemaRef(propertyValue)) {
return false;
}
continue;
case "format":
if(!isSchemaFormat(propertyValue)) {
return false;
}
continue;
case "title":
if(!isSchemaTitle(propertyValue)) {
return false;
}
continue;
case "description":
if(!isSchemaDescription(propertyValue)) {
return false;
}
continue;
case "default":
if(!isSchemaDefault(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isSchemaMultipleOf(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isSchemaMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isSchemaExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isSchemaMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isSchemaExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isSchemaMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isSchemaMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isSchemaPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isSchemaMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isSchemaMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isSchemaUniqueItems(propertyValue)) {
return false;
}
continue;
case "maxProperties":
if(!isMaxProperties(propertyValue)) {
return false;
}
continue;
case "minProperties":
if(!isMinProperties(propertyValue)) {
return false;
}
continue;
case "required":
if(!isSchemaRequired(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isSchemaEnum(propertyValue)) {
return false;
}
continue;
case "additionalProperties":
if(!isPropertiesSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
case "type":
if(!isSchemaType(propertyValue)) {
return false;
}
continue;
case "items":
if(!isSchemaItems(propertyValue)) {
return false;
}
continue;
case "allOf":
if(!isAllOf(propertyValue)) {
return false;
}
continue;
case "properties":
if(!isProperties(propertyValue)) {
return false;
}
continue;
case "discriminator":
if(!isDiscriminator(propertyValue)) {
return false;
}
continue;
case "readOnly":
if(!isSchemaReadOnly(propertyValue)) {
return false;
}
continue;
case "xml":
if(!isSchemaXml(propertyValue)) {
return false;
}
continue;
case "externalDocs":
if(!isSchemaExternalDocs(propertyValue)) {
return false;
}
continue;
case "example":
if(!isSchemaExample(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isSchemaPatternPropertiesX(propertyValue)) {
return false;
}
continue;
}
if(!isDefinitionsSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema
export function isFileSchema(value: unknown): value is types.FileSchema {
if(!_isMapFileSchema(value)) {
return false;
}
return true;
}
function _isMapFileSchema(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "format":
if(!isFileSchemaFormat(propertyValue)) {
return false;
}
continue;
case "title":
if(!isFileSchemaTitle(propertyValue)) {
return false;
}
continue;
case "description":
if(!isFileSchemaDescription(propertyValue)) {
return false;
}
continue;
case "default":
if(!isFileSchemaDefault(propertyValue)) {
return false;
}
continue;
case "required":
if(!isFileSchemaRequired(propertyValue)) {
return false;
}
continue;
case "type":
if(!isFileSchemaType(propertyValue)) {
return false;
}
continue;
case "readOnly":
if(!isFileSchemaReadOnly(propertyValue)) {
return false;
}
continue;
case "externalDocs":
if(!isFileSchemaExternalDocs(propertyValue)) {
return false;
}
continue;
case "example":
if(!isFileSchemaExample(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isFileSchemaX(propertyValue)) {
return false;
}
continue;
}
if(!isFileSchemaAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems
export function isPrimitivesItems(value: unknown): value is types.PrimitivesItems {
if(!_isMapPrimitivesItems(value)) {
return false;
}
return true;
}
function _isMapPrimitivesItems(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isPrimitivesItemsType(propertyValue)) {
return false;
}
continue;
case "format":
if(!isPrimitivesItemsFormat(propertyValue)) {
return false;
}
continue;
case "items":
if(!isPrimitivesItemsItems(propertyValue)) {
return false;
}
continue;
case "collectionFormat":
if(!isPrimitivesItemsCollectionFormat(propertyValue)) {
return false;
}
continue;
case "default":
if(!isPrimitivesItemsDefault(propertyValue)) {
return false;
}
continue;
case "maximum":
if(!isPrimitivesItemsMaximum(propertyValue)) {
return false;
}
continue;
case "exclusiveMaximum":
if(!isPrimitivesItemsExclusiveMaximum(propertyValue)) {
return false;
}
continue;
case "minimum":
if(!isPrimitivesItemsMinimum(propertyValue)) {
return false;
}
continue;
case "exclusiveMinimum":
if(!isPrimitivesItemsExclusiveMinimum(propertyValue)) {
return false;
}
continue;
case "maxLength":
if(!isPrimitivesItemsMaxLength(propertyValue)) {
return false;
}
continue;
case "minLength":
if(!isPrimitivesItemsMinLength(propertyValue)) {
return false;
}
continue;
case "pattern":
if(!isPrimitivesItemsPattern(propertyValue)) {
return false;
}
continue;
case "maxItems":
if(!isPrimitivesItemsMaxItems(propertyValue)) {
return false;
}
continue;
case "minItems":
if(!isPrimitivesItemsMinItems(propertyValue)) {
return false;
}
continue;
case "uniqueItems":
if(!isPrimitivesItemsUniqueItems(propertyValue)) {
return false;
}
continue;
case "enum":
if(!isPrimitivesItemsEnum(propertyValue)) {
return false;
}
continue;
case "multipleOf":
if(!isPrimitivesItemsMultipleOf(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isPrimitivesItemsX(propertyValue)) {
return false;
}
continue;
}
if(!isPrimitivesItemsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/security
export function isDefinitionsSecurity(value: unknown): value is types.DefinitionsSecurity {
if(!_isArrayDefinitionsSecurity(value)) {
return false;
}
return true;
}
function _isArrayDefinitionsSecurity(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isSecurityItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityRequirement
export function isSecurityRequirement(value: unknown): value is types.SecurityRequirement {
if(!_isMapSecurityRequirement(value)) {
return false;
}
return true;
}
function _isMapSecurityRequirement(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isSecurityRequirementAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml
export function isDefinitionsXml(value: unknown): value is types.DefinitionsXml {
if(!_isMapDefinitionsXml(value)) {
return false;
}
return true;
}
function _isMapDefinitionsXml(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "name":
if(!isXmlName(propertyValue)) {
return false;
}
continue;
case "namespace":
if(!isNamespace(propertyValue)) {
return false;
}
continue;
case "prefix":
if(!isPrefix(propertyValue)) {
return false;
}
continue;
case "attribute":
if(!isAttribute(propertyValue)) {
return false;
}
continue;
case "wrapped":
if(!isWrapped(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isXmlX(propertyValue)) {
return false;
}
continue;
}
if(!isXmlAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/tag
export function isTag(value: unknown): value is types.Tag {
if(!_isMapTag(value)) {
return false;
}
return true;
}
function _isMapTag(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("name" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "name":
if(!isTagName(propertyValue)) {
return false;
}
continue;
case "description":
if(!isTagDescription(propertyValue)) {
return false;
}
continue;
case "externalDocs":
if(!isTagExternalDocs(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isTagX(propertyValue)) {
return false;
}
continue;
}
if(!isTagAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions
export function isDefinitionsSecurityDefinitions(value: unknown): value is types.DefinitionsSecurityDefinitions {
if(!_isMapDefinitionsSecurityDefinitions(value)) {
return false;
}
return true;
}
function _isMapDefinitionsSecurityDefinitions(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isSecurityDefinitionsAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity
export function isBasicAuthenticationSecurity(value: unknown): value is types.BasicAuthenticationSecurity {
if(!_isMapBasicAuthenticationSecurity(value)) {
return false;
}
return true;
}
function _isMapBasicAuthenticationSecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isBasicAuthenticationSecurityType(propertyValue)) {
return false;
}
continue;
case "description":
if(!isBasicAuthenticationSecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isBasicAuthenticationSecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isBasicAuthenticationSecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity
export function isApiKeySecurity(value: unknown): value is types.ApiKeySecurity {
if(!_isMapApiKeySecurity(value)) {
return false;
}
return true;
}
function _isMapApiKeySecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
if(!("name" in value)) {
return false;
}
if(!("in" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isApiKeySecurityType(propertyValue)) {
return false;
}
continue;
case "name":
if(!isApiKeySecurityName(propertyValue)) {
return false;
}
continue;
case "in":
if(!isApiKeySecurityIn(propertyValue)) {
return false;
}
continue;
case "description":
if(!isApiKeySecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isApiKeySecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isApiKeySecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity
export function isOauth2ImplicitSecurity(value: unknown): value is types.Oauth2ImplicitSecurity {
if(!_isMapOauth2ImplicitSecurity(value)) {
return false;
}
return true;
}
function _isMapOauth2ImplicitSecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
if(!("flow" in value)) {
return false;
}
if(!("authorizationUrl" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isOauth2ImplicitSecurityType(propertyValue)) {
return false;
}
continue;
case "flow":
if(!isOauth2ImplicitSecurityFlow(propertyValue)) {
return false;
}
continue;
case "scopes":
if(!isOauth2ImplicitSecurityScopes(propertyValue)) {
return false;
}
continue;
case "authorizationUrl":
if(!isOauth2ImplicitSecurityAuthorizationUrl(propertyValue)) {
return false;
}
continue;
case "description":
if(!isOauth2ImplicitSecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isOauth2ImplicitSecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isOauth2ImplicitSecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity
export function isOauth2PasswordSecurity(value: unknown): value is types.Oauth2PasswordSecurity {
if(!_isMapOauth2PasswordSecurity(value)) {
return false;
}
return true;
}
function _isMapOauth2PasswordSecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
if(!("flow" in value)) {
return false;
}
if(!("tokenUrl" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isOauth2PasswordSecurityType(propertyValue)) {
return false;
}
continue;
case "flow":
if(!isOauth2PasswordSecurityFlow(propertyValue)) {
return false;
}
continue;
case "scopes":
if(!isOauth2PasswordSecurityScopes(propertyValue)) {
return false;
}
continue;
case "tokenUrl":
if(!isOauth2PasswordSecurityTokenUrl(propertyValue)) {
return false;
}
continue;
case "description":
if(!isOauth2PasswordSecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isOauth2PasswordSecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isOauth2PasswordSecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity
export function isOauth2ApplicationSecurity(value: unknown): value is types.Oauth2ApplicationSecurity {
if(!_isMapOauth2ApplicationSecurity(value)) {
return false;
}
return true;
}
function _isMapOauth2ApplicationSecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
if(!("flow" in value)) {
return false;
}
if(!("tokenUrl" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isOauth2ApplicationSecurityType(propertyValue)) {
return false;
}
continue;
case "flow":
if(!isOauth2ApplicationSecurityFlow(propertyValue)) {
return false;
}
continue;
case "scopes":
if(!isOauth2ApplicationSecurityScopes(propertyValue)) {
return false;
}
continue;
case "tokenUrl":
if(!isOauth2ApplicationSecurityTokenUrl(propertyValue)) {
return false;
}
continue;
case "description":
if(!isOauth2ApplicationSecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isOauth2ApplicationSecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isOauth2ApplicationSecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity
export function isOauth2AccessCodeSecurity(value: unknown): value is types.Oauth2AccessCodeSecurity {
if(!_isMapOauth2AccessCodeSecurity(value)) {
return false;
}
return true;
}
function _isMapOauth2AccessCodeSecurity(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("type" in value)) {
return false;
}
if(!("flow" in value)) {
return false;
}
if(!("authorizationUrl" in value)) {
return false;
}
if(!("tokenUrl" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "type":
if(!isOauth2AccessCodeSecurityType(propertyValue)) {
return false;
}
continue;
case "flow":
if(!isOauth2AccessCodeSecurityFlow(propertyValue)) {
return false;
}
continue;
case "scopes":
if(!isOauth2AccessCodeSecurityScopes(propertyValue)) {
return false;
}
continue;
case "authorizationUrl":
if(!isOauth2AccessCodeSecurityAuthorizationUrl(propertyValue)) {
return false;
}
continue;
case "tokenUrl":
if(!isOauth2AccessCodeSecurityTokenUrl(propertyValue)) {
return false;
}
continue;
case "description":
if(!isOauth2AccessCodeSecurityDescription(propertyValue)) {
return false;
}
continue;
}
if(new RegExp("^x-").test(propertyName)) {
if(!isOauth2AccessCodeSecurityX(propertyValue)) {
return false;
}
continue;
}
if(!isOauth2AccessCodeSecurityAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2Scopes
export function isOauth2Scopes(value: unknown): value is types.Oauth2Scopes {
if(!_isMapOauth2Scopes(value)) {
return false;
}
return true;
}
function _isMapOauth2Scopes(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isOauth2ScopesAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/mediaTypeList
export function isMediaTypeList(value: unknown): value is types.MediaTypeList {
if(!_isArrayMediaTypeList(value)) {
return false;
}
return true;
}
function _isArrayMediaTypeList(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isMediaTypeListItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parametersList
export function isParametersList(value: unknown): value is types.ParametersList {
if(!_isArrayParametersList(value)) {
return false;
}
return true;
}
function _isArrayParametersList(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isParametersListItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schemesList
export function isSchemesList(value: unknown): value is types.SchemesList {
if(!_isArraySchemesList(value)) {
return false;
}
return true;
}
function _isArraySchemesList(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isSchemesListItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/collectionFormat
export function isDefinitionsCollectionFormat(value: unknown): value is types.DefinitionsCollectionFormat {
if(!_isStringDefinitionsCollectionFormat(value)) {
return false;
}
return true;
}
function _isStringDefinitionsCollectionFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "csv" && value !== "ssv" && value !== "tsv" && value !== "pipes") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/collectionFormatWithMulti
export function isCollectionFormatWithMulti(value: unknown): value is types.CollectionFormatWithMulti {
if(!_isStringCollectionFormatWithMulti(value)) {
return false;
}
return true;
}
function _isStringCollectionFormatWithMulti(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "csv" && value !== "ssv" && value !== "tsv" && value !== "pipes" && value !== "multi") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/title
export function isDefinitionsTitle(value: unknown): value is types.DefinitionsTitle {
if(!_isReferenceDefinitionsTitle(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsTitle(value: unknown): value is unknown {
if(!isDraft04Title(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/description
export function isDefinitionsDescription(value: unknown): value is types.DefinitionsDescription {
if(!_isReferenceDefinitionsDescription(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsDescription(value: unknown): value is unknown {
if(!isDraft04Description(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/default
export function isDefinitionsDefault(value: unknown): value is types.DefinitionsDefault {
if(!_isReferenceDefinitionsDefault(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsDefault(value: unknown): value is unknown {
if(!isDraft04Default(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/multipleOf
export function isDefinitionsMultipleOf(value: unknown): value is types.DefinitionsMultipleOf {
if(!_isReferenceDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMultipleOf(value: unknown): value is unknown {
if(!isDraft04MultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/maximum
export function isDefinitionsMaximum(value: unknown): value is types.DefinitionsMaximum {
if(!_isReferenceDefinitionsMaximum(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMaximum(value: unknown): value is unknown {
if(!isDraft04Maximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/exclusiveMaximum
export function isDefinitionsExclusiveMaximum(value: unknown): value is types.DefinitionsExclusiveMaximum {
if(!_isReferenceDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsExclusiveMaximum(value: unknown): value is unknown {
if(!isDraft04ExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/minimum
export function isDefinitionsMinimum(value: unknown): value is types.DefinitionsMinimum {
if(!_isReferenceDefinitionsMinimum(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMinimum(value: unknown): value is unknown {
if(!isDraft04Minimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/exclusiveMinimum
export function isDefinitionsExclusiveMinimum(value: unknown): value is types.DefinitionsExclusiveMinimum {
if(!_isReferenceDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsExclusiveMinimum(value: unknown): value is unknown {
if(!isDraft04ExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/maxLength
export function isDefinitionsMaxLength(value: unknown): value is types.DefinitionsMaxLength {
if(!_isReferenceDefinitionsMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMaxLength(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/minLength
export function isDefinitionsMinLength(value: unknown): value is types.DefinitionsMinLength {
if(!_isReferenceDefinitionsMinLength(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMinLength(value: unknown): value is unknown {
if(!isPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pattern
export function isDefinitionsPattern(value: unknown): value is types.DefinitionsPattern {
if(!_isReferenceDefinitionsPattern(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsPattern(value: unknown): value is unknown {
if(!isDraft04Pattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/maxItems
export function isDefinitionsMaxItems(value: unknown): value is types.DefinitionsMaxItems {
if(!_isReferenceDefinitionsMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMaxItems(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/minItems
export function isDefinitionsMinItems(value: unknown): value is types.DefinitionsMinItems {
if(!_isReferenceDefinitionsMinItems(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsMinItems(value: unknown): value is unknown {
if(!isPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/uniqueItems
export function isDefinitionsUniqueItems(value: unknown): value is types.DefinitionsUniqueItems {
if(!_isReferenceDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsUniqueItems(value: unknown): value is unknown {
if(!isDraft04UniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/enum
export function isDefinitionsEnum(value: unknown): value is types.DefinitionsEnum {
if(!_isReferenceDefinitionsEnum(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsEnum(value: unknown): value is unknown {
if(!isDraft04Enum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/jsonReference
export function isJsonReference(value: unknown): value is types.JsonReference {
if(!_isMapJsonReference(value)) {
return false;
}
return true;
}
function _isMapJsonReference(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
if(!("$ref" in value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
switch(propertyName) {
case "$ref":
if(!isJsonReferenceRef(propertyValue)) {
return false;
}
continue;
}
if(!isJsonReferenceAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/swagger
export function isSwagger(value: unknown): value is types.Swagger {
if(!_isStringSwagger(value)) {
return false;
}
return true;
}
function _isStringSwagger(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "2.0") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/info
export function isPropertiesInfo(value: unknown): value is types.PropertiesInfo {
if(!_isReferencePropertiesInfo(value)) {
return false;
}
return true;
}
function _isReferencePropertiesInfo(value: unknown): value is unknown {
if(!isDefinitionsInfo(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/host
export function isHost(value: unknown): value is types.Host {
if(!_isStringHost(value)) {
return false;
}
return true;
}
function _isStringHost(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(!new RegExp("^[^{}/ :\\\\]+(?::\\d+)?$").test(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/basePath
export function isBasePath(value: unknown): value is types.BasePath {
if(!_isStringBasePath(value)) {
return false;
}
return true;
}
function _isStringBasePath(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(!new RegExp("^/").test(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/schemes
export function isPropertiesSchemes(value: unknown): value is types.PropertiesSchemes {
if(!_isReferencePropertiesSchemes(value)) {
return false;
}
return true;
}
function _isReferencePropertiesSchemes(value: unknown): value is unknown {
if(!isSchemesList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/consumes
export function isPropertiesConsumes(value: unknown): value is types.PropertiesConsumes {
if(!_isAllOfPropertiesConsumes(value)) {
return false;
}
return true;
}
function _isAllOfPropertiesConsumes(value: unknown): value is unknown {
if(!isPropertiesAllOfConsumes0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/produces
export function isPropertiesProduces(value: unknown): value is types.PropertiesProduces {
if(!_isAllOfPropertiesProduces(value)) {
return false;
}
return true;
}
function _isAllOfPropertiesProduces(value: unknown): value is unknown {
if(!isPropertiesAllOfProduces0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/paths
export function isPropertiesPaths(value: unknown): value is types.PropertiesPaths {
if(!_isReferencePropertiesPaths(value)) {
return false;
}
return true;
}
function _isReferencePropertiesPaths(value: unknown): value is unknown {
if(!isDefinitionsPaths(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/definitions
export function isPropertiesDefinitions(value: unknown): value is types.PropertiesDefinitions {
if(!_isReferencePropertiesDefinitions(value)) {
return false;
}
return true;
}
function _isReferencePropertiesDefinitions(value: unknown): value is unknown {
if(!isDefinitionsDefinitions(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/parameters
export function isPropertiesParameters(value: unknown): value is types.PropertiesParameters {
if(!_isReferencePropertiesParameters(value)) {
return false;
}
return true;
}
function _isReferencePropertiesParameters(value: unknown): value is unknown {
if(!isParameterDefinitions(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/responses
export function isPropertiesResponses(value: unknown): value is types.PropertiesResponses {
if(!_isReferencePropertiesResponses(value)) {
return false;
}
return true;
}
function _isReferencePropertiesResponses(value: unknown): value is unknown {
if(!isResponseDefinitions(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/security
export function isPropertiesSecurity(value: unknown): value is types.PropertiesSecurity {
if(!_isReferencePropertiesSecurity(value)) {
return false;
}
return true;
}
function _isReferencePropertiesSecurity(value: unknown): value is unknown {
if(!isDefinitionsSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/securityDefinitions
export function isPropertiesSecurityDefinitions(value: unknown): value is types.PropertiesSecurityDefinitions {
if(!_isReferencePropertiesSecurityDefinitions(value)) {
return false;
}
return true;
}
function _isReferencePropertiesSecurityDefinitions(value: unknown): value is unknown {
if(!isDefinitionsSecurityDefinitions(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/tags
export function isPropertiesTags(value: unknown): value is types.PropertiesTags {
if(!_isArrayPropertiesTags(value)) {
return false;
}
return true;
}
function _isArrayPropertiesTags(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isPropertiesTagsItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/externalDocs
export function isPropertiesExternalDocs(value: unknown): value is types.PropertiesExternalDocs {
if(!_isReferencePropertiesExternalDocs(value)) {
return false;
}
return true;
}
function _isReferencePropertiesExternalDocs(value: unknown): value is unknown {
if(!isDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/additionalProperties
export function isV2AdditionalProperties(value: unknown): value is types.V2AdditionalProperties {
if(!_isNeverV2AdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverV2AdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/patternProperties/^x-
export function isV2PatternPropertiesX(value: unknown): value is types.V2PatternPropertiesX {
if(!_isReferenceV2PatternPropertiesX(value)) {
return false;
}
return true;
}
function _isReferenceV2PatternPropertiesX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/title
export function isInfoTitle(value: unknown): value is types.InfoTitle {
if(!_isStringInfoTitle(value)) {
return false;
}
return true;
}
function _isStringInfoTitle(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/version
export function isVersion(value: unknown): value is types.Version {
if(!_isStringVersion(value)) {
return false;
}
return true;
}
function _isStringVersion(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/description
export function isInfoDescription(value: unknown): value is types.InfoDescription {
if(!_isStringInfoDescription(value)) {
return false;
}
return true;
}
function _isStringInfoDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/termsOfService
export function isTermsOfService(value: unknown): value is types.TermsOfService {
if(!_isStringTermsOfService(value)) {
return false;
}
return true;
}
function _isStringTermsOfService(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/contact
export function isInfoContact(value: unknown): value is types.InfoContact {
if(!_isReferenceInfoContact(value)) {
return false;
}
return true;
}
function _isReferenceInfoContact(value: unknown): value is unknown {
if(!isDefinitionsContact(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/properties/license
export function isInfoLicense(value: unknown): value is types.InfoLicense {
if(!_isReferenceInfoLicense(value)) {
return false;
}
return true;
}
function _isReferenceInfoLicense(value: unknown): value is unknown {
if(!isDefinitionsLicense(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/info/additionalProperties
export function isInfoAdditionalProperties(value: unknown): value is types.InfoAdditionalProperties {
if(!_isNeverInfoAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverInfoAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/info/patternProperties/^x-
export function isInfoX(value: unknown): value is types.InfoX {
if(!_isReferenceInfoX(value)) {
return false;
}
return true;
}
function _isReferenceInfoX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/contact/properties/name
export function isContactName(value: unknown): value is types.ContactName {
if(!_isStringContactName(value)) {
return false;
}
return true;
}
function _isStringContactName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/contact/properties/url
export function isContactUrl(value: unknown): value is types.ContactUrl {
if(!_isStringContactUrl(value)) {
return false;
}
return true;
}
function _isStringContactUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/contact/properties/email
export function isEmail(value: unknown): value is types.Email {
if(!_isStringEmail(value)) {
return false;
}
return true;
}
function _isStringEmail(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/contact/additionalProperties
export function isContactAdditionalProperties(value: unknown): value is types.ContactAdditionalProperties {
if(!_isNeverContactAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverContactAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/contact/patternProperties/^x-
export function isContactX(value: unknown): value is types.ContactX {
if(!_isReferenceContactX(value)) {
return false;
}
return true;
}
function _isReferenceContactX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/license/properties/name
export function isLicenseName(value: unknown): value is types.LicenseName {
if(!_isStringLicenseName(value)) {
return false;
}
return true;
}
function _isStringLicenseName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/license/properties/url
export function isLicenseUrl(value: unknown): value is types.LicenseUrl {
if(!_isStringLicenseUrl(value)) {
return false;
}
return true;
}
function _isStringLicenseUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/license/additionalProperties
export function isLicenseAdditionalProperties(value: unknown): value is types.LicenseAdditionalProperties {
if(!_isNeverLicenseAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverLicenseAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/license/patternProperties/^x-
export function isLicenseX(value: unknown): value is types.LicenseX {
if(!_isReferenceLicenseX(value)) {
return false;
}
return true;
}
function _isReferenceLicenseX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/paths/additionalProperties
export function isPathsAdditionalProperties(value: unknown): value is types.PathsAdditionalProperties {
if(!_isNeverPathsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverPathsAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^x-
export function isPathsX(value: unknown): value is types.PathsX {
if(!_isReferencePathsX(value)) {
return false;
}
return true;
}
function _isReferencePathsX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/paths/patternProperties/^/
export function isPatternProperties(value: unknown): value is types.PatternProperties {
if(!_isReferencePatternProperties(value)) {
return false;
}
return true;
}
function _isReferencePatternProperties(value: unknown): value is unknown {
if(!isPathItem(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/definitions/additionalProperties
export function isDefinitionsAdditionalProperties(value: unknown): value is types.DefinitionsAdditionalProperties {
if(!_isReferenceDefinitionsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isReferenceDefinitionsAdditionalProperties(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parameterDefinitions/additionalProperties
export function isParameterDefinitionsAdditionalProperties(value: unknown): value is types.ParameterDefinitionsAdditionalProperties {
if(!_isReferenceParameterDefinitionsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isReferenceParameterDefinitionsAdditionalProperties(value: unknown): value is unknown {
if(!isParameter(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responseDefinitions/additionalProperties
export function isResponseDefinitionsAdditionalProperties(value: unknown): value is types.ResponseDefinitionsAdditionalProperties {
if(!_isReferenceResponseDefinitionsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isReferenceResponseDefinitionsAdditionalProperties(value: unknown): value is unknown {
if(!isResponse(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/description
export function isExternalDocsDescription(value: unknown): value is types.ExternalDocsDescription {
if(!_isStringExternalDocsDescription(value)) {
return false;
}
return true;
}
function _isStringExternalDocsDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/url
export function isExternalDocsUrl(value: unknown): value is types.ExternalDocsUrl {
if(!_isStringExternalDocsUrl(value)) {
return false;
}
return true;
}
function _isStringExternalDocsUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/externalDocs/additionalProperties
export function isExternalDocsAdditionalProperties(value: unknown): value is types.ExternalDocsAdditionalProperties {
if(!_isNeverExternalDocsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverExternalDocsAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/externalDocs/patternProperties/^x-
export function isExternalDocsX(value: unknown): value is types.ExternalDocsX {
if(!_isReferenceExternalDocsX(value)) {
return false;
}
return true;
}
function _isReferenceExternalDocsX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/examples/additionalProperties
export function isExamplesAdditionalProperties(value: unknown): value is types.ExamplesAdditionalProperties {
if(!_isAnyExamplesAdditionalProperties(value)) {
return false;
}
return true;
}
function _isAnyExamplesAdditionalProperties(value: unknown): value is unknown {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/tags
export function isOperationTags(value: unknown): value is types.OperationTags {
if(!_isArrayOperationTags(value)) {
return false;
}
return true;
}
function _isArrayOperationTags(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isOperationTagsItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/summary
export function isSummary(value: unknown): value is types.Summary {
if(!_isStringSummary(value)) {
return false;
}
return true;
}
function _isStringSummary(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/description
export function isOperationDescription(value: unknown): value is types.OperationDescription {
if(!_isStringOperationDescription(value)) {
return false;
}
return true;
}
function _isStringOperationDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/externalDocs
export function isOperationExternalDocs(value: unknown): value is types.OperationExternalDocs {
if(!_isReferenceOperationExternalDocs(value)) {
return false;
}
return true;
}
function _isReferenceOperationExternalDocs(value: unknown): value is unknown {
if(!isDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/operationId
export function isOperationId(value: unknown): value is types.OperationId {
if(!_isStringOperationId(value)) {
return false;
}
return true;
}
function _isStringOperationId(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/produces
export function isOperationProduces(value: unknown): value is types.OperationProduces {
if(!_isAllOfOperationProduces(value)) {
return false;
}
return true;
}
function _isAllOfOperationProduces(value: unknown): value is unknown {
if(!isOperationAllOfProduces0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes
export function isOperationConsumes(value: unknown): value is types.OperationConsumes {
if(!_isAllOfOperationConsumes(value)) {
return false;
}
return true;
}
function _isAllOfOperationConsumes(value: unknown): value is unknown {
if(!isOperationAllOfConsumes0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/parameters
export function isOperationParameters(value: unknown): value is types.OperationParameters {
if(!_isReferenceOperationParameters(value)) {
return false;
}
return true;
}
function _isReferenceOperationParameters(value: unknown): value is unknown {
if(!isParametersList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/responses
export function isOperationResponses(value: unknown): value is types.OperationResponses {
if(!_isReferenceOperationResponses(value)) {
return false;
}
return true;
}
function _isReferenceOperationResponses(value: unknown): value is unknown {
if(!isDefinitionsResponses(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/schemes
export function isOperationSchemes(value: unknown): value is types.OperationSchemes {
if(!_isReferenceOperationSchemes(value)) {
return false;
}
return true;
}
function _isReferenceOperationSchemes(value: unknown): value is unknown {
if(!isSchemesList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/deprecated
export function isDeprecated(value: unknown): value is types.Deprecated {
if(!_isBooleanDeprecated(value)) {
return false;
}
return true;
}
function _isBooleanDeprecated(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/security
export function isOperationSecurity(value: unknown): value is types.OperationSecurity {
if(!_isReferenceOperationSecurity(value)) {
return false;
}
return true;
}
function _isReferenceOperationSecurity(value: unknown): value is unknown {
if(!isDefinitionsSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/additionalProperties
export function isOperationAdditionalProperties(value: unknown): value is types.OperationAdditionalProperties {
if(!_isNeverOperationAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverOperationAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/operation/patternProperties/^x-
export function isOperationX(value: unknown): value is types.OperationX {
if(!_isReferenceOperationX(value)) {
return false;
}
return true;
}
function _isReferenceOperationX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/$ref
export function isPathItemRef(value: unknown): value is types.PathItemRef {
if(!_isStringPathItemRef(value)) {
return false;
}
return true;
}
function _isStringPathItemRef(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/get
export function isGet(value: unknown): value is types.Get {
if(!_isReferenceGet(value)) {
return false;
}
return true;
}
function _isReferenceGet(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/put
export function isPut(value: unknown): value is types.Put {
if(!_isReferencePut(value)) {
return false;
}
return true;
}
function _isReferencePut(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/post
export function isPost(value: unknown): value is types.Post {
if(!_isReferencePost(value)) {
return false;
}
return true;
}
function _isReferencePost(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/delete
export function isDelete(value: unknown): value is types.Delete {
if(!_isReferenceDelete(value)) {
return false;
}
return true;
}
function _isReferenceDelete(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/options
export function isOptions(value: unknown): value is types.Options {
if(!_isReferenceOptions(value)) {
return false;
}
return true;
}
function _isReferenceOptions(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/head
export function isHead(value: unknown): value is types.Head {
if(!_isReferenceHead(value)) {
return false;
}
return true;
}
function _isReferenceHead(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/patch
export function isPatch(value: unknown): value is types.Patch {
if(!_isReferencePatch(value)) {
return false;
}
return true;
}
function _isReferencePatch(value: unknown): value is unknown {
if(!isOperation(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/properties/parameters
export function isPathItemParameters(value: unknown): value is types.PathItemParameters {
if(!_isReferencePathItemParameters(value)) {
return false;
}
return true;
}
function _isReferencePathItemParameters(value: unknown): value is unknown {
if(!isParametersList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/additionalProperties
export function isPathItemAdditionalProperties(value: unknown): value is types.PathItemAdditionalProperties {
if(!_isNeverPathItemAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverPathItemAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/pathItem/patternProperties/^x-
export function isPathItemX(value: unknown): value is types.PathItemX {
if(!_isReferencePathItemX(value)) {
return false;
}
return true;
}
function _isReferencePathItemX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responses/additionalProperties
export function isResponsesAdditionalProperties(value: unknown): value is types.ResponsesAdditionalProperties {
if(!_isNeverResponsesAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverResponsesAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^([0-9]{3})$|^(default)$
export function isResponses093Default(value: unknown): value is types.Responses093Default {
if(!_isReferenceResponses093Default(value)) {
return false;
}
return true;
}
function _isReferenceResponses093Default(value: unknown): value is unknown {
if(!isResponseValue(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responses/patternProperties/^x-
export function isResponsesX(value: unknown): value is types.ResponsesX {
if(!_isReferenceResponsesX(value)) {
return false;
}
return true;
}
function _isReferenceResponsesX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responses/not
export function isNot(value: unknown): value is types.Not {
if(!_isMapNot(value)) {
return false;
}
return true;
}
function _isMapNot(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(new RegExp("^x-").test(propertyName)) {
if(!isNotX(propertyValue)) {
return false;
}
continue;
}
if(!isNotAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/0
export function isResponseValue0(value: unknown): value is types.ResponseValue0 {
if(!_isReferenceResponseValue0(value)) {
return false;
}
return true;
}
function _isReferenceResponseValue0(value: unknown): value is unknown {
if(!isResponse(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responseValue/oneOf/1
export function isResponseValue1(value: unknown): value is types.ResponseValue1 {
if(!_isReferenceResponseValue1(value)) {
return false;
}
return true;
}
function _isReferenceResponseValue1(value: unknown): value is unknown {
if(!isJsonReference(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/description
export function isResponseDescription(value: unknown): value is types.ResponseDescription {
if(!_isStringResponseDescription(value)) {
return false;
}
return true;
}
function _isStringResponseDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/schema
export function isResponseSchema(value: unknown): value is types.ResponseSchema {
if(!_isOneOfResponseSchema(value)) {
return false;
}
return true;
}
function _isOneOfResponseSchema(value: unknown): value is unknown {
let validCounter = 0;
if(isResponse0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isResponse1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/headers
export function isResponseHeaders(value: unknown): value is types.ResponseHeaders {
if(!_isReferenceResponseHeaders(value)) {
return false;
}
return true;
}
function _isReferenceResponseHeaders(value: unknown): value is unknown {
if(!isDefinitionsHeaders(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/examples
export function isResponseExamples(value: unknown): value is types.ResponseExamples {
if(!_isReferenceResponseExamples(value)) {
return false;
}
return true;
}
function _isReferenceResponseExamples(value: unknown): value is unknown {
if(!isDefinitionsExamples(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/additionalProperties
export function isResponseAdditionalProperties(value: unknown): value is types.ResponseAdditionalProperties {
if(!_isNeverResponseAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverResponseAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/response/patternProperties/^x-
export function isResponseX(value: unknown): value is types.ResponseX {
if(!_isReferenceResponseX(value)) {
return false;
}
return true;
}
function _isReferenceResponseX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headers/additionalProperties
export function isHeadersAdditionalProperties(value: unknown): value is types.HeadersAdditionalProperties {
if(!_isReferenceHeadersAdditionalProperties(value)) {
return false;
}
return true;
}
function _isReferenceHeadersAdditionalProperties(value: unknown): value is unknown {
if(!isHeader(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/type
export function isHeaderType(value: unknown): value is types.HeaderType {
if(!_isStringHeaderType(value)) {
return false;
}
return true;
}
function _isStringHeaderType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "integer" && value !== "boolean" && value !== "array") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/format
export function isHeaderFormat(value: unknown): value is types.HeaderFormat {
if(!_isStringHeaderFormat(value)) {
return false;
}
return true;
}
function _isStringHeaderFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/items
export function isHeaderItems(value: unknown): value is types.HeaderItems {
if(!_isReferenceHeaderItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/collectionFormat
export function isHeaderCollectionFormat(value: unknown): value is types.HeaderCollectionFormat {
if(!_isReferenceHeaderCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferenceHeaderCollectionFormat(value: unknown): value is unknown {
if(!isDefinitionsCollectionFormat(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/default
export function isHeaderDefault(value: unknown): value is types.HeaderDefault {
if(!_isReferenceHeaderDefault(value)) {
return false;
}
return true;
}
function _isReferenceHeaderDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/maximum
export function isHeaderMaximum(value: unknown): value is types.HeaderMaximum {
if(!_isReferenceHeaderMaximum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMaximum
export function isHeaderExclusiveMaximum(value: unknown): value is types.HeaderExclusiveMaximum {
if(!_isReferenceHeaderExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/minimum
export function isHeaderMinimum(value: unknown): value is types.HeaderMinimum {
if(!_isReferenceHeaderMinimum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMinimum
export function isHeaderExclusiveMinimum(value: unknown): value is types.HeaderExclusiveMinimum {
if(!_isReferenceHeaderExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/maxLength
export function isHeaderMaxLength(value: unknown): value is types.HeaderMaxLength {
if(!_isReferenceHeaderMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/minLength
export function isHeaderMinLength(value: unknown): value is types.HeaderMinLength {
if(!_isReferenceHeaderMinLength(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/pattern
export function isHeaderPattern(value: unknown): value is types.HeaderPattern {
if(!_isReferenceHeaderPattern(value)) {
return false;
}
return true;
}
function _isReferenceHeaderPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/maxItems
export function isHeaderMaxItems(value: unknown): value is types.HeaderMaxItems {
if(!_isReferenceHeaderMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/minItems
export function isHeaderMinItems(value: unknown): value is types.HeaderMinItems {
if(!_isReferenceHeaderMinItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/uniqueItems
export function isHeaderUniqueItems(value: unknown): value is types.HeaderUniqueItems {
if(!_isReferenceHeaderUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/enum
export function isHeaderEnum(value: unknown): value is types.HeaderEnum {
if(!_isReferenceHeaderEnum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/multipleOf
export function isHeaderMultipleOf(value: unknown): value is types.HeaderMultipleOf {
if(!_isReferenceHeaderMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceHeaderMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/properties/description
export function isHeaderDescription(value: unknown): value is types.HeaderDescription {
if(!_isStringHeaderDescription(value)) {
return false;
}
return true;
}
function _isStringHeaderDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/header/additionalProperties
export function isHeaderAdditionalProperties(value: unknown): value is types.HeaderAdditionalProperties {
if(!_isNeverHeaderAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverHeaderAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/header/patternProperties/^x-
export function isHeaderX(value: unknown): value is types.HeaderX {
if(!_isReferenceHeaderX(value)) {
return false;
}
return true;
}
function _isReferenceHeaderX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalProperties
export function isVendorExtensionAdditionalProperties(value: unknown): value is types.VendorExtensionAdditionalProperties {
if(!_isAnyVendorExtensionAdditionalProperties(value)) {
return false;
}
return true;
}
function _isAnyVendorExtensionAdditionalProperties(value: unknown): value is unknown {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/vendorExtension/additionalItems
export function isVendorExtensionAdditionalItems(value: unknown): value is types.VendorExtensionAdditionalItems {
if(!_isAnyVendorExtensionAdditionalItems(value)) {
return false;
}
return true;
}
function _isAnyVendorExtensionAdditionalItems(value: unknown): value is unknown {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/description
export function isBodyParameterDescription(value: unknown): value is types.BodyParameterDescription {
if(!_isStringBodyParameterDescription(value)) {
return false;
}
return true;
}
function _isStringBodyParameterDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/name
export function isBodyParameterName(value: unknown): value is types.BodyParameterName {
if(!_isStringBodyParameterName(value)) {
return false;
}
return true;
}
function _isStringBodyParameterName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/in
export function isBodyParameterIn(value: unknown): value is types.BodyParameterIn {
if(!_isStringBodyParameterIn(value)) {
return false;
}
return true;
}
function _isStringBodyParameterIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "body") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/required
export function isBodyParameterRequired(value: unknown): value is types.BodyParameterRequired {
if(!_isBooleanBodyParameterRequired(value)) {
return false;
}
return true;
}
function _isBooleanBodyParameterRequired(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/schema
export function isBodyParameterSchema(value: unknown): value is types.BodyParameterSchema {
if(!_isReferenceBodyParameterSchema(value)) {
return false;
}
return true;
}
function _isReferenceBodyParameterSchema(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/additionalProperties
export function isBodyParameterAdditionalProperties(value: unknown): value is types.BodyParameterAdditionalProperties {
if(!_isNeverBodyParameterAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverBodyParameterAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/bodyParameter/patternProperties/^x-
export function isBodyParameterX(value: unknown): value is types.BodyParameterX {
if(!_isReferenceBodyParameterX(value)) {
return false;
}
return true;
}
function _isReferenceBodyParameterX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/required
export function isHeaderParameterSubSchemaRequired(value: unknown): value is types.HeaderParameterSubSchemaRequired {
if(!_isBooleanHeaderParameterSubSchemaRequired(value)) {
return false;
}
return true;
}
function _isBooleanHeaderParameterSubSchemaRequired(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/in
export function isHeaderParameterSubSchemaIn(value: unknown): value is types.HeaderParameterSubSchemaIn {
if(!_isStringHeaderParameterSubSchemaIn(value)) {
return false;
}
return true;
}
function _isStringHeaderParameterSubSchemaIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "header") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/description
export function isHeaderParameterSubSchemaDescription(value: unknown): value is types.HeaderParameterSubSchemaDescription {
if(!_isStringHeaderParameterSubSchemaDescription(value)) {
return false;
}
return true;
}
function _isStringHeaderParameterSubSchemaDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/name
export function isHeaderParameterSubSchemaName(value: unknown): value is types.HeaderParameterSubSchemaName {
if(!_isStringHeaderParameterSubSchemaName(value)) {
return false;
}
return true;
}
function _isStringHeaderParameterSubSchemaName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/type
export function isHeaderParameterSubSchemaType(value: unknown): value is types.HeaderParameterSubSchemaType {
if(!_isStringHeaderParameterSubSchemaType(value)) {
return false;
}
return true;
}
function _isStringHeaderParameterSubSchemaType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "boolean" && value !== "integer" && value !== "array") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/format
export function isHeaderParameterSubSchemaFormat(value: unknown): value is types.HeaderParameterSubSchemaFormat {
if(!_isStringHeaderParameterSubSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringHeaderParameterSubSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/items
export function isHeaderParameterSubSchemaItems(value: unknown): value is types.HeaderParameterSubSchemaItems {
if(!_isReferenceHeaderParameterSubSchemaItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/collectionFormat
export function isHeaderParameterSubSchemaCollectionFormat(value: unknown): value is types.HeaderParameterSubSchemaCollectionFormat {
if(!_isReferenceHeaderParameterSubSchemaCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaCollectionFormat(value: unknown): value is unknown {
if(!isDefinitionsCollectionFormat(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/default
export function isHeaderParameterSubSchemaDefault(value: unknown): value is types.HeaderParameterSubSchemaDefault {
if(!_isReferenceHeaderParameterSubSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maximum
export function isHeaderParameterSubSchemaMaximum(value: unknown): value is types.HeaderParameterSubSchemaMaximum {
if(!_isReferenceHeaderParameterSubSchemaMaximum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMaximum
export function isHeaderParameterSubSchemaExclusiveMaximum(value: unknown): value is types.HeaderParameterSubSchemaExclusiveMaximum {
if(!_isReferenceHeaderParameterSubSchemaExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minimum
export function isHeaderParameterSubSchemaMinimum(value: unknown): value is types.HeaderParameterSubSchemaMinimum {
if(!_isReferenceHeaderParameterSubSchemaMinimum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMinimum
export function isHeaderParameterSubSchemaExclusiveMinimum(value: unknown): value is types.HeaderParameterSubSchemaExclusiveMinimum {
if(!_isReferenceHeaderParameterSubSchemaExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxLength
export function isHeaderParameterSubSchemaMaxLength(value: unknown): value is types.HeaderParameterSubSchemaMaxLength {
if(!_isReferenceHeaderParameterSubSchemaMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minLength
export function isHeaderParameterSubSchemaMinLength(value: unknown): value is types.HeaderParameterSubSchemaMinLength {
if(!_isReferenceHeaderParameterSubSchemaMinLength(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/pattern
export function isHeaderParameterSubSchemaPattern(value: unknown): value is types.HeaderParameterSubSchemaPattern {
if(!_isReferenceHeaderParameterSubSchemaPattern(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxItems
export function isHeaderParameterSubSchemaMaxItems(value: unknown): value is types.HeaderParameterSubSchemaMaxItems {
if(!_isReferenceHeaderParameterSubSchemaMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minItems
export function isHeaderParameterSubSchemaMinItems(value: unknown): value is types.HeaderParameterSubSchemaMinItems {
if(!_isReferenceHeaderParameterSubSchemaMinItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/uniqueItems
export function isHeaderParameterSubSchemaUniqueItems(value: unknown): value is types.HeaderParameterSubSchemaUniqueItems {
if(!_isReferenceHeaderParameterSubSchemaUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/enum
export function isHeaderParameterSubSchemaEnum(value: unknown): value is types.HeaderParameterSubSchemaEnum {
if(!_isReferenceHeaderParameterSubSchemaEnum(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/multipleOf
export function isHeaderParameterSubSchemaMultipleOf(value: unknown): value is types.HeaderParameterSubSchemaMultipleOf {
if(!_isReferenceHeaderParameterSubSchemaMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/additionalProperties
export function isHeaderParameterSubSchemaAdditionalProperties(value: unknown): value is types.HeaderParameterSubSchemaAdditionalProperties {
if(!_isNeverHeaderParameterSubSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverHeaderParameterSubSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/patternProperties/^x-
export function isHeaderParameterSubSchemaX(value: unknown): value is types.HeaderParameterSubSchemaX {
if(!_isReferenceHeaderParameterSubSchemaX(value)) {
return false;
}
return true;
}
function _isReferenceHeaderParameterSubSchemaX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/required
export function isQueryParameterSubSchemaRequired(value: unknown): value is types.QueryParameterSubSchemaRequired {
if(!_isBooleanQueryParameterSubSchemaRequired(value)) {
return false;
}
return true;
}
function _isBooleanQueryParameterSubSchemaRequired(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/in
export function isQueryParameterSubSchemaIn(value: unknown): value is types.QueryParameterSubSchemaIn {
if(!_isStringQueryParameterSubSchemaIn(value)) {
return false;
}
return true;
}
function _isStringQueryParameterSubSchemaIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "query") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/description
export function isQueryParameterSubSchemaDescription(value: unknown): value is types.QueryParameterSubSchemaDescription {
if(!_isStringQueryParameterSubSchemaDescription(value)) {
return false;
}
return true;
}
function _isStringQueryParameterSubSchemaDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/name
export function isQueryParameterSubSchemaName(value: unknown): value is types.QueryParameterSubSchemaName {
if(!_isStringQueryParameterSubSchemaName(value)) {
return false;
}
return true;
}
function _isStringQueryParameterSubSchemaName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/allowEmptyValue
export function isQueryParameterSubSchemaAllowEmptyValue(value: unknown): value is types.QueryParameterSubSchemaAllowEmptyValue {
if(!_isBooleanQueryParameterSubSchemaAllowEmptyValue(value)) {
return false;
}
return true;
}
function _isBooleanQueryParameterSubSchemaAllowEmptyValue(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/type
export function isQueryParameterSubSchemaType(value: unknown): value is types.QueryParameterSubSchemaType {
if(!_isStringQueryParameterSubSchemaType(value)) {
return false;
}
return true;
}
function _isStringQueryParameterSubSchemaType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "boolean" && value !== "integer" && value !== "array") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/format
export function isQueryParameterSubSchemaFormat(value: unknown): value is types.QueryParameterSubSchemaFormat {
if(!_isStringQueryParameterSubSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringQueryParameterSubSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/items
export function isQueryParameterSubSchemaItems(value: unknown): value is types.QueryParameterSubSchemaItems {
if(!_isReferenceQueryParameterSubSchemaItems(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/collectionFormat
export function isQueryParameterSubSchemaCollectionFormat(value: unknown): value is types.QueryParameterSubSchemaCollectionFormat {
if(!_isReferenceQueryParameterSubSchemaCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaCollectionFormat(value: unknown): value is unknown {
if(!isCollectionFormatWithMulti(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/default
export function isQueryParameterSubSchemaDefault(value: unknown): value is types.QueryParameterSubSchemaDefault {
if(!_isReferenceQueryParameterSubSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maximum
export function isQueryParameterSubSchemaMaximum(value: unknown): value is types.QueryParameterSubSchemaMaximum {
if(!_isReferenceQueryParameterSubSchemaMaximum(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMaximum
export function isQueryParameterSubSchemaExclusiveMaximum(value: unknown): value is types.QueryParameterSubSchemaExclusiveMaximum {
if(!_isReferenceQueryParameterSubSchemaExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minimum
export function isQueryParameterSubSchemaMinimum(value: unknown): value is types.QueryParameterSubSchemaMinimum {
if(!_isReferenceQueryParameterSubSchemaMinimum(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMinimum
export function isQueryParameterSubSchemaExclusiveMinimum(value: unknown): value is types.QueryParameterSubSchemaExclusiveMinimum {
if(!_isReferenceQueryParameterSubSchemaExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxLength
export function isQueryParameterSubSchemaMaxLength(value: unknown): value is types.QueryParameterSubSchemaMaxLength {
if(!_isReferenceQueryParameterSubSchemaMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minLength
export function isQueryParameterSubSchemaMinLength(value: unknown): value is types.QueryParameterSubSchemaMinLength {
if(!_isReferenceQueryParameterSubSchemaMinLength(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/pattern
export function isQueryParameterSubSchemaPattern(value: unknown): value is types.QueryParameterSubSchemaPattern {
if(!_isReferenceQueryParameterSubSchemaPattern(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxItems
export function isQueryParameterSubSchemaMaxItems(value: unknown): value is types.QueryParameterSubSchemaMaxItems {
if(!_isReferenceQueryParameterSubSchemaMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minItems
export function isQueryParameterSubSchemaMinItems(value: unknown): value is types.QueryParameterSubSchemaMinItems {
if(!_isReferenceQueryParameterSubSchemaMinItems(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/uniqueItems
export function isQueryParameterSubSchemaUniqueItems(value: unknown): value is types.QueryParameterSubSchemaUniqueItems {
if(!_isReferenceQueryParameterSubSchemaUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/enum
export function isQueryParameterSubSchemaEnum(value: unknown): value is types.QueryParameterSubSchemaEnum {
if(!_isReferenceQueryParameterSubSchemaEnum(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/multipleOf
export function isQueryParameterSubSchemaMultipleOf(value: unknown): value is types.QueryParameterSubSchemaMultipleOf {
if(!_isReferenceQueryParameterSubSchemaMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/additionalProperties
export function isQueryParameterSubSchemaAdditionalProperties(value: unknown): value is types.QueryParameterSubSchemaAdditionalProperties {
if(!_isNeverQueryParameterSubSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverQueryParameterSubSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/patternProperties/^x-
export function isQueryParameterSubSchemaX(value: unknown): value is types.QueryParameterSubSchemaX {
if(!_isReferenceQueryParameterSubSchemaX(value)) {
return false;
}
return true;
}
function _isReferenceQueryParameterSubSchemaX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/required
export function isFormDataParameterSubSchemaRequired(value: unknown): value is types.FormDataParameterSubSchemaRequired {
if(!_isBooleanFormDataParameterSubSchemaRequired(value)) {
return false;
}
return true;
}
function _isBooleanFormDataParameterSubSchemaRequired(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/in
export function isFormDataParameterSubSchemaIn(value: unknown): value is types.FormDataParameterSubSchemaIn {
if(!_isStringFormDataParameterSubSchemaIn(value)) {
return false;
}
return true;
}
function _isStringFormDataParameterSubSchemaIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "formData") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/description
export function isFormDataParameterSubSchemaDescription(value: unknown): value is types.FormDataParameterSubSchemaDescription {
if(!_isStringFormDataParameterSubSchemaDescription(value)) {
return false;
}
return true;
}
function _isStringFormDataParameterSubSchemaDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/name
export function isFormDataParameterSubSchemaName(value: unknown): value is types.FormDataParameterSubSchemaName {
if(!_isStringFormDataParameterSubSchemaName(value)) {
return false;
}
return true;
}
function _isStringFormDataParameterSubSchemaName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/allowEmptyValue
export function isFormDataParameterSubSchemaAllowEmptyValue(value: unknown): value is types.FormDataParameterSubSchemaAllowEmptyValue {
if(!_isBooleanFormDataParameterSubSchemaAllowEmptyValue(value)) {
return false;
}
return true;
}
function _isBooleanFormDataParameterSubSchemaAllowEmptyValue(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/type
export function isFormDataParameterSubSchemaType(value: unknown): value is types.FormDataParameterSubSchemaType {
if(!_isStringFormDataParameterSubSchemaType(value)) {
return false;
}
return true;
}
function _isStringFormDataParameterSubSchemaType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "boolean" && value !== "integer" && value !== "array" && value !== "file") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/format
export function isFormDataParameterSubSchemaFormat(value: unknown): value is types.FormDataParameterSubSchemaFormat {
if(!_isStringFormDataParameterSubSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringFormDataParameterSubSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/items
export function isFormDataParameterSubSchemaItems(value: unknown): value is types.FormDataParameterSubSchemaItems {
if(!_isReferenceFormDataParameterSubSchemaItems(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/collectionFormat
export function isFormDataParameterSubSchemaCollectionFormat(value: unknown): value is types.FormDataParameterSubSchemaCollectionFormat {
if(!_isReferenceFormDataParameterSubSchemaCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaCollectionFormat(value: unknown): value is unknown {
if(!isCollectionFormatWithMulti(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/default
export function isFormDataParameterSubSchemaDefault(value: unknown): value is types.FormDataParameterSubSchemaDefault {
if(!_isReferenceFormDataParameterSubSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maximum
export function isFormDataParameterSubSchemaMaximum(value: unknown): value is types.FormDataParameterSubSchemaMaximum {
if(!_isReferenceFormDataParameterSubSchemaMaximum(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMaximum
export function isFormDataParameterSubSchemaExclusiveMaximum(value: unknown): value is types.FormDataParameterSubSchemaExclusiveMaximum {
if(!_isReferenceFormDataParameterSubSchemaExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minimum
export function isFormDataParameterSubSchemaMinimum(value: unknown): value is types.FormDataParameterSubSchemaMinimum {
if(!_isReferenceFormDataParameterSubSchemaMinimum(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMinimum
export function isFormDataParameterSubSchemaExclusiveMinimum(value: unknown): value is types.FormDataParameterSubSchemaExclusiveMinimum {
if(!_isReferenceFormDataParameterSubSchemaExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxLength
export function isFormDataParameterSubSchemaMaxLength(value: unknown): value is types.FormDataParameterSubSchemaMaxLength {
if(!_isReferenceFormDataParameterSubSchemaMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minLength
export function isFormDataParameterSubSchemaMinLength(value: unknown): value is types.FormDataParameterSubSchemaMinLength {
if(!_isReferenceFormDataParameterSubSchemaMinLength(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/pattern
export function isFormDataParameterSubSchemaPattern(value: unknown): value is types.FormDataParameterSubSchemaPattern {
if(!_isReferenceFormDataParameterSubSchemaPattern(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxItems
export function isFormDataParameterSubSchemaMaxItems(value: unknown): value is types.FormDataParameterSubSchemaMaxItems {
if(!_isReferenceFormDataParameterSubSchemaMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minItems
export function isFormDataParameterSubSchemaMinItems(value: unknown): value is types.FormDataParameterSubSchemaMinItems {
if(!_isReferenceFormDataParameterSubSchemaMinItems(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/uniqueItems
export function isFormDataParameterSubSchemaUniqueItems(value: unknown): value is types.FormDataParameterSubSchemaUniqueItems {
if(!_isReferenceFormDataParameterSubSchemaUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/enum
export function isFormDataParameterSubSchemaEnum(value: unknown): value is types.FormDataParameterSubSchemaEnum {
if(!_isReferenceFormDataParameterSubSchemaEnum(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/multipleOf
export function isFormDataParameterSubSchemaMultipleOf(value: unknown): value is types.FormDataParameterSubSchemaMultipleOf {
if(!_isReferenceFormDataParameterSubSchemaMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/additionalProperties
export function isFormDataParameterSubSchemaAdditionalProperties(value: unknown): value is types.FormDataParameterSubSchemaAdditionalProperties {
if(!_isNeverFormDataParameterSubSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverFormDataParameterSubSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/patternProperties/^x-
export function isFormDataParameterSubSchemaX(value: unknown): value is types.FormDataParameterSubSchemaX {
if(!_isReferenceFormDataParameterSubSchemaX(value)) {
return false;
}
return true;
}
function _isReferenceFormDataParameterSubSchemaX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/required
export function isPathParameterSubSchemaRequired(value: unknown): value is types.PathParameterSubSchemaRequired {
if(!_isBooleanPathParameterSubSchemaRequired(value)) {
return false;
}
return true;
}
function _isBooleanPathParameterSubSchemaRequired(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
if(value !== true) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/in
export function isPathParameterSubSchemaIn(value: unknown): value is types.PathParameterSubSchemaIn {
if(!_isStringPathParameterSubSchemaIn(value)) {
return false;
}
return true;
}
function _isStringPathParameterSubSchemaIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "path") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/description
export function isPathParameterSubSchemaDescription(value: unknown): value is types.PathParameterSubSchemaDescription {
if(!_isStringPathParameterSubSchemaDescription(value)) {
return false;
}
return true;
}
function _isStringPathParameterSubSchemaDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/name
export function isPathParameterSubSchemaName(value: unknown): value is types.PathParameterSubSchemaName {
if(!_isStringPathParameterSubSchemaName(value)) {
return false;
}
return true;
}
function _isStringPathParameterSubSchemaName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/type
export function isPathParameterSubSchemaType(value: unknown): value is types.PathParameterSubSchemaType {
if(!_isStringPathParameterSubSchemaType(value)) {
return false;
}
return true;
}
function _isStringPathParameterSubSchemaType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "boolean" && value !== "integer" && value !== "array") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/format
export function isPathParameterSubSchemaFormat(value: unknown): value is types.PathParameterSubSchemaFormat {
if(!_isStringPathParameterSubSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringPathParameterSubSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/items
export function isPathParameterSubSchemaItems(value: unknown): value is types.PathParameterSubSchemaItems {
if(!_isReferencePathParameterSubSchemaItems(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/collectionFormat
export function isPathParameterSubSchemaCollectionFormat(value: unknown): value is types.PathParameterSubSchemaCollectionFormat {
if(!_isReferencePathParameterSubSchemaCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaCollectionFormat(value: unknown): value is unknown {
if(!isDefinitionsCollectionFormat(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/default
export function isPathParameterSubSchemaDefault(value: unknown): value is types.PathParameterSubSchemaDefault {
if(!_isReferencePathParameterSubSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maximum
export function isPathParameterSubSchemaMaximum(value: unknown): value is types.PathParameterSubSchemaMaximum {
if(!_isReferencePathParameterSubSchemaMaximum(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMaximum
export function isPathParameterSubSchemaExclusiveMaximum(value: unknown): value is types.PathParameterSubSchemaExclusiveMaximum {
if(!_isReferencePathParameterSubSchemaExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minimum
export function isPathParameterSubSchemaMinimum(value: unknown): value is types.PathParameterSubSchemaMinimum {
if(!_isReferencePathParameterSubSchemaMinimum(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMinimum
export function isPathParameterSubSchemaExclusiveMinimum(value: unknown): value is types.PathParameterSubSchemaExclusiveMinimum {
if(!_isReferencePathParameterSubSchemaExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxLength
export function isPathParameterSubSchemaMaxLength(value: unknown): value is types.PathParameterSubSchemaMaxLength {
if(!_isReferencePathParameterSubSchemaMaxLength(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minLength
export function isPathParameterSubSchemaMinLength(value: unknown): value is types.PathParameterSubSchemaMinLength {
if(!_isReferencePathParameterSubSchemaMinLength(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/pattern
export function isPathParameterSubSchemaPattern(value: unknown): value is types.PathParameterSubSchemaPattern {
if(!_isReferencePathParameterSubSchemaPattern(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxItems
export function isPathParameterSubSchemaMaxItems(value: unknown): value is types.PathParameterSubSchemaMaxItems {
if(!_isReferencePathParameterSubSchemaMaxItems(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minItems
export function isPathParameterSubSchemaMinItems(value: unknown): value is types.PathParameterSubSchemaMinItems {
if(!_isReferencePathParameterSubSchemaMinItems(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/uniqueItems
export function isPathParameterSubSchemaUniqueItems(value: unknown): value is types.PathParameterSubSchemaUniqueItems {
if(!_isReferencePathParameterSubSchemaUniqueItems(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/enum
export function isPathParameterSubSchemaEnum(value: unknown): value is types.PathParameterSubSchemaEnum {
if(!_isReferencePathParameterSubSchemaEnum(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/multipleOf
export function isPathParameterSubSchemaMultipleOf(value: unknown): value is types.PathParameterSubSchemaMultipleOf {
if(!_isReferencePathParameterSubSchemaMultipleOf(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/additionalProperties
export function isPathParameterSubSchemaAdditionalProperties(value: unknown): value is types.PathParameterSubSchemaAdditionalProperties {
if(!_isNeverPathParameterSubSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverPathParameterSubSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/patternProperties/^x-
export function isPathParameterSubSchemaX(value: unknown): value is types.PathParameterSubSchemaX {
if(!_isReferencePathParameterSubSchemaX(value)) {
return false;
}
return true;
}
function _isReferencePathParameterSubSchemaX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/0
export function isNonBodyParameter0(value: unknown): value is types.NonBodyParameter0 {
if(!_isReferenceNonBodyParameter0(value)) {
return false;
}
return true;
}
function _isReferenceNonBodyParameter0(value: unknown): value is unknown {
if(!isHeaderParameterSubSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/1
export function isNonBodyParameter1(value: unknown): value is types.NonBodyParameter1 {
if(!_isReferenceNonBodyParameter1(value)) {
return false;
}
return true;
}
function _isReferenceNonBodyParameter1(value: unknown): value is unknown {
if(!isFormDataParameterSubSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/2
export function isNonBodyParameter2(value: unknown): value is types.NonBodyParameter2 {
if(!_isReferenceNonBodyParameter2(value)) {
return false;
}
return true;
}
function _isReferenceNonBodyParameter2(value: unknown): value is unknown {
if(!isQueryParameterSubSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/nonBodyParameter/oneOf/3
export function isNonBodyParameter3(value: unknown): value is types.NonBodyParameter3 {
if(!_isReferenceNonBodyParameter3(value)) {
return false;
}
return true;
}
function _isReferenceNonBodyParameter3(value: unknown): value is unknown {
if(!isPathParameterSubSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/0
export function isParameter0(value: unknown): value is types.Parameter0 {
if(!_isReferenceParameter0(value)) {
return false;
}
return true;
}
function _isReferenceParameter0(value: unknown): value is unknown {
if(!isBodyParameter(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parameter/oneOf/1
export function isParameter1(value: unknown): value is types.Parameter1 {
if(!_isReferenceParameter1(value)) {
return false;
}
return true;
}
function _isReferenceParameter1(value: unknown): value is unknown {
if(!isNonBodyParameter(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/$ref
export function isSchemaRef(value: unknown): value is types.SchemaRef {
if(!_isStringSchemaRef(value)) {
return false;
}
return true;
}
function _isStringSchemaRef(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/format
export function isSchemaFormat(value: unknown): value is types.SchemaFormat {
if(!_isStringSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/title
export function isSchemaTitle(value: unknown): value is types.SchemaTitle {
if(!_isReferenceSchemaTitle(value)) {
return false;
}
return true;
}
function _isReferenceSchemaTitle(value: unknown): value is unknown {
if(!isDraft04Title(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/description
export function isSchemaDescription(value: unknown): value is types.SchemaDescription {
if(!_isReferenceSchemaDescription(value)) {
return false;
}
return true;
}
function _isReferenceSchemaDescription(value: unknown): value is unknown {
if(!isDraft04Description(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/default
export function isSchemaDefault(value: unknown): value is types.SchemaDefault {
if(!_isReferenceSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferenceSchemaDefault(value: unknown): value is unknown {
if(!isDraft04Default(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/multipleOf
export function isSchemaMultipleOf(value: unknown): value is types.SchemaMultipleOf {
if(!_isReferenceSchemaMultipleOf(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMultipleOf(value: unknown): value is unknown {
if(!isDraft04MultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/maximum
export function isSchemaMaximum(value: unknown): value is types.SchemaMaximum {
if(!_isReferenceSchemaMaximum(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMaximum(value: unknown): value is unknown {
if(!isDraft04Maximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMaximum
export function isSchemaExclusiveMaximum(value: unknown): value is types.SchemaExclusiveMaximum {
if(!_isReferenceSchemaExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferenceSchemaExclusiveMaximum(value: unknown): value is unknown {
if(!isDraft04ExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/minimum
export function isSchemaMinimum(value: unknown): value is types.SchemaMinimum {
if(!_isReferenceSchemaMinimum(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMinimum(value: unknown): value is unknown {
if(!isDraft04Minimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMinimum
export function isSchemaExclusiveMinimum(value: unknown): value is types.SchemaExclusiveMinimum {
if(!_isReferenceSchemaExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferenceSchemaExclusiveMinimum(value: unknown): value is unknown {
if(!isDraft04ExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/maxLength
export function isSchemaMaxLength(value: unknown): value is types.SchemaMaxLength {
if(!_isReferenceSchemaMaxLength(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMaxLength(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/minLength
export function isSchemaMinLength(value: unknown): value is types.SchemaMinLength {
if(!_isReferenceSchemaMinLength(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMinLength(value: unknown): value is unknown {
if(!isPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/pattern
export function isSchemaPattern(value: unknown): value is types.SchemaPattern {
if(!_isReferenceSchemaPattern(value)) {
return false;
}
return true;
}
function _isReferenceSchemaPattern(value: unknown): value is unknown {
if(!isDraft04Pattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/maxItems
export function isSchemaMaxItems(value: unknown): value is types.SchemaMaxItems {
if(!_isReferenceSchemaMaxItems(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMaxItems(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/minItems
export function isSchemaMinItems(value: unknown): value is types.SchemaMinItems {
if(!_isReferenceSchemaMinItems(value)) {
return false;
}
return true;
}
function _isReferenceSchemaMinItems(value: unknown): value is unknown {
if(!isPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/uniqueItems
export function isSchemaUniqueItems(value: unknown): value is types.SchemaUniqueItems {
if(!_isReferenceSchemaUniqueItems(value)) {
return false;
}
return true;
}
function _isReferenceSchemaUniqueItems(value: unknown): value is unknown {
if(!isDraft04UniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/maxProperties
export function isMaxProperties(value: unknown): value is types.MaxProperties {
if(!_isReferenceMaxProperties(value)) {
return false;
}
return true;
}
function _isReferenceMaxProperties(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/minProperties
export function isMinProperties(value: unknown): value is types.MinProperties {
if(!_isReferenceMinProperties(value)) {
return false;
}
return true;
}
function _isReferenceMinProperties(value: unknown): value is unknown {
if(!isPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/required
export function isSchemaRequired(value: unknown): value is types.SchemaRequired {
if(!_isReferenceSchemaRequired(value)) {
return false;
}
return true;
}
function _isReferenceSchemaRequired(value: unknown): value is unknown {
if(!isStringArray(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/enum
export function isSchemaEnum(value: unknown): value is types.SchemaEnum {
if(!_isReferenceSchemaEnum(value)) {
return false;
}
return true;
}
function _isReferenceSchemaEnum(value: unknown): value is unknown {
if(!isDraft04Enum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties
export function isPropertiesSchemaAdditionalProperties(value: unknown): value is types.PropertiesSchemaAdditionalProperties {
if(!_isAnyOfPropertiesSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isAnyOfPropertiesSchemaAdditionalProperties(value: unknown): value is unknown {
if(isAdditionalPropertiesAnyOf0(value)) {
return true;
}
if(isAdditionalPropertiesAnyOf1(value)) {
return true;
}
return false;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/type
export function isSchemaType(value: unknown): value is types.SchemaType {
if(!_isReferenceSchemaType(value)) {
return false;
}
return true;
}
function _isReferenceSchemaType(value: unknown): value is unknown {
if(!isDraft04Type(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/items
export function isSchemaItems(value: unknown): value is types.SchemaItems {
if(!_isAnyOfSchemaItems(value)) {
return false;
}
return true;
}
function _isAnyOfSchemaItems(value: unknown): value is unknown {
if(isItemsAnyOf0(value)) {
return true;
}
if(isItemsAnyOf1(value)) {
return true;
}
return false;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf
export function isAllOf(value: unknown): value is types.AllOf {
if(!_isArrayAllOf(value)) {
return false;
}
return true;
}
function _isArrayAllOf(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isAllOfItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/properties
export function isProperties(value: unknown): value is types.Properties {
if(!_isMapProperties(value)) {
return false;
}
return true;
}
function _isMapProperties(value: unknown): value is unknown {
if(typeof value !== "object" || value === null || Array.isArray(value)) {
return false;
}
for(const propertyName in value) {
const propertyValue = value[propertyName as keyof typeof value];
if(!isPropertiesAdditionalProperties(propertyValue)) {
return false;
}
continue;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/discriminator
export function isDiscriminator(value: unknown): value is types.Discriminator {
if(!_isStringDiscriminator(value)) {
return false;
}
return true;
}
function _isStringDiscriminator(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/readOnly
export function isSchemaReadOnly(value: unknown): value is types.SchemaReadOnly {
if(!_isBooleanSchemaReadOnly(value)) {
return false;
}
return true;
}
function _isBooleanSchemaReadOnly(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/xml
export function isSchemaXml(value: unknown): value is types.SchemaXml {
if(!_isReferenceSchemaXml(value)) {
return false;
}
return true;
}
function _isReferenceSchemaXml(value: unknown): value is unknown {
if(!isDefinitionsXml(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/externalDocs
export function isSchemaExternalDocs(value: unknown): value is types.SchemaExternalDocs {
if(!_isReferenceSchemaExternalDocs(value)) {
return false;
}
return true;
}
function _isReferenceSchemaExternalDocs(value: unknown): value is unknown {
if(!isDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/example
export function isSchemaExample(value: unknown): value is types.SchemaExample {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/additionalProperties
export function isDefinitionsSchemaAdditionalProperties(value: unknown): value is types.DefinitionsSchemaAdditionalProperties {
if(!_isNeverDefinitionsSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverDefinitionsSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/schema/patternProperties/^x-
export function isSchemaPatternPropertiesX(value: unknown): value is types.SchemaPatternPropertiesX {
if(!_isReferenceSchemaPatternPropertiesX(value)) {
return false;
}
return true;
}
function _isReferenceSchemaPatternPropertiesX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/format
export function isFileSchemaFormat(value: unknown): value is types.FileSchemaFormat {
if(!_isStringFileSchemaFormat(value)) {
return false;
}
return true;
}
function _isStringFileSchemaFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/title
export function isFileSchemaTitle(value: unknown): value is types.FileSchemaTitle {
if(!_isReferenceFileSchemaTitle(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaTitle(value: unknown): value is unknown {
if(!isDraft04Title(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/description
export function isFileSchemaDescription(value: unknown): value is types.FileSchemaDescription {
if(!_isReferenceFileSchemaDescription(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaDescription(value: unknown): value is unknown {
if(!isDraft04Description(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/default
export function isFileSchemaDefault(value: unknown): value is types.FileSchemaDefault {
if(!_isReferenceFileSchemaDefault(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaDefault(value: unknown): value is unknown {
if(!isDraft04Default(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/required
export function isFileSchemaRequired(value: unknown): value is types.FileSchemaRequired {
if(!_isReferenceFileSchemaRequired(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaRequired(value: unknown): value is unknown {
if(!isStringArray(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/type
export function isFileSchemaType(value: unknown): value is types.FileSchemaType {
if(!_isStringFileSchemaType(value)) {
return false;
}
return true;
}
function _isStringFileSchemaType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "file") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/readOnly
export function isFileSchemaReadOnly(value: unknown): value is types.FileSchemaReadOnly {
if(!_isBooleanFileSchemaReadOnly(value)) {
return false;
}
return true;
}
function _isBooleanFileSchemaReadOnly(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/externalDocs
export function isFileSchemaExternalDocs(value: unknown): value is types.FileSchemaExternalDocs {
if(!_isReferenceFileSchemaExternalDocs(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaExternalDocs(value: unknown): value is unknown {
if(!isDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/example
export function isFileSchemaExample(value: unknown): value is types.FileSchemaExample {
return true;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/additionalProperties
export function isFileSchemaAdditionalProperties(value: unknown): value is types.FileSchemaAdditionalProperties {
if(!_isNeverFileSchemaAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverFileSchemaAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/fileSchema/patternProperties/^x-
export function isFileSchemaX(value: unknown): value is types.FileSchemaX {
if(!_isReferenceFileSchemaX(value)) {
return false;
}
return true;
}
function _isReferenceFileSchemaX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/type
export function isPrimitivesItemsType(value: unknown): value is types.PrimitivesItemsType {
if(!_isStringPrimitivesItemsType(value)) {
return false;
}
return true;
}
function _isStringPrimitivesItemsType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "string" && value !== "number" && value !== "integer" && value !== "boolean" && value !== "array") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/format
export function isPrimitivesItemsFormat(value: unknown): value is types.PrimitivesItemsFormat {
if(!_isStringPrimitivesItemsFormat(value)) {
return false;
}
return true;
}
function _isStringPrimitivesItemsFormat(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/items
export function isPrimitivesItemsItems(value: unknown): value is types.PrimitivesItemsItems {
if(!_isReferencePrimitivesItemsItems(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsItems(value: unknown): value is unknown {
if(!isPrimitivesItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/collectionFormat
export function isPrimitivesItemsCollectionFormat(value: unknown): value is types.PrimitivesItemsCollectionFormat {
if(!_isReferencePrimitivesItemsCollectionFormat(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsCollectionFormat(value: unknown): value is unknown {
if(!isDefinitionsCollectionFormat(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/default
export function isPrimitivesItemsDefault(value: unknown): value is types.PrimitivesItemsDefault {
if(!_isReferencePrimitivesItemsDefault(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsDefault(value: unknown): value is unknown {
if(!isDefinitionsDefault(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maximum
export function isPrimitivesItemsMaximum(value: unknown): value is types.PrimitivesItemsMaximum {
if(!_isReferencePrimitivesItemsMaximum(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMaximum(value: unknown): value is unknown {
if(!isDefinitionsMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMaximum
export function isPrimitivesItemsExclusiveMaximum(value: unknown): value is types.PrimitivesItemsExclusiveMaximum {
if(!_isReferencePrimitivesItemsExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsExclusiveMaximum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMaximum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minimum
export function isPrimitivesItemsMinimum(value: unknown): value is types.PrimitivesItemsMinimum {
if(!_isReferencePrimitivesItemsMinimum(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMinimum(value: unknown): value is unknown {
if(!isDefinitionsMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMinimum
export function isPrimitivesItemsExclusiveMinimum(value: unknown): value is types.PrimitivesItemsExclusiveMinimum {
if(!_isReferencePrimitivesItemsExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsExclusiveMinimum(value: unknown): value is unknown {
if(!isDefinitionsExclusiveMinimum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxLength
export function isPrimitivesItemsMaxLength(value: unknown): value is types.PrimitivesItemsMaxLength {
if(!_isReferencePrimitivesItemsMaxLength(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMaxLength(value: unknown): value is unknown {
if(!isDefinitionsMaxLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minLength
export function isPrimitivesItemsMinLength(value: unknown): value is types.PrimitivesItemsMinLength {
if(!_isReferencePrimitivesItemsMinLength(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMinLength(value: unknown): value is unknown {
if(!isDefinitionsMinLength(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/pattern
export function isPrimitivesItemsPattern(value: unknown): value is types.PrimitivesItemsPattern {
if(!_isReferencePrimitivesItemsPattern(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsPattern(value: unknown): value is unknown {
if(!isDefinitionsPattern(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxItems
export function isPrimitivesItemsMaxItems(value: unknown): value is types.PrimitivesItemsMaxItems {
if(!_isReferencePrimitivesItemsMaxItems(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMaxItems(value: unknown): value is unknown {
if(!isDefinitionsMaxItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minItems
export function isPrimitivesItemsMinItems(value: unknown): value is types.PrimitivesItemsMinItems {
if(!_isReferencePrimitivesItemsMinItems(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMinItems(value: unknown): value is unknown {
if(!isDefinitionsMinItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/uniqueItems
export function isPrimitivesItemsUniqueItems(value: unknown): value is types.PrimitivesItemsUniqueItems {
if(!_isReferencePrimitivesItemsUniqueItems(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsUniqueItems(value: unknown): value is unknown {
if(!isDefinitionsUniqueItems(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/enum
export function isPrimitivesItemsEnum(value: unknown): value is types.PrimitivesItemsEnum {
if(!_isReferencePrimitivesItemsEnum(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsEnum(value: unknown): value is unknown {
if(!isDefinitionsEnum(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/multipleOf
export function isPrimitivesItemsMultipleOf(value: unknown): value is types.PrimitivesItemsMultipleOf {
if(!_isReferencePrimitivesItemsMultipleOf(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsMultipleOf(value: unknown): value is unknown {
if(!isDefinitionsMultipleOf(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/additionalProperties
export function isPrimitivesItemsAdditionalProperties(value: unknown): value is types.PrimitivesItemsAdditionalProperties {
if(!_isNeverPrimitivesItemsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverPrimitivesItemsAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/primitivesItems/patternProperties/^x-
export function isPrimitivesItemsX(value: unknown): value is types.PrimitivesItemsX {
if(!_isReferencePrimitivesItemsX(value)) {
return false;
}
return true;
}
function _isReferencePrimitivesItemsX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/security/items
export function isSecurityItems(value: unknown): value is types.SecurityItems {
if(!_isReferenceSecurityItems(value)) {
return false;
}
return true;
}
function _isReferenceSecurityItems(value: unknown): value is unknown {
if(!isSecurityRequirement(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties
export function isSecurityRequirementAdditionalProperties(value: unknown): value is types.SecurityRequirementAdditionalProperties {
if(!_isArraySecurityRequirementAdditionalProperties(value)) {
return false;
}
return true;
}
function _isArraySecurityRequirementAdditionalProperties(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isSecurityRequirementItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/properties/name
export function isXmlName(value: unknown): value is types.XmlName {
if(!_isStringXmlName(value)) {
return false;
}
return true;
}
function _isStringXmlName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/properties/namespace
export function isNamespace(value: unknown): value is types.Namespace {
if(!_isStringNamespace(value)) {
return false;
}
return true;
}
function _isStringNamespace(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/properties/prefix
export function isPrefix(value: unknown): value is types.Prefix {
if(!_isStringPrefix(value)) {
return false;
}
return true;
}
function _isStringPrefix(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/properties/attribute
export function isAttribute(value: unknown): value is types.Attribute {
if(!_isBooleanAttribute(value)) {
return false;
}
return true;
}
function _isBooleanAttribute(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/properties/wrapped
export function isWrapped(value: unknown): value is types.Wrapped {
if(!_isBooleanWrapped(value)) {
return false;
}
return true;
}
function _isBooleanWrapped(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/xml/additionalProperties
export function isXmlAdditionalProperties(value: unknown): value is types.XmlAdditionalProperties {
if(!_isNeverXmlAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverXmlAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/xml/patternProperties/^x-
export function isXmlX(value: unknown): value is types.XmlX {
if(!_isReferenceXmlX(value)) {
return false;
}
return true;
}
function _isReferenceXmlX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/tag/properties/name
export function isTagName(value: unknown): value is types.TagName {
if(!_isStringTagName(value)) {
return false;
}
return true;
}
function _isStringTagName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/tag/properties/description
export function isTagDescription(value: unknown): value is types.TagDescription {
if(!_isStringTagDescription(value)) {
return false;
}
return true;
}
function _isStringTagDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/tag/properties/externalDocs
export function isTagExternalDocs(value: unknown): value is types.TagExternalDocs {
if(!_isReferenceTagExternalDocs(value)) {
return false;
}
return true;
}
function _isReferenceTagExternalDocs(value: unknown): value is unknown {
if(!isDefinitionsExternalDocs(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/tag/additionalProperties
export function isTagAdditionalProperties(value: unknown): value is types.TagAdditionalProperties {
if(!_isNeverTagAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverTagAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/tag/patternProperties/^x-
export function isTagX(value: unknown): value is types.TagX {
if(!_isReferenceTagX(value)) {
return false;
}
return true;
}
function _isReferenceTagX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties
export function isSecurityDefinitionsAdditionalProperties(value: unknown): value is types.SecurityDefinitionsAdditionalProperties {
if(!_isOneOfSecurityDefinitionsAdditionalProperties(value)) {
return false;
}
return true;
}
function _isOneOfSecurityDefinitionsAdditionalProperties(value: unknown): value is unknown {
let validCounter = 0;
if(isSecurityDefinitions0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isSecurityDefinitions1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isSecurityDefinitions2(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isSecurityDefinitions3(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isSecurityDefinitions4(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isSecurityDefinitions5(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/type
export function isBasicAuthenticationSecurityType(value: unknown): value is types.BasicAuthenticationSecurityType {
if(!_isStringBasicAuthenticationSecurityType(value)) {
return false;
}
return true;
}
function _isStringBasicAuthenticationSecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "basic") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/description
export function isBasicAuthenticationSecurityDescription(value: unknown): value is types.BasicAuthenticationSecurityDescription {
if(!_isStringBasicAuthenticationSecurityDescription(value)) {
return false;
}
return true;
}
function _isStringBasicAuthenticationSecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/additionalProperties
export function isBasicAuthenticationSecurityAdditionalProperties(value: unknown): value is types.BasicAuthenticationSecurityAdditionalProperties {
if(!_isNeverBasicAuthenticationSecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverBasicAuthenticationSecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/patternProperties/^x-
export function isBasicAuthenticationSecurityX(value: unknown): value is types.BasicAuthenticationSecurityX {
if(!_isReferenceBasicAuthenticationSecurityX(value)) {
return false;
}
return true;
}
function _isReferenceBasicAuthenticationSecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/type
export function isApiKeySecurityType(value: unknown): value is types.ApiKeySecurityType {
if(!_isStringApiKeySecurityType(value)) {
return false;
}
return true;
}
function _isStringApiKeySecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "apiKey") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/name
export function isApiKeySecurityName(value: unknown): value is types.ApiKeySecurityName {
if(!_isStringApiKeySecurityName(value)) {
return false;
}
return true;
}
function _isStringApiKeySecurityName(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/in
export function isApiKeySecurityIn(value: unknown): value is types.ApiKeySecurityIn {
if(!_isStringApiKeySecurityIn(value)) {
return false;
}
return true;
}
function _isStringApiKeySecurityIn(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "header" && value !== "query") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/description
export function isApiKeySecurityDescription(value: unknown): value is types.ApiKeySecurityDescription {
if(!_isStringApiKeySecurityDescription(value)) {
return false;
}
return true;
}
function _isStringApiKeySecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/additionalProperties
export function isApiKeySecurityAdditionalProperties(value: unknown): value is types.ApiKeySecurityAdditionalProperties {
if(!_isNeverApiKeySecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverApiKeySecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/patternProperties/^x-
export function isApiKeySecurityX(value: unknown): value is types.ApiKeySecurityX {
if(!_isReferenceApiKeySecurityX(value)) {
return false;
}
return true;
}
function _isReferenceApiKeySecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/type
export function isOauth2ImplicitSecurityType(value: unknown): value is types.Oauth2ImplicitSecurityType {
if(!_isStringOauth2ImplicitSecurityType(value)) {
return false;
}
return true;
}
function _isStringOauth2ImplicitSecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "oauth2") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/flow
export function isOauth2ImplicitSecurityFlow(value: unknown): value is types.Oauth2ImplicitSecurityFlow {
if(!_isStringOauth2ImplicitSecurityFlow(value)) {
return false;
}
return true;
}
function _isStringOauth2ImplicitSecurityFlow(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "implicit") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/scopes
export function isOauth2ImplicitSecurityScopes(value: unknown): value is types.Oauth2ImplicitSecurityScopes {
if(!_isReferenceOauth2ImplicitSecurityScopes(value)) {
return false;
}
return true;
}
function _isReferenceOauth2ImplicitSecurityScopes(value: unknown): value is unknown {
if(!isOauth2Scopes(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/authorizationUrl
export function isOauth2ImplicitSecurityAuthorizationUrl(value: unknown): value is types.Oauth2ImplicitSecurityAuthorizationUrl {
if(!_isStringOauth2ImplicitSecurityAuthorizationUrl(value)) {
return false;
}
return true;
}
function _isStringOauth2ImplicitSecurityAuthorizationUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/description
export function isOauth2ImplicitSecurityDescription(value: unknown): value is types.Oauth2ImplicitSecurityDescription {
if(!_isStringOauth2ImplicitSecurityDescription(value)) {
return false;
}
return true;
}
function _isStringOauth2ImplicitSecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/additionalProperties
export function isOauth2ImplicitSecurityAdditionalProperties(value: unknown): value is types.Oauth2ImplicitSecurityAdditionalProperties {
if(!_isNeverOauth2ImplicitSecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverOauth2ImplicitSecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/patternProperties/^x-
export function isOauth2ImplicitSecurityX(value: unknown): value is types.Oauth2ImplicitSecurityX {
if(!_isReferenceOauth2ImplicitSecurityX(value)) {
return false;
}
return true;
}
function _isReferenceOauth2ImplicitSecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/type
export function isOauth2PasswordSecurityType(value: unknown): value is types.Oauth2PasswordSecurityType {
if(!_isStringOauth2PasswordSecurityType(value)) {
return false;
}
return true;
}
function _isStringOauth2PasswordSecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "oauth2") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/flow
export function isOauth2PasswordSecurityFlow(value: unknown): value is types.Oauth2PasswordSecurityFlow {
if(!_isStringOauth2PasswordSecurityFlow(value)) {
return false;
}
return true;
}
function _isStringOauth2PasswordSecurityFlow(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "password") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/scopes
export function isOauth2PasswordSecurityScopes(value: unknown): value is types.Oauth2PasswordSecurityScopes {
if(!_isReferenceOauth2PasswordSecurityScopes(value)) {
return false;
}
return true;
}
function _isReferenceOauth2PasswordSecurityScopes(value: unknown): value is unknown {
if(!isOauth2Scopes(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/tokenUrl
export function isOauth2PasswordSecurityTokenUrl(value: unknown): value is types.Oauth2PasswordSecurityTokenUrl {
if(!_isStringOauth2PasswordSecurityTokenUrl(value)) {
return false;
}
return true;
}
function _isStringOauth2PasswordSecurityTokenUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/description
export function isOauth2PasswordSecurityDescription(value: unknown): value is types.Oauth2PasswordSecurityDescription {
if(!_isStringOauth2PasswordSecurityDescription(value)) {
return false;
}
return true;
}
function _isStringOauth2PasswordSecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/additionalProperties
export function isOauth2PasswordSecurityAdditionalProperties(value: unknown): value is types.Oauth2PasswordSecurityAdditionalProperties {
if(!_isNeverOauth2PasswordSecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverOauth2PasswordSecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/patternProperties/^x-
export function isOauth2PasswordSecurityX(value: unknown): value is types.Oauth2PasswordSecurityX {
if(!_isReferenceOauth2PasswordSecurityX(value)) {
return false;
}
return true;
}
function _isReferenceOauth2PasswordSecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/type
export function isOauth2ApplicationSecurityType(value: unknown): value is types.Oauth2ApplicationSecurityType {
if(!_isStringOauth2ApplicationSecurityType(value)) {
return false;
}
return true;
}
function _isStringOauth2ApplicationSecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "oauth2") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/flow
export function isOauth2ApplicationSecurityFlow(value: unknown): value is types.Oauth2ApplicationSecurityFlow {
if(!_isStringOauth2ApplicationSecurityFlow(value)) {
return false;
}
return true;
}
function _isStringOauth2ApplicationSecurityFlow(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "application") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/scopes
export function isOauth2ApplicationSecurityScopes(value: unknown): value is types.Oauth2ApplicationSecurityScopes {
if(!_isReferenceOauth2ApplicationSecurityScopes(value)) {
return false;
}
return true;
}
function _isReferenceOauth2ApplicationSecurityScopes(value: unknown): value is unknown {
if(!isOauth2Scopes(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/tokenUrl
export function isOauth2ApplicationSecurityTokenUrl(value: unknown): value is types.Oauth2ApplicationSecurityTokenUrl {
if(!_isStringOauth2ApplicationSecurityTokenUrl(value)) {
return false;
}
return true;
}
function _isStringOauth2ApplicationSecurityTokenUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/description
export function isOauth2ApplicationSecurityDescription(value: unknown): value is types.Oauth2ApplicationSecurityDescription {
if(!_isStringOauth2ApplicationSecurityDescription(value)) {
return false;
}
return true;
}
function _isStringOauth2ApplicationSecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/additionalProperties
export function isOauth2ApplicationSecurityAdditionalProperties(value: unknown): value is types.Oauth2ApplicationSecurityAdditionalProperties {
if(!_isNeverOauth2ApplicationSecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverOauth2ApplicationSecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/patternProperties/^x-
export function isOauth2ApplicationSecurityX(value: unknown): value is types.Oauth2ApplicationSecurityX {
if(!_isReferenceOauth2ApplicationSecurityX(value)) {
return false;
}
return true;
}
function _isReferenceOauth2ApplicationSecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/type
export function isOauth2AccessCodeSecurityType(value: unknown): value is types.Oauth2AccessCodeSecurityType {
if(!_isStringOauth2AccessCodeSecurityType(value)) {
return false;
}
return true;
}
function _isStringOauth2AccessCodeSecurityType(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "oauth2") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/flow
export function isOauth2AccessCodeSecurityFlow(value: unknown): value is types.Oauth2AccessCodeSecurityFlow {
if(!_isStringOauth2AccessCodeSecurityFlow(value)) {
return false;
}
return true;
}
function _isStringOauth2AccessCodeSecurityFlow(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "accessCode") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/scopes
export function isOauth2AccessCodeSecurityScopes(value: unknown): value is types.Oauth2AccessCodeSecurityScopes {
if(!_isReferenceOauth2AccessCodeSecurityScopes(value)) {
return false;
}
return true;
}
function _isReferenceOauth2AccessCodeSecurityScopes(value: unknown): value is unknown {
if(!isOauth2Scopes(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/authorizationUrl
export function isOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): value is types.Oauth2AccessCodeSecurityAuthorizationUrl {
if(!_isStringOauth2AccessCodeSecurityAuthorizationUrl(value)) {
return false;
}
return true;
}
function _isStringOauth2AccessCodeSecurityAuthorizationUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/tokenUrl
export function isOauth2AccessCodeSecurityTokenUrl(value: unknown): value is types.Oauth2AccessCodeSecurityTokenUrl {
if(!_isStringOauth2AccessCodeSecurityTokenUrl(value)) {
return false;
}
return true;
}
function _isStringOauth2AccessCodeSecurityTokenUrl(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/description
export function isOauth2AccessCodeSecurityDescription(value: unknown): value is types.Oauth2AccessCodeSecurityDescription {
if(!_isStringOauth2AccessCodeSecurityDescription(value)) {
return false;
}
return true;
}
function _isStringOauth2AccessCodeSecurityDescription(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/additionalProperties
export function isOauth2AccessCodeSecurityAdditionalProperties(value: unknown): value is types.Oauth2AccessCodeSecurityAdditionalProperties {
if(!_isNeverOauth2AccessCodeSecurityAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverOauth2AccessCodeSecurityAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/patternProperties/^x-
export function isOauth2AccessCodeSecurityX(value: unknown): value is types.Oauth2AccessCodeSecurityX {
if(!_isReferenceOauth2AccessCodeSecurityX(value)) {
return false;
}
return true;
}
function _isReferenceOauth2AccessCodeSecurityX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/oauth2Scopes/additionalProperties
export function isOauth2ScopesAdditionalProperties(value: unknown): value is types.Oauth2ScopesAdditionalProperties {
if(!_isStringOauth2ScopesAdditionalProperties(value)) {
return false;
}
return true;
}
function _isStringOauth2ScopesAdditionalProperties(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/mediaTypeList/items
export function isMediaTypeListItems(value: unknown): value is types.MediaTypeListItems {
if(!_isReferenceMediaTypeListItems(value)) {
return false;
}
return true;
}
function _isReferenceMediaTypeListItems(value: unknown): value is unknown {
if(!isMimeType(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parametersList/items
export function isParametersListItems(value: unknown): value is types.ParametersListItems {
if(!_isOneOfParametersListItems(value)) {
return false;
}
return true;
}
function _isOneOfParametersListItems(value: unknown): value is unknown {
let validCounter = 0;
if(isParametersList0(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(isParametersList1(value)) {
validCounter++;
}
if(validCounter > 1) {
return false
}
if(validCounter < 1) {
return false
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parametersList/additionalItems
export function isParametersListAdditionalItems(value: unknown): value is types.ParametersListAdditionalItems {
if(!_isNeverParametersListAdditionalItems(value)) {
return false;
}
return true;
}
function _isNeverParametersListAdditionalItems(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/schemesList/items
export function isSchemesListItems(value: unknown): value is types.SchemesListItems {
if(!_isStringSchemesListItems(value)) {
return false;
}
return true;
}
function _isStringSchemesListItems(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "http" && value !== "https" && value !== "ws" && value !== "wss") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/jsonReference/properties/$ref
export function isJsonReferenceRef(value: unknown): value is types.JsonReferenceRef {
if(!_isStringJsonReferenceRef(value)) {
return false;
}
return true;
}
function _isStringJsonReferenceRef(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/jsonReference/additionalProperties
export function isJsonReferenceAdditionalProperties(value: unknown): value is types.JsonReferenceAdditionalProperties {
if(!_isNeverJsonReferenceAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverJsonReferenceAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/properties/consumes/allOf/0
export function isPropertiesAllOfConsumes0(value: unknown): value is types.PropertiesAllOfConsumes0 {
if(!_isReferencePropertiesAllOfConsumes0(value)) {
return false;
}
return true;
}
function _isReferencePropertiesAllOfConsumes0(value: unknown): value is unknown {
if(!isMediaTypeList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/produces/allOf/0
export function isPropertiesAllOfProduces0(value: unknown): value is types.PropertiesAllOfProduces0 {
if(!_isReferencePropertiesAllOfProduces0(value)) {
return false;
}
return true;
}
function _isReferencePropertiesAllOfProduces0(value: unknown): value is unknown {
if(!isMediaTypeList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/properties/tags/items
export function isPropertiesTagsItems(value: unknown): value is types.PropertiesTagsItems {
if(!_isReferencePropertiesTagsItems(value)) {
return false;
}
return true;
}
function _isReferencePropertiesTagsItems(value: unknown): value is unknown {
if(!isTag(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/tags/items
export function isOperationTagsItems(value: unknown): value is types.OperationTagsItems {
if(!_isStringOperationTagsItems(value)) {
return false;
}
return true;
}
function _isStringOperationTagsItems(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/produces/allOf/0
export function isOperationAllOfProduces0(value: unknown): value is types.OperationAllOfProduces0 {
if(!_isReferenceOperationAllOfProduces0(value)) {
return false;
}
return true;
}
function _isReferenceOperationAllOfProduces0(value: unknown): value is unknown {
if(!isMediaTypeList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/operation/properties/consumes/allOf/0
export function isOperationAllOfConsumes0(value: unknown): value is types.OperationAllOfConsumes0 {
if(!_isReferenceOperationAllOfConsumes0(value)) {
return false;
}
return true;
}
function _isReferenceOperationAllOfConsumes0(value: unknown): value is unknown {
if(!isMediaTypeList(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/responses/not/additionalProperties
export function isNotAdditionalProperties(value: unknown): value is types.NotAdditionalProperties {
if(!_isNeverNotAdditionalProperties(value)) {
return false;
}
return true;
}
function _isNeverNotAdditionalProperties(value: unknown): value is unknown {
return false;
}
// http://swagger.io/v2/schema.json#/definitions/responses/not/patternProperties/^x-
export function isNotX(value: unknown): value is types.NotX {
if(!_isReferenceNotX(value)) {
return false;
}
return true;
}
function _isReferenceNotX(value: unknown): value is unknown {
if(!isVendorExtension(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/0
export function isResponse0(value: unknown): value is types.Response0 {
if(!_isReferenceResponse0(value)) {
return false;
}
return true;
}
function _isReferenceResponse0(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/response/properties/schema/oneOf/1
export function isResponse1(value: unknown): value is types.Response1 {
if(!_isReferenceResponse1(value)) {
return false;
}
return true;
}
function _isReferenceResponse1(value: unknown): value is unknown {
if(!isFileSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/0
export function isAdditionalPropertiesAnyOf0(value: unknown): value is types.AdditionalPropertiesAnyOf0 {
if(!_isReferenceAdditionalPropertiesAnyOf0(value)) {
return false;
}
return true;
}
function _isReferenceAdditionalPropertiesAnyOf0(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/additionalProperties/anyOf/1
export function isAdditionalPropertiesAnyOf1(value: unknown): value is types.AdditionalPropertiesAnyOf1 {
if(!_isBooleanAdditionalPropertiesAnyOf1(value)) {
return false;
}
return true;
}
function _isBooleanAdditionalPropertiesAnyOf1(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/0
export function isItemsAnyOf0(value: unknown): value is types.ItemsAnyOf0 {
if(!_isReferenceItemsAnyOf0(value)) {
return false;
}
return true;
}
function _isReferenceItemsAnyOf0(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1
export function isItemsAnyOf1(value: unknown): value is types.ItemsAnyOf1 {
if(!_isArrayItemsAnyOf1(value)) {
return false;
}
return true;
}
function _isArrayItemsAnyOf1(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(!isItems1AnyOfItems(elementValue)) {
return false;
}
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/allOf/items
export function isAllOfItems(value: unknown): value is types.AllOfItems {
if(!_isReferenceAllOfItems(value)) {
return false;
}
return true;
}
function _isReferenceAllOfItems(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/properties/additionalProperties
export function isPropertiesAdditionalProperties(value: unknown): value is types.PropertiesAdditionalProperties {
if(!_isReferencePropertiesAdditionalProperties(value)) {
return false;
}
return true;
}
function _isReferencePropertiesAdditionalProperties(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties/items
export function isSecurityRequirementItems(value: unknown): value is types.SecurityRequirementItems {
if(!_isStringSecurityRequirementItems(value)) {
return false;
}
return true;
}
function _isStringSecurityRequirementItems(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/0
export function isSecurityDefinitions0(value: unknown): value is types.SecurityDefinitions0 {
if(!_isReferenceSecurityDefinitions0(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions0(value: unknown): value is unknown {
if(!isBasicAuthenticationSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/1
export function isSecurityDefinitions1(value: unknown): value is types.SecurityDefinitions1 {
if(!_isReferenceSecurityDefinitions1(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions1(value: unknown): value is unknown {
if(!isApiKeySecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/2
export function isSecurityDefinitions2(value: unknown): value is types.SecurityDefinitions2 {
if(!_isReferenceSecurityDefinitions2(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions2(value: unknown): value is unknown {
if(!isOauth2ImplicitSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/3
export function isSecurityDefinitions3(value: unknown): value is types.SecurityDefinitions3 {
if(!_isReferenceSecurityDefinitions3(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions3(value: unknown): value is unknown {
if(!isOauth2PasswordSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/4
export function isSecurityDefinitions4(value: unknown): value is types.SecurityDefinitions4 {
if(!_isReferenceSecurityDefinitions4(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions4(value: unknown): value is unknown {
if(!isOauth2ApplicationSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties/oneOf/5
export function isSecurityDefinitions5(value: unknown): value is types.SecurityDefinitions5 {
if(!_isReferenceSecurityDefinitions5(value)) {
return false;
}
return true;
}
function _isReferenceSecurityDefinitions5(value: unknown): value is unknown {
if(!isOauth2AccessCodeSecurity(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/0
export function isParametersList0(value: unknown): value is types.ParametersList0 {
if(!_isReferenceParametersList0(value)) {
return false;
}
return true;
}
function _isReferenceParametersList0(value: unknown): value is unknown {
if(!isParameter(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/parametersList/items/oneOf/1
export function isParametersList1(value: unknown): value is types.ParametersList1 {
if(!_isReferenceParametersList1(value)) {
return false;
}
return true;
}
function _isReferenceParametersList1(value: unknown): value is unknown {
if(!isJsonReference(value)) {
return false;
}
return true;
}
// http://swagger.io/v2/schema.json#/definitions/schema/properties/items/anyOf/1/items
export function isItems1AnyOfItems(value: unknown): value is types.Items1AnyOfItems {
if(!_isReferenceItems1AnyOfItems(value)) {
return false;
}
return true;
}
function _isReferenceItems1AnyOfItems(value: unknown): value is unknown {
if(!isDefinitionsSchema(value)) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/title
export function isDraft04Title(value: unknown): value is types.Draft04Title {
if(!_isStringDraft04Title(value)) {
return false;
}
return true;
}
function _isStringDraft04Title(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/description
export function isDraft04Description(value: unknown): value is types.Draft04Description {
if(!_isStringDraft04Description(value)) {
return false;
}
return true;
}
function _isStringDraft04Description(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/default
export function isDraft04Default(value: unknown): value is types.Draft04Default {
return true;
}
// http://json-schema.org/draft-04/schema#/properties/multipleOf
export function isDraft04MultipleOf(value: unknown): value is types.Draft04MultipleOf {
if(!_isNumberDraft04MultipleOf(value)) {
return false;
}
return true;
}
function _isNumberDraft04MultipleOf(value: unknown): value is unknown {
if(typeof value !== "number" || isNaN(value) || value % 1 !== 0) {
return false;
}
if(value <= 0) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/maximum
export function isDraft04Maximum(value: unknown): value is types.Draft04Maximum {
if(!_isNumberDraft04Maximum(value)) {
return false;
}
return true;
}
function _isNumberDraft04Maximum(value: unknown): value is unknown {
if(typeof value !== "number" || isNaN(value) || value % 1 !== 0) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum
export function isDraft04ExclusiveMaximum(value: unknown): value is types.Draft04ExclusiveMaximum {
if(!_isBooleanDraft04ExclusiveMaximum(value)) {
return false;
}
return true;
}
function _isBooleanDraft04ExclusiveMaximum(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/minimum
export function isDraft04Minimum(value: unknown): value is types.Draft04Minimum {
if(!_isNumberDraft04Minimum(value)) {
return false;
}
return true;
}
function _isNumberDraft04Minimum(value: unknown): value is unknown {
if(typeof value !== "number" || isNaN(value) || value % 1 !== 0) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum
export function isDraft04ExclusiveMinimum(value: unknown): value is types.Draft04ExclusiveMinimum {
if(!_isBooleanDraft04ExclusiveMinimum(value)) {
return false;
}
return true;
}
function _isBooleanDraft04ExclusiveMinimum(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/positiveInteger
export function isPositiveInteger(value: unknown): value is types.PositiveInteger {
if(!_isIntegerPositiveInteger(value)) {
return false;
}
return true;
}
function _isIntegerPositiveInteger(value: unknown): value is unknown {
if(typeof value !== "number" || isNaN(value)) {
return false;
}
if(value < 0) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0
export function isPositiveIntegerDefault0(value: unknown): value is types.PositiveIntegerDefault0 {
if(!_isAllOfPositiveIntegerDefault0(value)) {
return false;
}
return true;
}
function _isAllOfPositiveIntegerDefault0(value: unknown): value is unknown {
if(!isPositiveIntegerDefault00(value)) {
return false;
}
if(!isPositiveIntegerDefault01(value)) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/0
export function isPositiveIntegerDefault00(value: unknown): value is types.PositiveIntegerDefault00 {
if(!_isReferencePositiveIntegerDefault00(value)) {
return false;
}
return true;
}
function _isReferencePositiveIntegerDefault00(value: unknown): value is unknown {
if(!isPositiveInteger(value)) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/1
export function isPositiveIntegerDefault01(value: unknown): value is types.PositiveIntegerDefault01 {
return true;
}
// http://json-schema.org/draft-04/schema#/properties/pattern
export function isDraft04Pattern(value: unknown): value is types.Draft04Pattern {
if(!_isStringDraft04Pattern(value)) {
return false;
}
return true;
}
function _isStringDraft04Pattern(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/uniqueItems
export function isDraft04UniqueItems(value: unknown): value is types.Draft04UniqueItems {
if(!_isBooleanDraft04UniqueItems(value)) {
return false;
}
return true;
}
function _isBooleanDraft04UniqueItems(value: unknown): value is unknown {
if(typeof value !== "boolean") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/enum
export function isDraft04Enum(value: unknown): value is types.Draft04Enum {
if(!_isArrayDraft04Enum(value)) {
return false;
}
return true;
}
function _isArrayDraft04Enum(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/stringArray
export function isStringArray(value: unknown): value is types.StringArray {
if(!_isArrayStringArray(value)) {
return false;
}
return true;
}
function _isArrayStringArray(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isStringArrayItems(elementValue)) {
return false;
}
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/stringArray/items
export function isStringArrayItems(value: unknown): value is types.StringArrayItems {
if(!_isStringStringArrayItems(value)) {
return false;
}
return true;
}
function _isStringStringArrayItems(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/type
export function isDraft04Type(value: unknown): value is types.Draft04Type {
if(!_isAnyOfDraft04Type(value)) {
return false;
}
return true;
}
function _isAnyOfDraft04Type(value: unknown): value is unknown {
if(isTypeAnyOf0(value)) {
return true;
}
if(isTypeAnyOf1(value)) {
return true;
}
return false;
}
// http://json-schema.org/draft-04/schema#/properties/type/anyOf/0
export function isTypeAnyOf0(value: unknown): value is types.TypeAnyOf0 {
if(!_isReferenceTypeAnyOf0(value)) {
return false;
}
return true;
}
function _isReferenceTypeAnyOf0(value: unknown): value is unknown {
if(!isSimpleTypes(value)) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/type/anyOf/1
export function isTypeAnyOf1(value: unknown): value is types.TypeAnyOf1 {
if(!_isArrayTypeAnyOf1(value)) {
return false;
}
return true;
}
function _isArrayTypeAnyOf1(value: unknown): value is unknown {
if(!Array.isArray(value)) {
return false;
}
if(value.length < 1) {
return false;
}
const elementValueSeen = new Set<unknown>();
for(let elementIndex = 0; elementIndex < value.length; elementIndex ++) {
const elementValue = value[elementIndex];
if(elementValueSeen.has(elementValue)) {
return false;
}
elementValueSeen.add(elementValue);
if(!isType1AnyOfItems(elementValue)) {
return false;
}
}
return true;
}
// http://json-schema.org/draft-04/schema#/properties/type/anyOf/1/items
export function isType1AnyOfItems(value: unknown): value is types.Type1AnyOfItems {
if(!_isReferenceType1AnyOfItems(value)) {
return false;
}
return true;
}
function _isReferenceType1AnyOfItems(value: unknown): value is unknown {
if(!isSimpleTypes(value)) {
return false;
}
return true;
}
// http://json-schema.org/draft-04/schema#/definitions/simpleTypes
export function isSimpleTypes(value: unknown): value is types.SimpleTypes {
if(!_isStringSimpleTypes(value)) {
return false;
}
return true;
}
function _isStringSimpleTypes(value: unknown): value is unknown {
if(typeof value !== "string") {
return false;
}
if(value !== "array" && value !== "boolean" && value !== "integer" && value !== "null" && value !== "number" && value !== "object" && value !== "string") {
return false;
}
return true;
}
