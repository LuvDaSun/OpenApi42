// @generated by
//     __             _____     _                 ___ ___
//  _ |  |___ ___ ___|   __|___| |_ ___ _____  __| | |_  |
// | |_| |_ -| . |   |__   |  _|   | -_|     ||. |_  |  _|
// |_____|___|___|_|_|_____|___|_|_|___|_|_|_|___| |_|___|
// v0.12.7                         -- www.JsonSchema42.org
//
import * as types from "./types.js";
const depthCounters: Record<string, number> = {};
export const unknownValue: any = {};
export const anyValue: any = {};
export const neverValue: any = {};
export interface MockGeneratorOptions {
maximumDepth?: number;
numberPrecision?: number;
stringCharacters?: string;
defaultMinimumValue?: number;
defaultMaximumValue?: number;
defaultMinimumItems?: number;
defaultMaximumItems?: number;
defaultMinimumProperties?: number;
defaultMaximumProperties?: number;
defaultMinimumStringLength?: number;
defaultMaximumStringLength?: number;
}
const defaultMockGeneratorOptions = {
maximumDepth: 1,
numberPrecision: 1000,
stringCharacters: "abcdefghijklmnopqrstuvwxyz",
defaultMinimumValue: -1000,
defaultMaximumValue: 1000,
defaultMinimumItems: 1,
defaultMaximumItems: 5,
defaultMinimumProperties: 1,
defaultMaximumProperties: 5,
defaultMinimumStringLength: 5,
defaultMaximumStringLength: 20,
}
/**
* @description The MIME type of the HTTP message.
* @see {@link http://swagger.io/v2/schema.json#/definitions/mimeType}
*/
export function mockMimeType(options: MockGeneratorOptions = {}): types.MimeType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[10] ??= 0;
try {
depthCounters[10]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[10]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes}
*/
export function mockOauth2Scopes(options: MockGeneratorOptions = {}): types.Oauth2Scopes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[40] ??= 0;
try {
depthCounters[40]++;
return (
{
...Object.fromEntries(
new Array(
Math.max(0, configuration.defaultMinimumProperties - 0) +
nextSeed() % (
Math.max(0, configuration.defaultMaximumProperties - 0) -
Math.max(0, configuration.defaultMinimumProperties - 0) +
1
)
)
.fill(undefined)
.map(() => [
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
,
(() => {
switch (
(
nextSeed() % 1
) as 0
) {
case 0:
return (mockOauth2ScopesAdditionalProperties());
}
})(),
]
)
)
}
);
}
finally {
depthCounters[40]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormat}
*/
export function mockDefinitionsCollectionFormat(options: MockGeneratorOptions = {}): types.DefinitionsCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[44] ??= 0;
try {
depthCounters[44]++;
return (
(
[
"csv", "ssv", "tsv", "pipes"
] as const
)[
nextSeed() % 4
]
);
}
finally {
depthCounters[44]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/collectionFormatWithMulti}
*/
export function mockCollectionFormatWithMulti(options: MockGeneratorOptions = {}): types.CollectionFormatWithMulti {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[45] ??= 0;
try {
depthCounters[45]++;
return (
(
[
"csv", "ssv", "tsv", "pipes", "multi"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[45]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/title}
*/
export function mockDefinitionsTitle(options: MockGeneratorOptions = {}): types.DefinitionsTitle {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[46] ??= 0;
try {
depthCounters[46]++;
return (mockDraft04Title());
}
finally {
depthCounters[46]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/description}
*/
export function mockDefinitionsDescription(options: MockGeneratorOptions = {}): types.DefinitionsDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[47] ??= 0;
try {
depthCounters[47]++;
return (mockDraft04Description());
}
finally {
depthCounters[47]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/multipleOf}
*/
export function mockDefinitionsMultipleOf(options: MockGeneratorOptions = {}): types.DefinitionsMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[49] ??= 0;
try {
depthCounters[49]++;
return (mockDraft04MultipleOf());
}
finally {
depthCounters[49]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maximum}
*/
export function mockDefinitionsMaximum(options: MockGeneratorOptions = {}): types.DefinitionsMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[50] ??= 0;
try {
depthCounters[50]++;
return (mockDraft04Maximum());
}
finally {
depthCounters[50]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMaximum}
*/
export function mockDefinitionsExclusiveMaximum(options: MockGeneratorOptions = {}): types.DefinitionsExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[51] ??= 0;
try {
depthCounters[51]++;
return (mockDraft04ExclusiveMaximum());
}
finally {
depthCounters[51]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/minimum}
*/
export function mockDefinitionsMinimum(options: MockGeneratorOptions = {}): types.DefinitionsMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[52] ??= 0;
try {
depthCounters[52]++;
return (mockDraft04Minimum());
}
finally {
depthCounters[52]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/exclusiveMinimum}
*/
export function mockDefinitionsExclusiveMinimum(options: MockGeneratorOptions = {}): types.DefinitionsExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[53] ??= 0;
try {
depthCounters[53]++;
return (mockDraft04ExclusiveMinimum());
}
finally {
depthCounters[53]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxLength}
*/
export function mockDefinitionsMaxLength(options: MockGeneratorOptions = {}): types.DefinitionsMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[54] ??= 0;
try {
depthCounters[54]++;
return (mockPositiveInteger());
}
finally {
depthCounters[54]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/maxItems}
*/
export function mockDefinitionsMaxItems(options: MockGeneratorOptions = {}): types.DefinitionsMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[57] ??= 0;
try {
depthCounters[57]++;
return (mockPositiveInteger());
}
finally {
depthCounters[57]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/uniqueItems}
*/
export function mockDefinitionsUniqueItems(options: MockGeneratorOptions = {}): types.DefinitionsUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[59] ??= 0;
try {
depthCounters[59]++;
return (mockDraft04UniqueItems());
}
finally {
depthCounters[59]--;
}
}
/**
* @description The Swagger version of this document.
* @see {@link http://swagger.io/v2/schema.json#/properties/swagger}
*/
export function mockSwagger(options: MockGeneratorOptions = {}): types.Swagger {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[62] ??= 0;
try {
depthCounters[62]++;
return (
(
[
"2.0"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[62]--;
}
}
/**
* @description A unique and precise title of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/title}
*/
export function mockInfoTitle(options: MockGeneratorOptions = {}): types.InfoTitle {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[79] ??= 0;
try {
depthCounters[79]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[79]--;
}
}
/**
* @description A semantic version number of the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/version}
*/
export function mockVersion(options: MockGeneratorOptions = {}): types.Version {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[80] ??= 0;
try {
depthCounters[80]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[80]--;
}
}
/**
* @description A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/description}
*/
export function mockInfoDescription(options: MockGeneratorOptions = {}): types.InfoDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[81] ??= 0;
try {
depthCounters[81]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[81]--;
}
}
/**
* @description The terms of service for the API.
* @see {@link http://swagger.io/v2/schema.json#/definitions/info/properties/termsOfService}
*/
export function mockTermsOfService(options: MockGeneratorOptions = {}): types.TermsOfService {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[82] ??= 0;
try {
depthCounters[82]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[82]--;
}
}
/**
* @description The identifying name of the contact person/organization.
* @see {@link http://swagger.io/v2/schema.json#/definitions/contact/properties/name}
*/
export function mockContactName(options: MockGeneratorOptions = {}): types.ContactName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[87] ??= 0;
try {
depthCounters[87]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[87]--;
}
}
/**
* @description The name of the license type. It&apos;s encouraged to use an OSI compatible license.
* @see {@link http://swagger.io/v2/schema.json#/definitions/license/properties/name}
*/
export function mockLicenseName(options: MockGeneratorOptions = {}): types.LicenseName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[92] ??= 0;
try {
depthCounters[92]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[92]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/externalDocs/properties/description}
*/
export function mockExternalDocsDescription(options: MockGeneratorOptions = {}): types.ExternalDocsDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[102] ??= 0;
try {
depthCounters[102]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[102]--;
}
}
/**
* @description A brief summary of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/summary}
*/
export function mockSummary(options: MockGeneratorOptions = {}): types.Summary {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[108] ??= 0;
try {
depthCounters[108]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[108]--;
}
}
/**
* @description A longer description of the operation, GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/description}
*/
export function mockOperationDescription(options: MockGeneratorOptions = {}): types.OperationDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[109] ??= 0;
try {
depthCounters[109]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[109]--;
}
}
/**
* @description A unique identifier of the operation.
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/operationId}
*/
export function mockOperationId(options: MockGeneratorOptions = {}): types.OperationId {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[111] ??= 0;
try {
depthCounters[111]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[111]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/deprecated}
*/
export function mockDeprecated(options: MockGeneratorOptions = {}): types.Deprecated {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[117] ??= 0;
try {
depthCounters[117]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[117]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathItem/properties/$ref}
*/
export function mockPathItemRef(options: MockGeneratorOptions = {}): types.PathItemRef {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[121] ??= 0;
try {
depthCounters[121]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[121]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/response/properties/description}
*/
export function mockResponseDescription(options: MockGeneratorOptions = {}): types.ResponseDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[138] ??= 0;
try {
depthCounters[138]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[138]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/type}
*/
export function mockHeaderType(options: MockGeneratorOptions = {}): types.HeaderType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[145] ??= 0;
try {
depthCounters[145]++;
return (
(
[
"string", "number", "integer", "boolean", "array"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[145]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/format}
*/
export function mockHeaderFormat(options: MockGeneratorOptions = {}): types.HeaderFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[146] ??= 0;
try {
depthCounters[146]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[146]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/collectionFormat}
*/
export function mockHeaderCollectionFormat(options: MockGeneratorOptions = {}): types.HeaderCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[148] ??= 0;
try {
depthCounters[148]++;
return (mockDefinitionsCollectionFormat());
}
finally {
depthCounters[148]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maximum}
*/
export function mockHeaderMaximum(options: MockGeneratorOptions = {}): types.HeaderMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[150] ??= 0;
try {
depthCounters[150]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[150]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMaximum}
*/
export function mockHeaderExclusiveMaximum(options: MockGeneratorOptions = {}): types.HeaderExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[151] ??= 0;
try {
depthCounters[151]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[151]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/minimum}
*/
export function mockHeaderMinimum(options: MockGeneratorOptions = {}): types.HeaderMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[152] ??= 0;
try {
depthCounters[152]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[152]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/exclusiveMinimum}
*/
export function mockHeaderExclusiveMinimum(options: MockGeneratorOptions = {}): types.HeaderExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[153] ??= 0;
try {
depthCounters[153]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[153]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxLength}
*/
export function mockHeaderMaxLength(options: MockGeneratorOptions = {}): types.HeaderMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[154] ??= 0;
try {
depthCounters[154]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[154]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/maxItems}
*/
export function mockHeaderMaxItems(options: MockGeneratorOptions = {}): types.HeaderMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[157] ??= 0;
try {
depthCounters[157]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[157]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/uniqueItems}
*/
export function mockHeaderUniqueItems(options: MockGeneratorOptions = {}): types.HeaderUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[159] ??= 0;
try {
depthCounters[159]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[159]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/multipleOf}
*/
export function mockHeaderMultipleOf(options: MockGeneratorOptions = {}): types.HeaderMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[161] ??= 0;
try {
depthCounters[161]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[161]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/header/properties/description}
*/
export function mockHeaderDescription(options: MockGeneratorOptions = {}): types.HeaderDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[162] ??= 0;
try {
depthCounters[162]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[162]--;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/description}
*/
export function mockBodyParameterDescription(options: MockGeneratorOptions = {}): types.BodyParameterDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[167] ??= 0;
try {
depthCounters[167]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[167]--;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/name}
*/
export function mockBodyParameterName(options: MockGeneratorOptions = {}): types.BodyParameterName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[168] ??= 0;
try {
depthCounters[168]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[168]--;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/in}
*/
export function mockBodyParameterIn(options: MockGeneratorOptions = {}): types.BodyParameterIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[169] ??= 0;
try {
depthCounters[169]++;
return (
(
[
"body"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[169]--;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/bodyParameter/properties/required}
*/
export function mockBodyParameterRequired(options: MockGeneratorOptions = {}): types.BodyParameterRequired {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[170] ??= 0;
try {
depthCounters[170]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[170]--;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/required}
*/
export function mockHeaderParameterSubSchemaRequired(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaRequired {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[174] ??= 0;
try {
depthCounters[174]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[174]--;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/in}
*/
export function mockHeaderParameterSubSchemaIn(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[175] ??= 0;
try {
depthCounters[175]++;
return (
(
[
"header"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[175]--;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/description}
*/
export function mockHeaderParameterSubSchemaDescription(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[176] ??= 0;
try {
depthCounters[176]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[176]--;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/name}
*/
export function mockHeaderParameterSubSchemaName(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[177] ??= 0;
try {
depthCounters[177]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[177]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/type}
*/
export function mockHeaderParameterSubSchemaType(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[178] ??= 0;
try {
depthCounters[178]++;
return (
(
[
"string", "number", "boolean", "integer", "array"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[178]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/format}
*/
export function mockHeaderParameterSubSchemaFormat(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[179] ??= 0;
try {
depthCounters[179]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[179]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/collectionFormat}
*/
export function mockHeaderParameterSubSchemaCollectionFormat(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[181] ??= 0;
try {
depthCounters[181]++;
return (mockDefinitionsCollectionFormat());
}
finally {
depthCounters[181]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maximum}
*/
export function mockHeaderParameterSubSchemaMaximum(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[183] ??= 0;
try {
depthCounters[183]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[183]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMaximum}
*/
export function mockHeaderParameterSubSchemaExclusiveMaximum(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[184] ??= 0;
try {
depthCounters[184]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[184]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/minimum}
*/
export function mockHeaderParameterSubSchemaMinimum(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[185] ??= 0;
try {
depthCounters[185]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[185]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/exclusiveMinimum}
*/
export function mockHeaderParameterSubSchemaExclusiveMinimum(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[186] ??= 0;
try {
depthCounters[186]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[186]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxLength}
*/
export function mockHeaderParameterSubSchemaMaxLength(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[187] ??= 0;
try {
depthCounters[187]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[187]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/maxItems}
*/
export function mockHeaderParameterSubSchemaMaxItems(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[190] ??= 0;
try {
depthCounters[190]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[190]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/uniqueItems}
*/
export function mockHeaderParameterSubSchemaUniqueItems(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[192] ??= 0;
try {
depthCounters[192]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[192]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/headerParameterSubSchema/properties/multipleOf}
*/
export function mockHeaderParameterSubSchemaMultipleOf(options: MockGeneratorOptions = {}): types.HeaderParameterSubSchemaMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[194] ??= 0;
try {
depthCounters[194]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[194]--;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/required}
*/
export function mockQueryParameterSubSchemaRequired(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaRequired {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[197] ??= 0;
try {
depthCounters[197]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[197]--;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/in}
*/
export function mockQueryParameterSubSchemaIn(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[198] ??= 0;
try {
depthCounters[198]++;
return (
(
[
"query"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[198]--;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/description}
*/
export function mockQueryParameterSubSchemaDescription(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[199] ??= 0;
try {
depthCounters[199]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[199]--;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/name}
*/
export function mockQueryParameterSubSchemaName(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[200] ??= 0;
try {
depthCounters[200]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[200]--;
}
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/allowEmptyValue}
*/
export function mockQueryParameterSubSchemaAllowEmptyValue(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaAllowEmptyValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[201] ??= 0;
try {
depthCounters[201]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[201]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/type}
*/
export function mockQueryParameterSubSchemaType(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[202] ??= 0;
try {
depthCounters[202]++;
return (
(
[
"string", "number", "boolean", "integer", "array"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[202]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/format}
*/
export function mockQueryParameterSubSchemaFormat(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[203] ??= 0;
try {
depthCounters[203]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[203]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/collectionFormat}
*/
export function mockQueryParameterSubSchemaCollectionFormat(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[205] ??= 0;
try {
depthCounters[205]++;
return (mockCollectionFormatWithMulti());
}
finally {
depthCounters[205]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maximum}
*/
export function mockQueryParameterSubSchemaMaximum(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[207] ??= 0;
try {
depthCounters[207]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[207]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMaximum}
*/
export function mockQueryParameterSubSchemaExclusiveMaximum(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[208] ??= 0;
try {
depthCounters[208]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[208]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/minimum}
*/
export function mockQueryParameterSubSchemaMinimum(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[209] ??= 0;
try {
depthCounters[209]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[209]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/exclusiveMinimum}
*/
export function mockQueryParameterSubSchemaExclusiveMinimum(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[210] ??= 0;
try {
depthCounters[210]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[210]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxLength}
*/
export function mockQueryParameterSubSchemaMaxLength(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[211] ??= 0;
try {
depthCounters[211]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[211]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/maxItems}
*/
export function mockQueryParameterSubSchemaMaxItems(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[214] ??= 0;
try {
depthCounters[214]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[214]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/uniqueItems}
*/
export function mockQueryParameterSubSchemaUniqueItems(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[216] ??= 0;
try {
depthCounters[216]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[216]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/queryParameterSubSchema/properties/multipleOf}
*/
export function mockQueryParameterSubSchemaMultipleOf(options: MockGeneratorOptions = {}): types.QueryParameterSubSchemaMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[218] ??= 0;
try {
depthCounters[218]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[218]--;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/required}
*/
export function mockFormDataParameterSubSchemaRequired(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaRequired {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[221] ??= 0;
try {
depthCounters[221]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[221]--;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/in}
*/
export function mockFormDataParameterSubSchemaIn(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[222] ??= 0;
try {
depthCounters[222]++;
return (
(
[
"formData"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[222]--;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/description}
*/
export function mockFormDataParameterSubSchemaDescription(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[223] ??= 0;
try {
depthCounters[223]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[223]--;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/name}
*/
export function mockFormDataParameterSubSchemaName(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[224] ??= 0;
try {
depthCounters[224]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[224]--;
}
}
/**
* @description allows sending a parameter by name only or with an empty value.
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/allowEmptyValue}
*/
export function mockFormDataParameterSubSchemaAllowEmptyValue(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaAllowEmptyValue {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[225] ??= 0;
try {
depthCounters[225]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[225]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/type}
*/
export function mockFormDataParameterSubSchemaType(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[226] ??= 0;
try {
depthCounters[226]++;
return (
(
[
"string", "number", "boolean", "integer", "array", "file"
] as const
)[
nextSeed() % 6
]
);
}
finally {
depthCounters[226]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/format}
*/
export function mockFormDataParameterSubSchemaFormat(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[227] ??= 0;
try {
depthCounters[227]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[227]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/collectionFormat}
*/
export function mockFormDataParameterSubSchemaCollectionFormat(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[229] ??= 0;
try {
depthCounters[229]++;
return (mockCollectionFormatWithMulti());
}
finally {
depthCounters[229]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maximum}
*/
export function mockFormDataParameterSubSchemaMaximum(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[231] ??= 0;
try {
depthCounters[231]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[231]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMaximum}
*/
export function mockFormDataParameterSubSchemaExclusiveMaximum(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[232] ??= 0;
try {
depthCounters[232]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[232]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/minimum}
*/
export function mockFormDataParameterSubSchemaMinimum(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[233] ??= 0;
try {
depthCounters[233]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[233]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/exclusiveMinimum}
*/
export function mockFormDataParameterSubSchemaExclusiveMinimum(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[234] ??= 0;
try {
depthCounters[234]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[234]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxLength}
*/
export function mockFormDataParameterSubSchemaMaxLength(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[235] ??= 0;
try {
depthCounters[235]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[235]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/maxItems}
*/
export function mockFormDataParameterSubSchemaMaxItems(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[238] ??= 0;
try {
depthCounters[238]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[238]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/uniqueItems}
*/
export function mockFormDataParameterSubSchemaUniqueItems(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[240] ??= 0;
try {
depthCounters[240]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[240]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/formDataParameterSubSchema/properties/multipleOf}
*/
export function mockFormDataParameterSubSchemaMultipleOf(options: MockGeneratorOptions = {}): types.FormDataParameterSubSchemaMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[242] ??= 0;
try {
depthCounters[242]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[242]--;
}
}
/**
* @description Determines whether or not this parameter is required or optional.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/required}
*/
export function mockPathParameterSubSchemaRequired(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaRequired {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[245] ??= 0;
try {
depthCounters[245]++;
return (
(
[
true
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[245]--;
}
}
/**
* @description Determines the location of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/in}
*/
export function mockPathParameterSubSchemaIn(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[246] ??= 0;
try {
depthCounters[246]++;
return (
(
[
"path"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[246]--;
}
}
/**
* @description A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/description}
*/
export function mockPathParameterSubSchemaDescription(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[247] ??= 0;
try {
depthCounters[247]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[247]--;
}
}
/**
* @description The name of the parameter.
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/name}
*/
export function mockPathParameterSubSchemaName(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[248] ??= 0;
try {
depthCounters[248]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[248]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/type}
*/
export function mockPathParameterSubSchemaType(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[249] ??= 0;
try {
depthCounters[249]++;
return (
(
[
"string", "number", "boolean", "integer", "array"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[249]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/format}
*/
export function mockPathParameterSubSchemaFormat(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[250] ??= 0;
try {
depthCounters[250]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[250]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/collectionFormat}
*/
export function mockPathParameterSubSchemaCollectionFormat(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[252] ??= 0;
try {
depthCounters[252]++;
return (mockDefinitionsCollectionFormat());
}
finally {
depthCounters[252]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maximum}
*/
export function mockPathParameterSubSchemaMaximum(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[254] ??= 0;
try {
depthCounters[254]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[254]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMaximum}
*/
export function mockPathParameterSubSchemaExclusiveMaximum(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[255] ??= 0;
try {
depthCounters[255]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[255]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/minimum}
*/
export function mockPathParameterSubSchemaMinimum(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[256] ??= 0;
try {
depthCounters[256]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[256]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/exclusiveMinimum}
*/
export function mockPathParameterSubSchemaExclusiveMinimum(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[257] ??= 0;
try {
depthCounters[257]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[257]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxLength}
*/
export function mockPathParameterSubSchemaMaxLength(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[258] ??= 0;
try {
depthCounters[258]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[258]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/maxItems}
*/
export function mockPathParameterSubSchemaMaxItems(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[261] ??= 0;
try {
depthCounters[261]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[261]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/uniqueItems}
*/
export function mockPathParameterSubSchemaUniqueItems(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[263] ??= 0;
try {
depthCounters[263]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[263]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/pathParameterSubSchema/properties/multipleOf}
*/
export function mockPathParameterSubSchemaMultipleOf(options: MockGeneratorOptions = {}): types.PathParameterSubSchemaMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[265] ??= 0;
try {
depthCounters[265]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[265]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/$ref}
*/
export function mockSchemaRef(options: MockGeneratorOptions = {}): types.SchemaRef {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[274] ??= 0;
try {
depthCounters[274]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[274]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/format}
*/
export function mockSchemaFormat(options: MockGeneratorOptions = {}): types.SchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[275] ??= 0;
try {
depthCounters[275]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[275]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/title}
*/
export function mockSchemaTitle(options: MockGeneratorOptions = {}): types.SchemaTitle {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[276] ??= 0;
try {
depthCounters[276]++;
return (mockDraft04Title());
}
finally {
depthCounters[276]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/description}
*/
export function mockSchemaDescription(options: MockGeneratorOptions = {}): types.SchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[277] ??= 0;
try {
depthCounters[277]++;
return (mockDraft04Description());
}
finally {
depthCounters[277]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/multipleOf}
*/
export function mockSchemaMultipleOf(options: MockGeneratorOptions = {}): types.SchemaMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[279] ??= 0;
try {
depthCounters[279]++;
return (mockDraft04MultipleOf());
}
finally {
depthCounters[279]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maximum}
*/
export function mockSchemaMaximum(options: MockGeneratorOptions = {}): types.SchemaMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[280] ??= 0;
try {
depthCounters[280]++;
return (mockDraft04Maximum());
}
finally {
depthCounters[280]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMaximum}
*/
export function mockSchemaExclusiveMaximum(options: MockGeneratorOptions = {}): types.SchemaExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[281] ??= 0;
try {
depthCounters[281]++;
return (mockDraft04ExclusiveMaximum());
}
finally {
depthCounters[281]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/minimum}
*/
export function mockSchemaMinimum(options: MockGeneratorOptions = {}): types.SchemaMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[282] ??= 0;
try {
depthCounters[282]++;
return (mockDraft04Minimum());
}
finally {
depthCounters[282]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/exclusiveMinimum}
*/
export function mockSchemaExclusiveMinimum(options: MockGeneratorOptions = {}): types.SchemaExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[283] ??= 0;
try {
depthCounters[283]++;
return (mockDraft04ExclusiveMinimum());
}
finally {
depthCounters[283]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxLength}
*/
export function mockSchemaMaxLength(options: MockGeneratorOptions = {}): types.SchemaMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[284] ??= 0;
try {
depthCounters[284]++;
return (mockPositiveInteger());
}
finally {
depthCounters[284]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxItems}
*/
export function mockSchemaMaxItems(options: MockGeneratorOptions = {}): types.SchemaMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[287] ??= 0;
try {
depthCounters[287]++;
return (mockPositiveInteger());
}
finally {
depthCounters[287]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/uniqueItems}
*/
export function mockSchemaUniqueItems(options: MockGeneratorOptions = {}): types.SchemaUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[289] ??= 0;
try {
depthCounters[289]++;
return (mockDraft04UniqueItems());
}
finally {
depthCounters[289]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/maxProperties}
*/
export function mockMaxProperties(options: MockGeneratorOptions = {}): types.MaxProperties {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[290] ??= 0;
try {
depthCounters[290]++;
return (mockPositiveInteger());
}
finally {
depthCounters[290]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/discriminator}
*/
export function mockDiscriminator(options: MockGeneratorOptions = {}): types.Discriminator {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[299] ??= 0;
try {
depthCounters[299]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[299]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schema/properties/readOnly}
*/
export function mockSchemaReadOnly(options: MockGeneratorOptions = {}): types.SchemaReadOnly {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[300] ??= 0;
try {
depthCounters[300]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[300]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/format}
*/
export function mockFileSchemaFormat(options: MockGeneratorOptions = {}): types.FileSchemaFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[306] ??= 0;
try {
depthCounters[306]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[306]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/title}
*/
export function mockFileSchemaTitle(options: MockGeneratorOptions = {}): types.FileSchemaTitle {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[307] ??= 0;
try {
depthCounters[307]++;
return (mockDraft04Title());
}
finally {
depthCounters[307]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/description}
*/
export function mockFileSchemaDescription(options: MockGeneratorOptions = {}): types.FileSchemaDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[308] ??= 0;
try {
depthCounters[308]++;
return (mockDraft04Description());
}
finally {
depthCounters[308]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/type}
*/
export function mockFileSchemaType(options: MockGeneratorOptions = {}): types.FileSchemaType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[311] ??= 0;
try {
depthCounters[311]++;
return (
(
[
"file"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[311]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/fileSchema/properties/readOnly}
*/
export function mockFileSchemaReadOnly(options: MockGeneratorOptions = {}): types.FileSchemaReadOnly {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[312] ??= 0;
try {
depthCounters[312]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[312]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/type}
*/
export function mockPrimitivesItemsType(options: MockGeneratorOptions = {}): types.PrimitivesItemsType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[317] ??= 0;
try {
depthCounters[317]++;
return (
(
[
"string", "number", "integer", "boolean", "array"
] as const
)[
nextSeed() % 5
]
);
}
finally {
depthCounters[317]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/format}
*/
export function mockPrimitivesItemsFormat(options: MockGeneratorOptions = {}): types.PrimitivesItemsFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[318] ??= 0;
try {
depthCounters[318]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[318]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/collectionFormat}
*/
export function mockPrimitivesItemsCollectionFormat(options: MockGeneratorOptions = {}): types.PrimitivesItemsCollectionFormat {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[320] ??= 0;
try {
depthCounters[320]++;
return (mockDefinitionsCollectionFormat());
}
finally {
depthCounters[320]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maximum}
*/
export function mockPrimitivesItemsMaximum(options: MockGeneratorOptions = {}): types.PrimitivesItemsMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[322] ??= 0;
try {
depthCounters[322]++;
return (mockDefinitionsMaximum());
}
finally {
depthCounters[322]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMaximum}
*/
export function mockPrimitivesItemsExclusiveMaximum(options: MockGeneratorOptions = {}): types.PrimitivesItemsExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[323] ??= 0;
try {
depthCounters[323]++;
return (mockDefinitionsExclusiveMaximum());
}
finally {
depthCounters[323]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/minimum}
*/
export function mockPrimitivesItemsMinimum(options: MockGeneratorOptions = {}): types.PrimitivesItemsMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[324] ??= 0;
try {
depthCounters[324]++;
return (mockDefinitionsMinimum());
}
finally {
depthCounters[324]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/exclusiveMinimum}
*/
export function mockPrimitivesItemsExclusiveMinimum(options: MockGeneratorOptions = {}): types.PrimitivesItemsExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[325] ??= 0;
try {
depthCounters[325]++;
return (mockDefinitionsExclusiveMinimum());
}
finally {
depthCounters[325]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxLength}
*/
export function mockPrimitivesItemsMaxLength(options: MockGeneratorOptions = {}): types.PrimitivesItemsMaxLength {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[326] ??= 0;
try {
depthCounters[326]++;
return (mockDefinitionsMaxLength());
}
finally {
depthCounters[326]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/maxItems}
*/
export function mockPrimitivesItemsMaxItems(options: MockGeneratorOptions = {}): types.PrimitivesItemsMaxItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[329] ??= 0;
try {
depthCounters[329]++;
return (mockDefinitionsMaxItems());
}
finally {
depthCounters[329]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/uniqueItems}
*/
export function mockPrimitivesItemsUniqueItems(options: MockGeneratorOptions = {}): types.PrimitivesItemsUniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[331] ??= 0;
try {
depthCounters[331]++;
return (mockDefinitionsUniqueItems());
}
finally {
depthCounters[331]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/primitivesItems/properties/multipleOf}
*/
export function mockPrimitivesItemsMultipleOf(options: MockGeneratorOptions = {}): types.PrimitivesItemsMultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[333] ??= 0;
try {
depthCounters[333]++;
return (mockDefinitionsMultipleOf());
}
finally {
depthCounters[333]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/name}
*/
export function mockXmlName(options: MockGeneratorOptions = {}): types.XmlName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[338] ??= 0;
try {
depthCounters[338]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[338]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/namespace}
*/
export function mockNamespace(options: MockGeneratorOptions = {}): types.Namespace {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[339] ??= 0;
try {
depthCounters[339]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[339]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/prefix}
*/
export function mockPrefix(options: MockGeneratorOptions = {}): types.Prefix {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[340] ??= 0;
try {
depthCounters[340]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[340]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/attribute}
*/
export function mockAttribute(options: MockGeneratorOptions = {}): types.Attribute {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[341] ??= 0;
try {
depthCounters[341]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[341]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/xml/properties/wrapped}
*/
export function mockWrapped(options: MockGeneratorOptions = {}): types.Wrapped {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[342] ??= 0;
try {
depthCounters[342]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[342]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/name}
*/
export function mockTagName(options: MockGeneratorOptions = {}): types.TagName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[345] ??= 0;
try {
depthCounters[345]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[345]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/tag/properties/description}
*/
export function mockTagDescription(options: MockGeneratorOptions = {}): types.TagDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[346] ??= 0;
try {
depthCounters[346]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[346]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/type}
*/
export function mockBasicAuthenticationSecurityType(options: MockGeneratorOptions = {}): types.BasicAuthenticationSecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[351] ??= 0;
try {
depthCounters[351]++;
return (
(
[
"basic"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[351]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/basicAuthenticationSecurity/properties/description}
*/
export function mockBasicAuthenticationSecurityDescription(options: MockGeneratorOptions = {}): types.BasicAuthenticationSecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[352] ??= 0;
try {
depthCounters[352]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[352]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/type}
*/
export function mockApiKeySecurityType(options: MockGeneratorOptions = {}): types.ApiKeySecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[355] ??= 0;
try {
depthCounters[355]++;
return (
(
[
"apiKey"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[355]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/name}
*/
export function mockApiKeySecurityName(options: MockGeneratorOptions = {}): types.ApiKeySecurityName {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[356] ??= 0;
try {
depthCounters[356]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[356]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/in}
*/
export function mockApiKeySecurityIn(options: MockGeneratorOptions = {}): types.ApiKeySecurityIn {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[357] ??= 0;
try {
depthCounters[357]++;
return (
(
[
"header", "query"
] as const
)[
nextSeed() % 2
]
);
}
finally {
depthCounters[357]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/apiKeySecurity/properties/description}
*/
export function mockApiKeySecurityDescription(options: MockGeneratorOptions = {}): types.ApiKeySecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[358] ??= 0;
try {
depthCounters[358]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[358]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/type}
*/
export function mockOauth2ImplicitSecurityType(options: MockGeneratorOptions = {}): types.Oauth2ImplicitSecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[361] ??= 0;
try {
depthCounters[361]++;
return (
(
[
"oauth2"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[361]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/flow}
*/
export function mockOauth2ImplicitSecurityFlow(options: MockGeneratorOptions = {}): types.Oauth2ImplicitSecurityFlow {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[362] ??= 0;
try {
depthCounters[362]++;
return (
(
[
"implicit"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[362]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/scopes}
*/
export function mockOauth2ImplicitSecurityScopes(options: MockGeneratorOptions = {}): types.Oauth2ImplicitSecurityScopes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[363] ??= 0;
try {
depthCounters[363]++;
return (mockOauth2Scopes());
}
finally {
depthCounters[363]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ImplicitSecurity/properties/description}
*/
export function mockOauth2ImplicitSecurityDescription(options: MockGeneratorOptions = {}): types.Oauth2ImplicitSecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[365] ??= 0;
try {
depthCounters[365]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[365]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/type}
*/
export function mockOauth2PasswordSecurityType(options: MockGeneratorOptions = {}): types.Oauth2PasswordSecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[368] ??= 0;
try {
depthCounters[368]++;
return (
(
[
"oauth2"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[368]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/flow}
*/
export function mockOauth2PasswordSecurityFlow(options: MockGeneratorOptions = {}): types.Oauth2PasswordSecurityFlow {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[369] ??= 0;
try {
depthCounters[369]++;
return (
(
[
"password"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[369]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/scopes}
*/
export function mockOauth2PasswordSecurityScopes(options: MockGeneratorOptions = {}): types.Oauth2PasswordSecurityScopes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[370] ??= 0;
try {
depthCounters[370]++;
return (mockOauth2Scopes());
}
finally {
depthCounters[370]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2PasswordSecurity/properties/description}
*/
export function mockOauth2PasswordSecurityDescription(options: MockGeneratorOptions = {}): types.Oauth2PasswordSecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[372] ??= 0;
try {
depthCounters[372]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[372]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/type}
*/
export function mockOauth2ApplicationSecurityType(options: MockGeneratorOptions = {}): types.Oauth2ApplicationSecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[375] ??= 0;
try {
depthCounters[375]++;
return (
(
[
"oauth2"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[375]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/flow}
*/
export function mockOauth2ApplicationSecurityFlow(options: MockGeneratorOptions = {}): types.Oauth2ApplicationSecurityFlow {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[376] ??= 0;
try {
depthCounters[376]++;
return (
(
[
"application"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[376]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/scopes}
*/
export function mockOauth2ApplicationSecurityScopes(options: MockGeneratorOptions = {}): types.Oauth2ApplicationSecurityScopes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[377] ??= 0;
try {
depthCounters[377]++;
return (mockOauth2Scopes());
}
finally {
depthCounters[377]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2ApplicationSecurity/properties/description}
*/
export function mockOauth2ApplicationSecurityDescription(options: MockGeneratorOptions = {}): types.Oauth2ApplicationSecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[379] ??= 0;
try {
depthCounters[379]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[379]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/type}
*/
export function mockOauth2AccessCodeSecurityType(options: MockGeneratorOptions = {}): types.Oauth2AccessCodeSecurityType {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[382] ??= 0;
try {
depthCounters[382]++;
return (
(
[
"oauth2"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[382]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/flow}
*/
export function mockOauth2AccessCodeSecurityFlow(options: MockGeneratorOptions = {}): types.Oauth2AccessCodeSecurityFlow {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[383] ??= 0;
try {
depthCounters[383]++;
return (
(
[
"accessCode"
] as const
)[
nextSeed() % 1
]
);
}
finally {
depthCounters[383]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/scopes}
*/
export function mockOauth2AccessCodeSecurityScopes(options: MockGeneratorOptions = {}): types.Oauth2AccessCodeSecurityScopes {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[384] ??= 0;
try {
depthCounters[384]++;
return (mockOauth2Scopes());
}
finally {
depthCounters[384]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2AccessCodeSecurity/properties/description}
*/
export function mockOauth2AccessCodeSecurityDescription(options: MockGeneratorOptions = {}): types.Oauth2AccessCodeSecurityDescription {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[387] ??= 0;
try {
depthCounters[387]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[387]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/oauth2Scopes/additionalProperties}
*/
export function mockOauth2ScopesAdditionalProperties(options: MockGeneratorOptions = {}): types.Oauth2ScopesAdditionalProperties {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[390] ??= 0;
try {
depthCounters[390]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[390]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/mediaTypeList/items}
*/
export function mockMediaTypeListItems(options: MockGeneratorOptions = {}): types.MediaTypeListItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[391] ??= 0;
try {
depthCounters[391]++;
return (mockMimeType());
}
finally {
depthCounters[391]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/schemesList/items}
*/
export function mockSchemesListItems(options: MockGeneratorOptions = {}): types.SchemesListItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[394] ??= 0;
try {
depthCounters[394]++;
return (
(
[
"http", "https", "ws", "wss"
] as const
)[
nextSeed() % 4
]
);
}
finally {
depthCounters[394]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/jsonReference/properties/$ref}
*/
export function mockJsonReferenceRef(options: MockGeneratorOptions = {}): types.JsonReferenceRef {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[395] ??= 0;
try {
depthCounters[395]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[395]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/operation/properties/tags/items}
*/
export function mockOperationTagsItems(options: MockGeneratorOptions = {}): types.OperationTagsItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[400] ??= 0;
try {
depthCounters[400]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[400]--;
}
}
/**
* @see {@link http://swagger.io/v2/schema.json#/definitions/securityRequirement/additionalProperties/items}
*/
export function mockSecurityRequirementItems(options: MockGeneratorOptions = {}): types.SecurityRequirementItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[413] ??= 0;
try {
depthCounters[413]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[413]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/title}
*/
export function mockDraft04Title(options: MockGeneratorOptions = {}): types.Draft04Title {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[423] ??= 0;
try {
depthCounters[423]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[423]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/description}
*/
export function mockDraft04Description(options: MockGeneratorOptions = {}): types.Draft04Description {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[424] ??= 0;
try {
depthCounters[424]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[424]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/multipleOf}
*/
export function mockDraft04MultipleOf(options: MockGeneratorOptions = {}): types.Draft04MultipleOf {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[426] ??= 0;
try {
depthCounters[426]++;
return (
(
(0 * configuration.numberPrecision + 1) +
nextSeed() % (
(configuration.defaultMaximumValue * configuration.numberPrecision) - (0 * configuration.numberPrecision + 1) + 1
) / configuration.numberPrecision
)
);
}
finally {
depthCounters[426]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/maximum}
*/
export function mockDraft04Maximum(options: MockGeneratorOptions = {}): types.Draft04Maximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[427] ??= 0;
try {
depthCounters[427]++;
return (
(
configuration.defaultMinimumValue * configuration.numberPrecision +
nextSeed() % (
(configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1
) / configuration.numberPrecision
)
);
}
finally {
depthCounters[427]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum}
*/
export function mockDraft04ExclusiveMaximum(options: MockGeneratorOptions = {}): types.Draft04ExclusiveMaximum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[428] ??= 0;
try {
depthCounters[428]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[428]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/minimum}
*/
export function mockDraft04Minimum(options: MockGeneratorOptions = {}): types.Draft04Minimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[429] ??= 0;
try {
depthCounters[429]++;
return (
(
configuration.defaultMinimumValue * configuration.numberPrecision +
nextSeed() % (
(configuration.defaultMaximumValue * configuration.numberPrecision) - configuration.defaultMinimumValue * configuration.numberPrecision + 1
) / configuration.numberPrecision
)
);
}
finally {
depthCounters[429]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum}
*/
export function mockDraft04ExclusiveMinimum(options: MockGeneratorOptions = {}): types.Draft04ExclusiveMinimum {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[430] ??= 0;
try {
depthCounters[430]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[430]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveInteger}
*/
export function mockPositiveInteger(options: MockGeneratorOptions = {}): types.PositiveInteger {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[431] ??= 0;
try {
depthCounters[431]++;
return (
(Math.ceil(0 / 1) + nextSeed() % (Math.floor(configuration.defaultMaximumValue / 1) - Math.ceil(0 / 1) + 1)) * 1
);
}
finally {
depthCounters[431]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0/allOf/0}
*/
export function mockPositiveIntegerDefault00(options: MockGeneratorOptions = {}): types.PositiveIntegerDefault00 {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[433] ??= 0;
try {
depthCounters[433]++;
return (mockPositiveInteger());
}
finally {
depthCounters[433]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/properties/uniqueItems}
*/
export function mockDraft04UniqueItems(options: MockGeneratorOptions = {}): types.Draft04UniqueItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[436] ??= 0;
try {
depthCounters[436]++;
return (Boolean(nextSeed() % 2));
}
finally {
depthCounters[436]--;
}
}
/**
* @see {@link http://json-schema.org/draft-04/schema#/definitions/stringArray/items}
*/
export function mockStringArrayItems(options: MockGeneratorOptions = {}): types.StringArrayItems {
const configuration = {
...defaultMockGeneratorOptions,
...options,
};
depthCounters[439] ??= 0;
try {
depthCounters[439]++;
return (
new Array(
configuration.defaultMinimumStringLength +
nextSeed() % (
configuration.defaultMaximumStringLength - configuration.defaultMinimumStringLength + 1
)
).
fill(undefined).
map(() => configuration.stringCharacters[nextSeed() % configuration.stringCharacters.length]).
join("")
);
}
finally {
depthCounters[439]--;
}
}
let seed = 1;
function nextSeed() {
// https://en.wikipedia.org/wiki/Linear_congruential_generator
// https://statmath.wu.ac.at/software/src/prng-3.0.2/doc/prng.html/Table_LCG.html
const p = Math.pow(2, 31) - 1;
const a = 950706376;
const b = 0;
seed = (a * seed + b) % p;
return seed;
}
